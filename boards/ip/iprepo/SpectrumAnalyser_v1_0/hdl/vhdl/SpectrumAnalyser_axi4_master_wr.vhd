-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\spectrum_analyser\SpectrumAnalyser_axi4_master_wr.vhd
-- Created: 2021-01-25 07:04:08
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SpectrumAnalyser_axi4_master_wr
-- Source Path: SpectrumAnalyser/SpectrumAnalyser_axi4_master_wr
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SpectrumAnalyser_axi4_master_wr IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        AXI4_Master_Wr_AWREADY            :   IN    std_logic;  -- ufix1
        AXI4_Master_Wr_WREADY             :   IN    std_logic;  -- ufix1
        AXI4_Master_Wr_BID                :   IN    std_logic;  -- ufix1
        AXI4_Master_Wr_BRESP              :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Master_Wr_BVALID             :   IN    std_logic;  -- ufix1
        user_data                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        user_wr_addr                      :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        user_wr_len                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        user_wr_valid                     :   IN    std_logic;  -- ufix1
        write_AXI4_Master_Wr_base_address :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        soft_reset_pending                :   IN    std_logic;  -- ufix1
        AXI4_Master_Wr_AWID               :   OUT   std_logic;  -- ufix1
        AXI4_Master_Wr_AWADDR             :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Master_Wr_AWLEN              :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        AXI4_Master_Wr_AWSIZE             :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        AXI4_Master_Wr_AWBURST            :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Master_Wr_AWLOCK             :   OUT   std_logic;  -- ufix1
        AXI4_Master_Wr_AWCACHE            :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Master_Wr_AWPROT             :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        AXI4_Master_Wr_AWVALID            :   OUT   std_logic;  -- ufix1
        AXI4_Master_Wr_WDATA              :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Master_Wr_WSTRB              :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Master_Wr_WLAST              :   OUT   std_logic;  -- ufix1
        AXI4_Master_Wr_WVALID             :   OUT   std_logic;  -- ufix1
        AXI4_Master_Wr_BREADY             :   OUT   std_logic;  -- ufix1
        user_wr_ready                     :   OUT   std_logic;  -- ufix1
        user_wr_complete                  :   OUT   std_logic;  -- ufix1
        in_burst_axi4_master_wr           :   OUT   std_logic  -- ufix1
        );
END SpectrumAnalyser_axi4_master_wr;


ARCHITECTURE rtl OF SpectrumAnalyser_axi4_master_wr IS

  -- Component Declarations
  COMPONENT SpectrumAnalyser_wdata_fifo
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          Push                            :   IN    std_logic;  -- ufix1
          Pop                             :   IN    std_logic;  -- ufix1
          Out_rsvd                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          Empty                           :   OUT   std_logic;  -- ufix1
          AFull                           :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT SpectrumAnalyser_wr_addr_fifo
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          Push                            :   IN    std_logic;  -- ufix1
          Pop                             :   IN    std_logic;  -- ufix1
          Out_rsvd                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT SpectrumAnalyser_wr_data_fifo
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          Push                            :   IN    std_logic;  -- ufix1
          Pop                             :   IN    std_logic;  -- ufix1
          Out_rsvd                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          Empty                           :   OUT   std_logic;  -- ufix1
          AFull                           :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT SpectrumAnalyser_wr_len_fifo
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          Push                            :   IN    std_logic;  -- ufix1
          Pop                             :   IN    std_logic;  -- ufix1
          Out_rsvd                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT SpectrumAnalyser_wlast_fifo
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic;  -- ufix1
          Push                            :   IN    std_logic;  -- ufix1
          Pop                             :   IN    std_logic;  -- ufix1
          Out_rsvd                        :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : SpectrumAnalyser_wdata_fifo
    USE ENTITY work.SpectrumAnalyser_wdata_fifo(rtl);

  FOR ALL : SpectrumAnalyser_wr_addr_fifo
    USE ENTITY work.SpectrumAnalyser_wr_addr_fifo(rtl);

  FOR ALL : SpectrumAnalyser_wr_data_fifo
    USE ENTITY work.SpectrumAnalyser_wr_data_fifo(rtl);

  FOR ALL : SpectrumAnalyser_wr_len_fifo
    USE ENTITY work.SpectrumAnalyser_wr_len_fifo(rtl);

  FOR ALL : SpectrumAnalyser_wlast_fifo
    USE ENTITY work.SpectrumAnalyser_wlast_fifo(rtl);

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL const_0_1                        : std_logic;  -- ufix1
  SIGNAL user_wr_len_unsigned             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_len_dec                    : std_logic;  -- ufix1
  SIGNAL len_decrement_sub_cast           : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL len_decrement_sub_cast_1         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL len_decrement_sub_cast_2         : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL len_decrement_sub_temp           : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL len_val                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL user_wr_addr_unsigned            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL write_AXI4_Master_Wr_base_address_unsigned : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL full_addr                        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL out_fifo_empty                   : std_logic;  -- ufix1
  SIGNAL wvalid_internal                  : std_logic;  -- ufix1
  SIGNAL out_fifo_ack                     : std_logic;  -- ufix1
  SIGNAL wr_fifo_data                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL wr_fifo_data_unsigned            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL wr_transfer                      : std_logic;  -- ufix1
  SIGNAL out_fifo_wdata                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL out_fifo_push                    : std_logic;  -- ufix1
  SIGNAL AXI4_Master_Wr_WDATA_tmp         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out_fifo_afull                   : std_logic;  -- ufix1
  SIGNAL wr_fifo_ack                      : std_logic;  -- ufix1
  SIGNAL wr_fifo_addr                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL wr_fifo_addr_unsigned            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL wr_fifo_empty                    : std_logic;  -- ufix1
  SIGNAL wr_fifo_afull                    : std_logic;  -- ufix1
  SIGNAL wr_valid_internal                : std_logic;  -- ufix1
  SIGNAL wr_fifo_len                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL wr_fifo_len_unsigned             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL axi4_master_wr_wr_astate         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL axi4_master_wr_wr_dstate         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL axi4_master_wr_wr_len_reg        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL axi4_master_wr_wr_addr_reg       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL axi4_master_wr_last_burst_reg    : std_logic;
  SIGNAL axi4_master_wr_data_done_reg     : std_logic;
  SIGNAL axi4_master_wr_addr_done_reg     : std_logic;
  SIGNAL axi4_master_wr_awlen_reg         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL axi4_master_wr_burst_cnt_reg     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL axi4_master_wr_awvalid_reg       : std_logic;
  SIGNAL axi4_master_wr_awaddr_reg        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL axi4_master_wr_wvalid_reg        : std_logic;
  SIGNAL axi4_master_wr_wlast_reg         : std_logic;
  SIGNAL axi4_master_wr_wr_astate_next    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL axi4_master_wr_wr_dstate_next    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL axi4_master_wr_wr_len_reg_next   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL axi4_master_wr_wr_addr_reg_next  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL axi4_master_wr_last_burst_reg_next : std_logic;
  SIGNAL axi4_master_wr_data_done_reg_next : std_logic;
  SIGNAL axi4_master_wr_addr_done_reg_next : std_logic;
  SIGNAL axi4_master_wr_awlen_reg_next    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL axi4_master_wr_burst_cnt_reg_next : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL axi4_master_wr_awvalid_reg_next  : std_logic;
  SIGNAL axi4_master_wr_awaddr_reg_next   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL axi4_master_wr_wvalid_reg_next   : std_logic;
  SIGNAL axi4_master_wr_wlast_reg_next    : std_logic;
  SIGNAL AXI4_Master_Wr_AWVALID_1         : std_logic;  -- ufix1
  SIGNAL AXI4_Master_Wr_AWADDR_tmp        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Master_Wr_AWLEN_tmp         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL out_fifo_wlast                   : std_logic;  -- ufix1
  SIGNAL wr_complete_internal             : std_logic;  -- ufix1
  SIGNAL const_awsize                     : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL const_1_2                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL const_3_4                        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL const_0_3                        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL const_wstrb                      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL aw_transfer                      : std_logic;  -- ufix1
  SIGNAL const_0_9                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL const_1_9                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL aw_transfer_len                  : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL w_transfer                       : std_logic;  -- ufix1
  SIGNAL w_transfer_len                   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL accum_value                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL accum_awlen_adder_add_cast       : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL accum_aw_len                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL accum_wlen_adder_sub_cast        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL accum_w_len                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL in_burst_axi4_master_wr_1        : std_logic;  -- ufix1

BEGIN
  u_SpectrumAnalyser_wdata_fifo_inst : SpectrumAnalyser_wdata_fifo
    PORT MAP( clk => clk,
              reset => reset,
              enb => const_1_1,
              In_rsvd => std_logic_vector(out_fifo_wdata),  -- ufix32
              Push => out_fifo_push,  -- ufix1
              Pop => out_fifo_ack,  -- ufix1
              Out_rsvd => AXI4_Master_Wr_WDATA_tmp,  -- ufix32
              Empty => out_fifo_empty,  -- ufix1
              AFull => out_fifo_afull  -- ufix1
              );

  u_SpectrumAnalyser_wr_addr_fifo_inst : SpectrumAnalyser_wr_addr_fifo
    PORT MAP( clk => clk,
              reset => reset,
              enb => const_1_1,
              In_rsvd => std_logic_vector(full_addr),  -- ufix32
              Push => user_wr_valid,  -- ufix1
              Pop => wr_fifo_ack,  -- ufix1
              Out_rsvd => wr_fifo_addr  -- ufix32
              );

  u_SpectrumAnalyser_wr_data_fifo_inst : SpectrumAnalyser_wr_data_fifo
    PORT MAP( clk => clk,
              reset => reset,
              enb => const_1_1,
              In_rsvd => user_data,  -- ufix32
              Push => user_wr_valid,  -- ufix1
              Pop => wr_fifo_ack,  -- ufix1
              Out_rsvd => wr_fifo_data,  -- ufix32
              Empty => wr_fifo_empty,  -- ufix1
              AFull => wr_fifo_afull  -- ufix1
              );

  u_SpectrumAnalyser_wr_len_fifo_inst : SpectrumAnalyser_wr_len_fifo
    PORT MAP( clk => clk,
              reset => reset,
              enb => const_1_1,
              In_rsvd => std_logic_vector(len_val),  -- ufix32
              Push => user_wr_valid,  -- ufix1
              Pop => wr_fifo_ack,  -- ufix1
              Out_rsvd => wr_fifo_len  -- ufix32
              );

  u_SpectrumAnalyser_wlast_fifo_inst : SpectrumAnalyser_wlast_fifo
    PORT MAP( clk => clk,
              reset => reset,
              enb => const_1_1,
              In_rsvd => out_fifo_wlast,  -- ufix1
              Push => out_fifo_push,  -- ufix1
              Pop => out_fifo_ack,  -- ufix1
              Out_rsvd => AXI4_Master_Wr_WLAST  -- ufix1
              );

  const_0_1 <= '0';

  AXI4_Master_Wr_AWID <= const_0_1;

  user_wr_len_unsigned <= unsigned(user_wr_len);

  const_len_dec <= '1';

  len_decrement_sub_cast <= signed(resize(user_wr_len_unsigned, 33));
  len_decrement_sub_cast_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & const_len_dec;
  len_decrement_sub_cast_2 <= signed(resize(len_decrement_sub_cast_1, 33));
  len_decrement_sub_temp <= len_decrement_sub_cast - len_decrement_sub_cast_2;
  
  len_val <= X"00000000" WHEN len_decrement_sub_temp(32) = '1' ELSE
      unsigned(len_decrement_sub_temp(31 DOWNTO 0));

  const_1_1 <= '1';

  user_wr_addr_unsigned <= unsigned(user_wr_addr);

  write_AXI4_Master_Wr_base_address_unsigned <= unsigned(write_AXI4_Master_Wr_base_address);

  full_addr <= user_wr_addr_unsigned + write_AXI4_Master_Wr_base_address_unsigned;

  enb <= const_1_1;

  wvalid_internal <=  NOT out_fifo_empty;

  out_fifo_ack <= AXI4_Master_Wr_WREADY AND wvalid_internal;

  wr_fifo_data_unsigned <= unsigned(wr_fifo_data);

  wr_transfer_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      out_fifo_wdata <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND wr_transfer = '1' THEN
        out_fifo_wdata <= wr_fifo_data_unsigned;
      END IF;
    END IF;
  END PROCESS wr_transfer_reg_process;


  wr_fifo_addr_unsigned <= unsigned(wr_fifo_addr);

  wr_valid_internal <=  NOT wr_fifo_empty;

  wr_fifo_len_unsigned <= unsigned(wr_fifo_len);

  axi4_master_wr_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      axi4_master_wr_wr_astate <= to_unsigned(16#00#, 8);
      axi4_master_wr_wr_dstate <= to_unsigned(16#00#, 8);
      axi4_master_wr_wr_len_reg <= to_unsigned(0, 32);
      axi4_master_wr_wr_addr_reg <= to_unsigned(0, 32);
      axi4_master_wr_awlen_reg <= to_unsigned(16#00#, 8);
      axi4_master_wr_burst_cnt_reg <= to_unsigned(16#00#, 8);
      axi4_master_wr_awvalid_reg <= '0';
      axi4_master_wr_awaddr_reg <= to_unsigned(0, 32);
      axi4_master_wr_wvalid_reg <= '0';
      axi4_master_wr_wlast_reg <= '0';
      axi4_master_wr_last_burst_reg <= '0';
      axi4_master_wr_data_done_reg <= '0';
      axi4_master_wr_addr_done_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        axi4_master_wr_wr_astate <= axi4_master_wr_wr_astate_next;
        axi4_master_wr_wr_dstate <= axi4_master_wr_wr_dstate_next;
        axi4_master_wr_wr_len_reg <= axi4_master_wr_wr_len_reg_next;
        axi4_master_wr_wr_addr_reg <= axi4_master_wr_wr_addr_reg_next;
        axi4_master_wr_last_burst_reg <= axi4_master_wr_last_burst_reg_next;
        axi4_master_wr_data_done_reg <= axi4_master_wr_data_done_reg_next;
        axi4_master_wr_addr_done_reg <= axi4_master_wr_addr_done_reg_next;
        axi4_master_wr_awlen_reg <= axi4_master_wr_awlen_reg_next;
        axi4_master_wr_burst_cnt_reg <= axi4_master_wr_burst_cnt_reg_next;
        axi4_master_wr_awvalid_reg <= axi4_master_wr_awvalid_reg_next;
        axi4_master_wr_awaddr_reg <= axi4_master_wr_awaddr_reg_next;
        axi4_master_wr_wvalid_reg <= axi4_master_wr_wvalid_reg_next;
        axi4_master_wr_wlast_reg <= axi4_master_wr_wlast_reg_next;
      END IF;
    END IF;
  END PROCESS axi4_master_wr_process;

  axi4_master_wr_output : PROCESS (AXI4_Master_Wr_AWREADY, axi4_master_wr_addr_done_reg,
       axi4_master_wr_awaddr_reg, axi4_master_wr_awlen_reg,
       axi4_master_wr_awvalid_reg, axi4_master_wr_burst_cnt_reg,
       axi4_master_wr_data_done_reg, axi4_master_wr_last_burst_reg,
       axi4_master_wr_wlast_reg, axi4_master_wr_wr_addr_reg,
       axi4_master_wr_wr_astate, axi4_master_wr_wr_dstate,
       axi4_master_wr_wr_len_reg, axi4_master_wr_wvalid_reg, out_fifo_afull,
       soft_reset_pending, wr_fifo_addr_unsigned, wr_fifo_len_unsigned,
       wr_valid_internal)
    VARIABLE wr_valid : std_logic;
    VARIABLE reset_pending : std_logic;
    VARIABLE last_burst_reg_temp : std_logic;
    VARIABLE addr_done_reg_temp : std_logic;
  BEGIN
    last_burst_reg_temp := axi4_master_wr_last_burst_reg;
    addr_done_reg_temp := axi4_master_wr_addr_done_reg;
    axi4_master_wr_wr_astate_next <= axi4_master_wr_wr_astate;
    axi4_master_wr_wr_dstate_next <= axi4_master_wr_wr_dstate;
    axi4_master_wr_wr_len_reg_next <= axi4_master_wr_wr_len_reg;
    axi4_master_wr_wr_addr_reg_next <= axi4_master_wr_wr_addr_reg;
    axi4_master_wr_data_done_reg_next <= axi4_master_wr_data_done_reg;
    axi4_master_wr_awlen_reg_next <= axi4_master_wr_awlen_reg;
    axi4_master_wr_burst_cnt_reg_next <= axi4_master_wr_burst_cnt_reg;
    axi4_master_wr_awvalid_reg_next <= axi4_master_wr_awvalid_reg;
    axi4_master_wr_awaddr_reg_next <= axi4_master_wr_awaddr_reg;
    axi4_master_wr_wvalid_reg_next <= axi4_master_wr_wvalid_reg;
    axi4_master_wr_wlast_reg_next <= axi4_master_wr_wlast_reg;
    IF wr_valid_internal /= '0' THEN 
      wr_valid := '1';
    ELSE 
      wr_valid := '0';
    END IF;
    IF soft_reset_pending /= '0' THEN 
      reset_pending := '1';
    ELSE 
      reset_pending := '0';
    END IF;
    wr_complete_internal <= (axi4_master_wr_last_burst_reg AND axi4_master_wr_wlast_reg) AND axi4_master_wr_wvalid_reg;
    CASE axi4_master_wr_wr_astate IS
      WHEN "00000000" =>
        last_burst_reg_temp := '0';
        addr_done_reg_temp := '0';
        IF (wr_valid AND ( NOT reset_pending)) = '1' THEN 
          axi4_master_wr_wr_astate_next <= to_unsigned(16#01#, 8);
        END IF;
        axi4_master_wr_wr_len_reg_next <= wr_fifo_len_unsigned;
        axi4_master_wr_wr_addr_reg_next <= wr_fifo_addr_unsigned;
      WHEN "00000001" =>
        addr_done_reg_temp := '0';
        IF (axi4_master_wr_awvalid_reg AND AXI4_Master_Wr_AWREADY) = '1' THEN 
          axi4_master_wr_awvalid_reg_next <= '0';
          axi4_master_wr_wr_astate_next <= to_unsigned(16#03#, 8);
        ELSE 
          axi4_master_wr_awvalid_reg_next <= '1';
        END IF;
        axi4_master_wr_awaddr_reg_next <= axi4_master_wr_wr_addr_reg;
        IF axi4_master_wr_wr_len_reg > to_unsigned(255, 32) THEN 
          axi4_master_wr_awlen_reg_next <= to_unsigned(16#FF#, 8);
          last_burst_reg_temp := '0';
        ELSE 
          axi4_master_wr_awlen_reg_next <= axi4_master_wr_wr_len_reg(7 DOWNTO 0);
          last_burst_reg_temp := '1';
        END IF;
      WHEN "00000011" =>
        IF axi4_master_wr_data_done_reg = '1' THEN 
          IF axi4_master_wr_last_burst_reg = '1' THEN 
            axi4_master_wr_wr_astate_next <= to_unsigned(16#00#, 8);
          ELSE 
            axi4_master_wr_wr_astate_next <= to_unsigned(16#01#, 8);
          END IF;
          axi4_master_wr_wr_len_reg_next <= axi4_master_wr_wr_len_reg - to_unsigned(256, 32);
          axi4_master_wr_wr_addr_reg_next <= axi4_master_wr_wr_addr_reg + to_unsigned(1024, 32);
          addr_done_reg_temp := '1';
        END IF;
      WHEN OTHERS => 
        axi4_master_wr_wr_astate_next <= to_unsigned(16#00#, 8);
    END CASE;
    CASE axi4_master_wr_wr_dstate IS
      WHEN "00000000" =>
        wr_fifo_ack <= '0';
        wr_transfer <= '0';
        axi4_master_wr_data_done_reg_next <= '0';
        IF (wr_valid AND ( NOT reset_pending)) = '1' THEN 
          axi4_master_wr_wr_dstate_next <= to_unsigned(16#01#, 8);
        END IF;
        axi4_master_wr_wvalid_reg_next <= '0';
        axi4_master_wr_wlast_reg_next <= '0';
      WHEN "00000001" =>
        axi4_master_wr_wr_dstate_next <= to_unsigned(16#02#, 8);
        axi4_master_wr_data_done_reg_next <= '0';
        IF axi4_master_wr_wr_len_reg > to_unsigned(255, 32) THEN 
          axi4_master_wr_burst_cnt_reg_next <= to_unsigned(16#FF#, 8);
        ELSE 
          axi4_master_wr_burst_cnt_reg_next <= axi4_master_wr_wr_len_reg(7 DOWNTO 0);
        END IF;
        wr_fifo_ack <= '0';
        wr_transfer <= '0';
      WHEN "00000010" =>
        IF (hdlcoder_to_stdlogic( NOT (out_fifo_afull /= '0')) AND wr_valid) = '1' THEN 
          axi4_master_wr_wvalid_reg_next <= '1';
          wr_fifo_ack <= '1';
          IF axi4_master_wr_burst_cnt_reg = to_unsigned(16#00#, 8) THEN 
            axi4_master_wr_wlast_reg_next <= '1';
            axi4_master_wr_wr_dstate_next <= to_unsigned(16#03#, 8);
            axi4_master_wr_data_done_reg_next <= '1';
          END IF;
          axi4_master_wr_burst_cnt_reg_next <= axi4_master_wr_burst_cnt_reg - to_unsigned(16#01#, 8);
        ELSE 
          axi4_master_wr_wvalid_reg_next <= '0';
          wr_fifo_ack <= '0';
        END IF;
        wr_transfer <= '1';
      WHEN "00000011" =>
        IF addr_done_reg_temp = '1' THEN 
          IF last_burst_reg_temp = '1' THEN 
            axi4_master_wr_wr_dstate_next <= to_unsigned(16#00#, 8);
          ELSE 
            axi4_master_wr_wr_dstate_next <= to_unsigned(16#01#, 8);
          END IF;
        END IF;
        axi4_master_wr_wvalid_reg_next <= '0';
        axi4_master_wr_wlast_reg_next <= '0';
        wr_fifo_ack <= '0';
        wr_transfer <= '0';
        axi4_master_wr_data_done_reg_next <= '1';
      WHEN OTHERS => 
        wr_fifo_ack <= '0';
        wr_transfer <= '0';
        axi4_master_wr_wr_dstate_next <= to_unsigned(16#00#, 8);
    END CASE;
    AXI4_Master_Wr_AWVALID_1 <= axi4_master_wr_awvalid_reg;
    AXI4_Master_Wr_AWADDR_tmp <= axi4_master_wr_awaddr_reg;
    AXI4_Master_Wr_AWLEN_tmp <= axi4_master_wr_awlen_reg;
    out_fifo_push <= axi4_master_wr_wvalid_reg;
    out_fifo_wlast <= axi4_master_wr_wlast_reg;
    axi4_master_wr_last_burst_reg_next <= last_burst_reg_temp;
    axi4_master_wr_addr_done_reg_next <= addr_done_reg_temp;
  END PROCESS axi4_master_wr_output;


  AXI4_Master_Wr_AWADDR <= std_logic_vector(AXI4_Master_Wr_AWADDR_tmp);

  AXI4_Master_Wr_AWLEN <= std_logic_vector(AXI4_Master_Wr_AWLEN_tmp);

  const_awsize <= to_unsigned(16#2#, 3);

  AXI4_Master_Wr_AWSIZE <= std_logic_vector(const_awsize);

  const_1_2 <= to_unsigned(16#1#, 2);

  AXI4_Master_Wr_AWBURST <= std_logic_vector(const_1_2);

  AXI4_Master_Wr_AWLOCK <= const_0_1;

  const_3_4 <= to_unsigned(16#3#, 4);

  AXI4_Master_Wr_AWCACHE <= std_logic_vector(const_3_4);

  const_0_3 <= to_unsigned(16#0#, 3);

  AXI4_Master_Wr_AWPROT <= std_logic_vector(const_0_3);

  const_wstrb <= to_unsigned(16#F#, 4);

  AXI4_Master_Wr_WSTRB <= std_logic_vector(const_wstrb);

  AXI4_Master_Wr_WVALID <= wvalid_internal;

  AXI4_Master_Wr_BREADY <= const_1_1;

  user_wr_ready <=  NOT wr_fifo_afull;

  user_wr_complete <= wr_complete_internal;

  aw_transfer <= AXI4_Master_Wr_AWREADY AND AXI4_Master_Wr_AWVALID_1;

  const_0_9 <= to_unsigned(16#000#, 9);

  const_1_9 <= to_unsigned(16#001#, 9);

  
  aw_transfer_len <= const_0_9 WHEN aw_transfer = '0' ELSE
      const_1_9;

  w_transfer <= const_1_1 AND AXI4_Master_Wr_BVALID;

  
  w_transfer_len <= const_0_9 WHEN w_transfer = '0' ELSE
      const_1_9;

  accum_awlen_adder_add_cast <= signed(resize(aw_transfer_len, 32));
  accum_aw_len <= accum_awlen_adder_add_cast + accum_value;

  accum_wlen_adder_sub_cast <= signed(resize(w_transfer_len, 32));
  accum_w_len <= accum_aw_len - accum_wlen_adder_sub_cast;

  reg_accum_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      accum_value <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        accum_value <= accum_w_len;
      END IF;
    END IF;
  END PROCESS reg_accum_process;


  
  in_burst_axi4_master_wr_1 <= '1' WHEN accum_value > to_signed(0, 32) ELSE
      '0';

  in_burst_axi4_master_wr <= in_burst_axi4_master_wr_1;

  AXI4_Master_Wr_AWVALID <= AXI4_Master_Wr_AWVALID_1;

  AXI4_Master_Wr_WDATA <= AXI4_Master_Wr_WDATA_tmp;

END rtl;

