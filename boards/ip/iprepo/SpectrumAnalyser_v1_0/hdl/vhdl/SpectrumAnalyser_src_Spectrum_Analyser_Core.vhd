-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\spectrum_analyser\SpectrumAnalyser_src_Spectrum_Analyser_Core.vhd
-- Created: 2021-01-25 07:03:55
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SpectrumAnalyser_src_Spectrum_Analyser_Core
-- Source Path: spectrum_analyser/Spectrum Analyser/Spectrum Analyser/Spectrum Analyser Core
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.SpectrumAnalyser_src_Spectrum_Analyser_pkg.ALL;

ENTITY SpectrumAnalyser_src_Spectrum_Analyser_Core IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_16_0                        :   IN    std_logic;
        Packet_Size                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        SSR_Mode                          :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Units_rsvd                        :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Type_rsvd                         :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Vrms                              :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Type_Scale                        :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Power_Scale                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Selector                          :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        WLength                           :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        WAddress                          :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        WEnable                           :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Valid_Real                        :   IN    std_logic;
        Valid_Imag                        :   IN    std_logic;
        Data_Real                         :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        Data_Imag                         :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        axim_rd_s2m_rd_aready             :   IN    std_logic;
        axim_rd_s2m_rd_dvalid             :   IN    std_logic;
        axim_rd_data                      :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        WReady                            :   OUT   std_logic;
        Valid_Out                         :   OUT   std_logic;
        Data_Out                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        End_Out                           :   OUT   std_logic;
        Start_Out                         :   OUT   std_logic;
        axim_rd_m2s_rd_addr               :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        axim_rd_m2s_rd_len                :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        axim_rd_m2s_rd_avalid             :   OUT   std_logic
        );
END SpectrumAnalyser_src_Spectrum_Analyser_Core;


ARCHITECTURE rtl OF SpectrumAnalyser_src_Spectrum_Analyser_Core IS

  -- Component Declarations
  COMPONENT SpectrumAnalyser_src_SSR_Subset_Converter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          Packet_Size                     :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          SSR_Mode                        :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Valid_Real_In                   :   IN    std_logic;
          Data_Real_In                    :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          Valid_Imag_In                   :   IN    std_logic;
          Data_Imag_In                    :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          Valid_Real_Out                  :   OUT   std_logic;
          Data_Real_Out                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          Last_Real_Out                   :   OUT   std_logic;
          User_Real_Out                   :   OUT   std_logic;
          Valid_Imag_Out                  :   OUT   std_logic;
          Data_Imag_Out                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          Last_Imag_Out                   :   OUT   std_logic;
          User_Imag_Out                   :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT SpectrumAnalyser_src_Preprocessing_Window
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          Length                          :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Address                         :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Enable                          :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Valid_Real_In                   :   IN    std_logic;
          Data_Real_In                    :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          Last_Real_In                    :   IN    std_logic;
          User_Real_In                    :   IN    std_logic;
          Valid_Imag_In                   :   IN    std_logic;
          Data_Imag_In                    :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          Last_Imag_In                    :   IN    std_logic;
          User_Imag_In                    :   IN    std_logic;
          rd_s2m_rd_aready                :   IN    std_logic;
          rd_s2m_rd_dvalid                :   IN    std_logic;
          rd_data                         :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          dma_ready                       :   OUT   std_logic;
          Valid_Real_Out                  :   OUT   std_logic;
          Data_Real_Out                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          Last_Real_Out                   :   OUT   std_logic;
          User_Real_Out                   :   OUT   std_logic;
          Valid_Imag_Out                  :   OUT   std_logic;
          Data_Imag_Out                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          Last_Imag_Out                   :   OUT   std_logic;
          User_Imag_Out                   :   OUT   std_logic;
          rd_m2s_rd_addr                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          rd_m2s_rd_len                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          rd_m2s_rd_avalid                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT SpectrumAnalyser_src_FFT_and_Spectrum_Processing
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          Units_rsvd                      :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Type_rsvd                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Vrms                            :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Type_Scale                      :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Power_Scale                     :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Selector                        :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Valid_Real                      :   IN    std_logic;
          Data_Real                       :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          Last_Real                       :   IN    std_logic;
          User_Real                       :   IN    std_logic;
          Valid_Imag                      :   IN    std_logic;
          Data_Imag                       :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          Last_Imag                       :   IN    std_logic;
          User_Imag                       :   IN    std_logic;
          Valid_Out                       :   OUT   std_logic;
          Data_Out                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          End_Out                         :   OUT   std_logic;
          Start_Out                       :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : SpectrumAnalyser_src_SSR_Subset_Converter
    USE ENTITY work.SpectrumAnalyser_src_SSR_Subset_Converter(rtl);

  FOR ALL : SpectrumAnalyser_src_Preprocessing_Window
    USE ENTITY work.SpectrumAnalyser_src_Preprocessing_Window(rtl);

  FOR ALL : SpectrumAnalyser_src_FFT_and_Spectrum_Processing
    USE ENTITY work.SpectrumAnalyser_src_FFT_and_Spectrum_Processing(rtl);

  -- Signals
  SIGNAL SSR_Subset_Converter_out1        : std_logic;
  SIGNAL SSR_Subset_Converter_out2        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL SSR_Subset_Converter_out3        : std_logic;
  SIGNAL SSR_Subset_Converter_out4        : std_logic;
  SIGNAL SSR_Subset_Converter_out5        : std_logic;
  SIGNAL SSR_Subset_Converter_out6        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL SSR_Subset_Converter_out7        : std_logic;
  SIGNAL SSR_Subset_Converter_out8        : std_logic;
  SIGNAL Preprocessing_Window_out1        : std_logic;
  SIGNAL Preprocessing_Window_out2        : std_logic;
  SIGNAL Preprocessing_Window_out3        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Preprocessing_Window_out4        : std_logic;
  SIGNAL Preprocessing_Window_out5        : std_logic;
  SIGNAL Preprocessing_Window_out6        : std_logic;
  SIGNAL Preprocessing_Window_out7        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Preprocessing_Window_out8        : std_logic;
  SIGNAL Preprocessing_Window_out9        : std_logic;
  SIGNAL Preprocessing_Window_out10_rd_addr : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Preprocessing_Window_out10_rd_len : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Preprocessing_Window_out10_rd_avalid : std_logic;
  SIGNAL Units_unsigned                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Type_unsigned                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Vrms_unsigned                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Type_Scale_unsigned              : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Power_Scale_unsigned             : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Selector_unsigned                : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL delayMatch_reg                   : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL delayMatch_reg_next              : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL Units_rsvd_1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL delayMatch1_reg                  : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL delayMatch1_reg_next             : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL Type_rsvd_1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL delayMatch2_reg                  : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL delayMatch2_reg_next             : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL Vrms_1                           : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL delayMatch3_reg                  : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL delayMatch3_reg_next             : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL Type_Scale_1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL delayMatch4_reg                  : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL delayMatch4_reg_next             : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL Power_Scale_1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL delayMatch5_reg                  : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL delayMatch5_reg_next             : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL Selector_1                       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL delayMatch6_reg                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL delayMatch6_reg_next             : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Preprocessing_Window_out2_1      : std_logic;
  SIGNAL delayMatch7_reg                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL delayMatch7_reg_next             : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Preprocessing_Window_out4_1      : std_logic;
  SIGNAL delayMatch8_reg                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL delayMatch8_reg_next             : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Preprocessing_Window_out5_1      : std_logic;
  SIGNAL delayMatch9_reg                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL delayMatch9_reg_next             : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Preprocessing_Window_out6_1      : std_logic;
  SIGNAL delayMatch10_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL delayMatch10_reg_next            : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Preprocessing_Window_out8_1      : std_logic;
  SIGNAL delayMatch11_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL delayMatch11_reg_next            : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Preprocessing_Window_out9_1      : std_logic;
  SIGNAL FFT_and_Spectrum_Processing_out1 : std_logic;
  SIGNAL FFT_and_Spectrum_Processing_out2 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL FFT_and_Spectrum_Processing_out3 : std_logic;
  SIGNAL FFT_and_Spectrum_Processing_out4 : std_logic;

BEGIN
  u_SSR_Subset_Converter : SpectrumAnalyser_src_SSR_Subset_Converter
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              Packet_Size => Packet_Size,  -- uint32
              SSR_Mode => SSR_Mode,  -- uint32
              Valid_Real_In => Valid_Real,
              Data_Real_In => Data_Real,  -- ufix128
              Valid_Imag_In => Valid_Imag,
              Data_Imag_In => Data_Imag,  -- ufix128
              Valid_Real_Out => SSR_Subset_Converter_out1,
              Data_Real_Out => SSR_Subset_Converter_out2,  -- uint16
              Last_Real_Out => SSR_Subset_Converter_out3,
              User_Real_Out => SSR_Subset_Converter_out4,
              Valid_Imag_Out => SSR_Subset_Converter_out5,
              Data_Imag_Out => SSR_Subset_Converter_out6,  -- uint16
              Last_Imag_Out => SSR_Subset_Converter_out7,
              User_Imag_Out => SSR_Subset_Converter_out8
              );

  u_Preprocessing_Window : SpectrumAnalyser_src_Preprocessing_Window
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              Length => WLength,  -- uint32
              Address => WAddress,  -- uint32
              Enable => WEnable,  -- uint32
              Valid_Real_In => SSR_Subset_Converter_out1,
              Data_Real_In => SSR_Subset_Converter_out2,  -- uint16
              Last_Real_In => SSR_Subset_Converter_out3,
              User_Real_In => SSR_Subset_Converter_out4,
              Valid_Imag_In => SSR_Subset_Converter_out5,
              Data_Imag_In => SSR_Subset_Converter_out6,  -- uint16
              Last_Imag_In => SSR_Subset_Converter_out7,
              User_Imag_In => SSR_Subset_Converter_out8,
              rd_s2m_rd_aready => axim_rd_s2m_rd_aready,
              rd_s2m_rd_dvalid => axim_rd_s2m_rd_dvalid,
              rd_data => axim_rd_data,  -- uint16
              dma_ready => Preprocessing_Window_out1,
              Valid_Real_Out => Preprocessing_Window_out2,
              Data_Real_Out => Preprocessing_Window_out3,  -- uint16
              Last_Real_Out => Preprocessing_Window_out4,
              User_Real_Out => Preprocessing_Window_out5,
              Valid_Imag_Out => Preprocessing_Window_out6,
              Data_Imag_Out => Preprocessing_Window_out7,  -- uint16
              Last_Imag_Out => Preprocessing_Window_out8,
              User_Imag_Out => Preprocessing_Window_out9,
              rd_m2s_rd_addr => Preprocessing_Window_out10_rd_addr,  -- uint32
              rd_m2s_rd_len => Preprocessing_Window_out10_rd_len,  -- uint16
              rd_m2s_rd_avalid => Preprocessing_Window_out10_rd_avalid
              );

  u_FFT_and_Spectrum_Processing : SpectrumAnalyser_src_FFT_and_Spectrum_Processing
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              Units_rsvd => std_logic_vector(Units_rsvd_1),  -- uint32
              Type_rsvd => std_logic_vector(Type_rsvd_1),  -- uint32
              Vrms => std_logic_vector(Vrms_1),  -- uint32
              Type_Scale => std_logic_vector(Type_Scale_1),  -- uint32
              Power_Scale => std_logic_vector(Power_Scale_1),  -- uint32
              Selector => std_logic_vector(Selector_1),  -- uint32
              Valid_Real => Preprocessing_Window_out2_1,
              Data_Real => Preprocessing_Window_out3,  -- uint16
              Last_Real => Preprocessing_Window_out4_1,
              User_Real => Preprocessing_Window_out5_1,
              Valid_Imag => Preprocessing_Window_out6_1,
              Data_Imag => Preprocessing_Window_out7,  -- uint16
              Last_Imag => Preprocessing_Window_out8_1,
              User_Imag => Preprocessing_Window_out9_1,
              Valid_Out => FFT_and_Spectrum_Processing_out1,
              Data_Out => FFT_and_Spectrum_Processing_out2,  -- uint32
              End_Out => FFT_and_Spectrum_Processing_out3,
              Start_Out => FFT_and_Spectrum_Processing_out4
              );

  WReady <= Preprocessing_Window_out1;

  Units_unsigned <= unsigned(Units_rsvd);

  Type_unsigned <= unsigned(Type_rsvd);

  Vrms_unsigned <= unsigned(Vrms);

  Type_Scale_unsigned <= unsigned(Type_Scale);

  Power_Scale_unsigned <= unsigned(Power_Scale);

  Selector_unsigned <= unsigned(Selector);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg(0) <= to_unsigned(0, 32);
      delayMatch_reg(1) <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch_reg(0) <= delayMatch_reg_next(0);
        delayMatch_reg(1) <= delayMatch_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Units_rsvd_1 <= delayMatch_reg(1);
  delayMatch_reg_next(0) <= Units_unsigned;
  delayMatch_reg_next(1) <= delayMatch_reg(0);

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg(0) <= to_unsigned(0, 32);
      delayMatch1_reg(1) <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch1_reg(0) <= delayMatch1_reg_next(0);
        delayMatch1_reg(1) <= delayMatch1_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Type_rsvd_1 <= delayMatch1_reg(1);
  delayMatch1_reg_next(0) <= Type_unsigned;
  delayMatch1_reg_next(1) <= delayMatch1_reg(0);

  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch2_reg(0) <= to_unsigned(0, 32);
      delayMatch2_reg(1) <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch2_reg(0) <= delayMatch2_reg_next(0);
        delayMatch2_reg(1) <= delayMatch2_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  Vrms_1 <= delayMatch2_reg(1);
  delayMatch2_reg_next(0) <= Vrms_unsigned;
  delayMatch2_reg_next(1) <= delayMatch2_reg(0);

  delayMatch3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch3_reg(0) <= to_unsigned(0, 32);
      delayMatch3_reg(1) <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch3_reg(0) <= delayMatch3_reg_next(0);
        delayMatch3_reg(1) <= delayMatch3_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  Type_Scale_1 <= delayMatch3_reg(1);
  delayMatch3_reg_next(0) <= Type_Scale_unsigned;
  delayMatch3_reg_next(1) <= delayMatch3_reg(0);

  delayMatch4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch4_reg(0) <= to_unsigned(0, 32);
      delayMatch4_reg(1) <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch4_reg(0) <= delayMatch4_reg_next(0);
        delayMatch4_reg(1) <= delayMatch4_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  Power_Scale_1 <= delayMatch4_reg(1);
  delayMatch4_reg_next(0) <= Power_Scale_unsigned;
  delayMatch4_reg_next(1) <= delayMatch4_reg(0);

  delayMatch5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch5_reg(0) <= to_unsigned(0, 32);
      delayMatch5_reg(1) <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch5_reg(0) <= delayMatch5_reg_next(0);
        delayMatch5_reg(1) <= delayMatch5_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch5_process;

  Selector_1 <= delayMatch5_reg(1);
  delayMatch5_reg_next(0) <= Selector_unsigned;
  delayMatch5_reg_next(1) <= delayMatch5_reg(0);

  delayMatch6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch6_reg(0) <= '0';
      delayMatch6_reg(1) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch6_reg(0) <= delayMatch6_reg_next(0);
        delayMatch6_reg(1) <= delayMatch6_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  Preprocessing_Window_out2_1 <= delayMatch6_reg(1);
  delayMatch6_reg_next(0) <= Preprocessing_Window_out2;
  delayMatch6_reg_next(1) <= delayMatch6_reg(0);

  delayMatch7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch7_reg(0) <= '0';
      delayMatch7_reg(1) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch7_reg(0) <= delayMatch7_reg_next(0);
        delayMatch7_reg(1) <= delayMatch7_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch7_process;

  Preprocessing_Window_out4_1 <= delayMatch7_reg(1);
  delayMatch7_reg_next(0) <= Preprocessing_Window_out4;
  delayMatch7_reg_next(1) <= delayMatch7_reg(0);

  delayMatch8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch8_reg(0) <= '0';
      delayMatch8_reg(1) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch8_reg(0) <= delayMatch8_reg_next(0);
        delayMatch8_reg(1) <= delayMatch8_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch8_process;

  Preprocessing_Window_out5_1 <= delayMatch8_reg(1);
  delayMatch8_reg_next(0) <= Preprocessing_Window_out5;
  delayMatch8_reg_next(1) <= delayMatch8_reg(0);

  delayMatch9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch9_reg(0) <= '0';
      delayMatch9_reg(1) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch9_reg(0) <= delayMatch9_reg_next(0);
        delayMatch9_reg(1) <= delayMatch9_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch9_process;

  Preprocessing_Window_out6_1 <= delayMatch9_reg(1);
  delayMatch9_reg_next(0) <= Preprocessing_Window_out6;
  delayMatch9_reg_next(1) <= delayMatch9_reg(0);

  delayMatch10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch10_reg(0) <= '0';
      delayMatch10_reg(1) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch10_reg(0) <= delayMatch10_reg_next(0);
        delayMatch10_reg(1) <= delayMatch10_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch10_process;

  Preprocessing_Window_out8_1 <= delayMatch10_reg(1);
  delayMatch10_reg_next(0) <= Preprocessing_Window_out8;
  delayMatch10_reg_next(1) <= delayMatch10_reg(0);

  delayMatch11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch11_reg(0) <= '0';
      delayMatch11_reg(1) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        delayMatch11_reg(0) <= delayMatch11_reg_next(0);
        delayMatch11_reg(1) <= delayMatch11_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch11_process;

  Preprocessing_Window_out9_1 <= delayMatch11_reg(1);
  delayMatch11_reg_next(0) <= Preprocessing_Window_out9;
  delayMatch11_reg_next(1) <= delayMatch11_reg(0);

  Valid_Out <= FFT_and_Spectrum_Processing_out1;

  End_Out <= FFT_and_Spectrum_Processing_out3;

  Start_Out <= FFT_and_Spectrum_Processing_out4;

  axim_rd_m2s_rd_avalid <= Preprocessing_Window_out10_rd_avalid;

  Data_Out <= FFT_and_Spectrum_Processing_out2;

  axim_rd_m2s_rd_addr <= Preprocessing_Window_out10_rd_addr;

  axim_rd_m2s_rd_len <= Preprocessing_Window_out10_rd_len;

END rtl;

