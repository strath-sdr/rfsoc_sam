-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\spectrum_analyser\SpectrumAnalyser_src_nfp_log10_single.vhd
-- Created: 2021-01-04 00:54:55
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SpectrumAnalyser_src_nfp_log10_single
-- Source Path: spectrum_analyser/Spectrum Analyser/Spectrum Analyser/Spectrum Analyser Core/FFT and Spectrum Processing/Spectrum 
-- Options/nfp_log10_singl
-- Hierarchy Level: 5
-- 
-- {Latency Strategy = "Max", Denormal Handling = "off"}
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.SpectrumAnalyser_src_Spectrum_Analyser_pkg.ALL;

ENTITY SpectrumAnalyser_src_nfp_log10_single IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_16_0                        :   IN    std_logic;
        nfp_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        nfp_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END SpectrumAnalyser_src_nfp_log10_single;


ARCHITECTURE rtl OF SpectrumAnalyser_src_nfp_log10_single IS

  -- Signals
  SIGNAL Constant8_out1                   : std_logic;  -- ufix1
  SIGNAL Constant7_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL Delay4_out1                      : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1            : std_logic;  -- ufix1
  SIGNAL Add_out1                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay3_out1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Add_add_cast                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant1_out1                   : std_logic;  -- ufix1
  SIGNAL nfp_in_unsigned                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL aSign                            : std_logic;  -- ufix1
  SIGNAL aExponent                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL aMantissa                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay2_out1                      : std_logic;  -- ufix1
  SIGNAL aSign_1_out1                     : std_logic;  -- ufix1
  SIGNAL Delay1_out1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL aExponent_cfType_Exponent_I_out1 : std_logic;  -- ufix1
  SIGNAL alphaaExponent_cfType_Exponent_out1 : std_logic;  -- ufix1
  SIGNAL aExponent_0_out1                 : std_logic;  -- ufix1
  SIGNAL Compare_To_Zero_out1             : std_logic;  -- ufix1
  SIGNAL Delay_out1                       : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Constant_out1                    : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch_out1                      : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL aMantissa_0_out1                 : std_logic;  -- ufix1
  SIGNAL alphaaExponent_0_aMantissa_out1  : std_logic;  -- ufix1
  SIGNAL alphaaExponent_cfType_Exponent_out1_1 : std_logic;  -- ufix1
  SIGNAL Delay9_reg                       : std_logic_vector(0 TO 24);  -- ufix1 [25]
  SIGNAL Delay9_reg_next                  : std_logic_vector(0 TO 24);  -- ufix1 [25]
  SIGNAL Delay9_out1                      : std_logic;  -- ufix1
  SIGNAL alpha1_out1                      : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1                 : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL alpha0_out1                      : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL if_Exponent_0_cfType_Exp_out1    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL BitSlice_out1                    : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay1_out1_1                    : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay25_out1                     : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL bitsliceget_mant_norm_mant_no_out1 : std_logic;  -- ufix1
  SIGNAL C_out1                           : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL Constant_out1_1                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Constant1_out1_1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Concat_out1_1                : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL DTC_out1                         : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_tmp_out1                      : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_1_out1                         : std_logic;  -- ufix1
  SIGNAL C_out1_1                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_Exponent_0_out1               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay2_out1_1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL DTC_out1_1                       : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL Delay24_out1                     : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL ExponentBias_out1                : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL exp_unbiased_cast_cfType_Exp_add_temp : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_unbiased_cast_cfType_Exp_out1 : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL C_out1_2                         : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL Add_out1_1                       : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL if_w_1_out1                      : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL Delay15_reg                      : vector_of_signed11(0 TO 14);  -- sfix11 [15]
  SIGNAL Delay15_reg_next                 : vector_of_signed11(0 TO 14);  -- sfix11 [15]
  SIGNAL Delay15_out1                     : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL Compare_To_Constant_out1         : std_logic;  -- ufix1
  SIGNAL Compare_To_Constant1_out1        : std_logic;  -- ufix1
  SIGNAL Constant3_out1                   : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL Product_mul_temp                 : signed(37 DOWNTO 0);  -- sfix38_En25
  SIGNAL Product_out1                     : signed(34 DOWNTO 0);  -- sfix35_En24
  SIGNAL Delay5_reg                       : vector_of_signed35(0 TO 2);  -- sfix35 [3]
  SIGNAL Delay5_reg_next                  : vector_of_signed35(0 TO 2);  -- sfix35_En24 [3]
  SIGNAL Delay5_out1                      : signed(34 DOWNTO 0);  -- sfix35_En24
  SIGNAL Delay4_reg                       : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay4_reg_next                  : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay4_out1_1                    : std_logic;  -- ufix1
  SIGNAL Constant_out1_2                  : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Bit_Concat_out1_2                : unsigned(57 DOWNTO 0);  -- ufix58
  SIGNAL Data_Type_Conversion_out1        : signed(57 DOWNTO 0);  -- sfix58_En47
  SIGNAL Delay3_reg                       : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay3_reg_next                  : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay3_out1_1                    : std_logic;  -- ufix1
  SIGNAL Constant1_out1_2                 : signed(57 DOWNTO 0);  -- sfix58_En47
  SIGNAL Switch1_out1                     : signed(57 DOWNTO 0);  -- sfix58_En47
  SIGNAL Constant2_out1                   : signed(57 DOWNTO 0);  -- sfix58_En47
  SIGNAL Switch_out1_1                    : signed(57 DOWNTO 0);  -- sfix58_En47
  SIGNAL bitsll_w_1_out1                  : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL alpha2_out1                      : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_2_out1                         : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_w_1_1_out1                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL Delay8_out1                      : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL BitSlice_out1_1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL reinterpretcast_bitsliceget_w_out1 : signed(6 DOWNTO 0);  -- sfix7_En2
  SIGNAL w_hat_0_75_out1                  : std_logic;  -- ufix1
  SIGNAL w_hat_0_5_out1                   : std_logic;  -- ufix1
  SIGNAL bitsll_w_1_out1_1                : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL alpha2_out1_1                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL bitsra_w_1_out1                  : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL alpha2_tmp1_out1                 : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_tmp2_out1                      : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_w_hat_0_5_1_out1              : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_tmp2_out1_1                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_w_hat_0_75_1_out1             : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL Delay4_out1_2                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL BitSlice_out1_2                  : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL reinterpretcast_bitsliceget_w_out1_1 : signed(8 DOWNTO 0);  -- sfix9_En4
  SIGNAL w_hat_0_75_out1_1                : std_logic;  -- ufix1
  SIGNAL w_hat_0_5_out1_1                 : std_logic;  -- ufix1
  SIGNAL bitsll_w_1_out1_2                : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL alpha2_out1_2                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL bitsra_w_1_out1_1                : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL alpha2_tmp1_out1_1               : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_tmp2_out1_2                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_w_hat_0_5_1_out1_1            : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_tmp2_out1_3                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_w_hat_0_75_1_out1_1           : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL Delay1_out1_2                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL BitSlice_out1_3                  : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL reinterpretcast_bitsliceget_w_out1_2 : signed(8 DOWNTO 0);  -- sfix9_En4
  SIGNAL w_hat_0_75_out1_2                : std_logic;  -- ufix1
  SIGNAL w_hat_0_5_out1_2                 : std_logic;  -- ufix1
  SIGNAL bitsll_w_1_out1_3                : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL alpha2_out1_3                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL bitsra_w_1_out1_2                : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL alpha2_tmp1_out1_2               : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_tmp2_out1_4                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_w_hat_0_5_1_out1_2            : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_tmp2_out1_5                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_w_hat_0_75_1_out1_2           : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL Delay9_out1_1                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL BitSlice_out1_4                  : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL reinterpretcast_bitsliceget_w_out1_3 : signed(8 DOWNTO 0);  -- sfix9_En4
  SIGNAL w_hat_0_75_out1_3                : std_logic;  -- ufix1
  SIGNAL w_hat_0_5_out1_3                 : std_logic;  -- ufix1
  SIGNAL bitsll_w_1_out1_4                : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL alpha2_out1_4                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL bitsra_w_1_out1_3                : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL alpha2_tmp1_out1_3               : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_tmp2_out1_6                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_w_hat_0_5_1_out1_3            : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_tmp2_out1_7                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_w_hat_0_75_1_out1_3           : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL Delay3_out1_2                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL BitSlice_out1_5                  : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL reinterpretcast_bitsliceget_w_out1_4 : signed(8 DOWNTO 0);  -- sfix9_En4
  SIGNAL w_hat_0_75_out1_4                : std_logic;  -- ufix1
  SIGNAL w_hat_0_5_out1_4                 : std_logic;  -- ufix1
  SIGNAL bitsll_w_1_out1_5                : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL alpha2_out1_5                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL bitsra_w_1_out1_4                : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL alpha2_tmp1_out1_4               : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_tmp2_out1_8                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_w_hat_0_5_1_out1_4            : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_tmp2_out1_9                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_w_hat_0_75_1_out1_4           : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL Delay11_out1                     : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL BitSlice_out1_6                  : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL reinterpretcast_bitsliceget_w_out1_5 : signed(8 DOWNTO 0);  -- sfix9_En4
  SIGNAL w_hat_0_75_out1_5                : std_logic;  -- ufix1
  SIGNAL w_hat_0_5_out1_5                 : std_logic;  -- ufix1
  SIGNAL bitsll_w_1_out1_6                : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL alpha2_out1_6                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL bitsra_w_1_out1_5                : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL alpha2_tmp1_out1_5               : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_tmp2_out1_10                   : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_w_hat_0_5_1_out1_5            : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_tmp2_out1_11                   : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_w_hat_0_75_1_out1_5           : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL Delay5_out1_1                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL BitSlice_out1_7                  : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL reinterpretcast_bitsliceget_w_out1_6 : signed(8 DOWNTO 0);  -- sfix9_En4
  SIGNAL w_hat_0_75_out1_6                : std_logic;  -- ufix1
  SIGNAL w_hat_0_5_out1_6                 : std_logic;  -- ufix1
  SIGNAL bitsll_w_1_out1_7                : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL alpha2_out1_7                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL bitsra_w_1_out1_6                : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL alpha2_tmp1_out1_6               : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_tmp2_out1_12                   : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_w_hat_0_5_1_out1_6            : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_tmp2_out1_13                   : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_w_hat_0_75_1_out1_6           : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL Delay13_out1                     : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL BitSlice_out1_8                  : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL reinterpretcast_bitsliceget_w_out1_7 : signed(8 DOWNTO 0);  -- sfix9_En4
  SIGNAL w_hat_0_75_out1_7                : std_logic;  -- ufix1
  SIGNAL w_hat_0_5_out1_7                 : std_logic;  -- ufix1
  SIGNAL bitsll_w_1_out1_8                : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL alpha2_out1_8                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL bitsra_w_1_out1_7                : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL alpha2_tmp1_out1_7               : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_tmp2_out1_14                   : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_w_hat_0_5_1_out1_7            : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_tmp2_out1_15                   : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_w_hat_0_75_1_out1_7           : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL Delay7_out1                      : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL BitSlice_out1_9                  : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL reinterpretcast_bitsliceget_w_out1_8 : signed(8 DOWNTO 0);  -- sfix9_En4
  SIGNAL w_hat_0_75_out1_8                : std_logic;  -- ufix1
  SIGNAL w_hat_0_5_out1_8                 : std_logic;  -- ufix1
  SIGNAL bitsll_w_1_out1_9                : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL alpha2_out1_9                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL bitsra_w_1_out1_8                : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL alpha2_tmp1_out1_8               : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_tmp2_out1_16                   : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_w_hat_0_5_1_out1_8            : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_tmp2_out1_17                   : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_w_hat_0_75_1_out1_8           : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL Delay15_out1_1                   : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL BitSlice_out1_10                 : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL reinterpretcast_bitsliceget_w_out1_9 : signed(8 DOWNTO 0);  -- sfix9_En4
  SIGNAL w_hat_0_75_out1_9                : std_logic;  -- ufix1
  SIGNAL w_hat_0_5_out1_9                 : std_logic;  -- ufix1
  SIGNAL bitsll_w_1_out1_10               : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL alpha2_out1_10                   : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL bitsra_w_1_out1_9                : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL alpha2_tmp1_out1_9               : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_tmp2_out1_18                   : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_w_hat_0_5_1_out1_9            : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_tmp2_out1_19                   : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_w_hat_0_75_1_out1_9           : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL Delay25_out1_1                   : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_0_out1                         : std_logic;  -- ufix1
  SIGNAL Delay19_reg                      : std_logic_vector(0 TO 6);  -- ufix1 [7]
  SIGNAL Delay19_reg_next                 : std_logic_vector(0 TO 6);  -- ufix1 [7]
  SIGNAL Delay19_out1                     : std_logic;  -- ufix1
  SIGNAL Zero_out1                        : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL Log10Table_2_out1                : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL if_w_hat_0_5_out1                : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL Log10MinusTable_2_out1           : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL if_w_hat_0_75_out1               : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL Delay23_out1                     : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL Constant1_out1_3                 : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_1               : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL reinterpretcast_bitsliceget_w_2_out1 : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL Delay_out1_1                     : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL Zero_out1_1                      : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL Log10Table_int32_3_out1          : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL if_w_hat_0_5_out1_1              : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL Log10MinusTable_int32_3_out1     : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL if_w_hat_0_75_out1_1             : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL Delay16_out1                     : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL L_Log10Table_3_1_out1            : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL Constant_out1_3                  : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_3                : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL reinterpretcast_bitsliceget_w_1_out1 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Delay8_out1_1                    : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Zero_out1_2                      : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Log10Table_int32_4_out1          : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_w_hat_0_5_out1_2              : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Log10MinusTable_int32_4_out1     : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_w_hat_0_75_out1_2             : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Delay17_out1                     : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL L_Log10Table_4_1_out1            : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Constant_out1_4                  : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_4                : unsigned(34 DOWNTO 0);  -- ufix35
  SIGNAL reinterpretcast_bitsliceget_w_1_out1_1 : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL Delay2_out1_2                    : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL Zero_out1_3                      : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL Log10Table_int32_5_out1          : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL if_w_hat_0_5_out1_3              : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL Log10MinusTable_int32_5_out1     : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL if_w_hat_0_75_out1_3             : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL Delay18_out1                     : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL L_Log10Table_5_1_out1            : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL Constant_out1_5                  : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_5                : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL reinterpretcast_bitsliceget_w_1_out1_2 : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Delay10_out1                     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Zero_out1_4                      : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Log10Table_int32_6_out1          : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL if_w_hat_0_5_out1_4              : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Log10MinusTable_int32_6_out1     : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL if_w_hat_0_75_out1_4             : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Delay19_out1_1                   : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL L_Log10Table_6_1_out1            : signed(35 DOWNTO 0);  -- sfix36_En33
  SIGNAL Constant_out1_6                  : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_6                : unsigned(36 DOWNTO 0);  -- ufix37
  SIGNAL reinterpretcast_bitsliceget_w_1_out1_3 : signed(36 DOWNTO 0);  -- sfix37_En34
  SIGNAL Delay4_out1_3                    : signed(36 DOWNTO 0);  -- sfix37_En34
  SIGNAL Zero_out1_5                      : signed(36 DOWNTO 0);  -- sfix37_En34
  SIGNAL Log10Table_int32_7_out1          : signed(36 DOWNTO 0);  -- sfix37_En34
  SIGNAL if_w_hat_0_5_out1_5              : signed(36 DOWNTO 0);  -- sfix37_En34
  SIGNAL Log10MinusTable_int32_7_out1     : signed(36 DOWNTO 0);  -- sfix37_En34
  SIGNAL if_w_hat_0_75_out1_5             : signed(36 DOWNTO 0);  -- sfix37_En34
  SIGNAL Delay20_out1                     : signed(36 DOWNTO 0);  -- sfix37_En34
  SIGNAL L_Log10Table_7_1_out1            : signed(36 DOWNTO 0);  -- sfix37_En34
  SIGNAL Constant_out1_7                  : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_7                : unsigned(37 DOWNTO 0);  -- ufix38
  SIGNAL reinterpretcast_bitsliceget_w_1_out1_4 : signed(37 DOWNTO 0);  -- sfix38_En35
  SIGNAL Delay12_out1                     : signed(37 DOWNTO 0);  -- sfix38_En35
  SIGNAL Zero_out1_6                      : signed(37 DOWNTO 0);  -- sfix38_En35
  SIGNAL Log10Table_int32_8_out1          : signed(37 DOWNTO 0);  -- sfix38_En35
  SIGNAL if_w_hat_0_5_out1_6              : signed(37 DOWNTO 0);  -- sfix38_En35
  SIGNAL Log10MinusTable_int32_8_out1     : signed(37 DOWNTO 0);  -- sfix38_En35
  SIGNAL if_w_hat_0_75_out1_6             : signed(37 DOWNTO 0);  -- sfix38_En35
  SIGNAL Delay21_out1                     : signed(37 DOWNTO 0);  -- sfix38_En35
  SIGNAL L_Log10Table_9_1_out1            : signed(37 DOWNTO 0);  -- sfix38_En35
  SIGNAL Constant_out1_8                  : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_8                : unsigned(38 DOWNTO 0);  -- ufix39
  SIGNAL reinterpretcast_bitsliceget_w_1_out1_5 : signed(38 DOWNTO 0);  -- sfix39_En36
  SIGNAL Delay6_out1                      : signed(38 DOWNTO 0);  -- sfix39_En36
  SIGNAL Zero_out1_7                      : signed(38 DOWNTO 0);  -- sfix39_En36
  SIGNAL Log10Table_int32_9_out1          : signed(38 DOWNTO 0);  -- sfix39_En36
  SIGNAL if_w_hat_0_5_out1_7              : signed(38 DOWNTO 0);  -- sfix39_En36
  SIGNAL Log10MinusTable_int32_9_out1     : signed(38 DOWNTO 0);  -- sfix39_En36
  SIGNAL if_w_hat_0_75_out1_7             : signed(38 DOWNTO 0);  -- sfix39_En36
  SIGNAL Delay22_out1                     : signed(38 DOWNTO 0);  -- sfix39_En36
  SIGNAL L_Log10Table_10_1_out1           : signed(38 DOWNTO 0);  -- sfix39_En36
  SIGNAL Constant_out1_9                  : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_9                : unsigned(39 DOWNTO 0);  -- ufix40
  SIGNAL reinterpretcast_bitsliceget_w_1_out1_6 : signed(39 DOWNTO 0);  -- sfix40_En37
  SIGNAL Delay14_out1                     : signed(39 DOWNTO 0);  -- sfix40_En37
  SIGNAL Zero_out1_8                      : signed(39 DOWNTO 0);  -- sfix40_En37
  SIGNAL Log10Table_int32_10_out1         : signed(39 DOWNTO 0);  -- sfix40_En37
  SIGNAL if_w_hat_0_5_out1_8              : signed(39 DOWNTO 0);  -- sfix40_En37
  SIGNAL Log10MinusTable_int32_10_out1    : signed(39 DOWNTO 0);  -- sfix40_En37
  SIGNAL if_w_hat_0_75_out1_8             : signed(39 DOWNTO 0);  -- sfix40_En37
  SIGNAL Delay23_out1_1                   : signed(39 DOWNTO 0);  -- sfix40_En37
  SIGNAL L_Log10Table_10_1_out1_1         : signed(39 DOWNTO 0);  -- sfix40_En37
  SIGNAL Constant_out1_10                 : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_10               : unsigned(40 DOWNTO 0);  -- ufix41
  SIGNAL reinterpretcast_bitsliceget_w_1_out1_7 : signed(40 DOWNTO 0);  -- sfix41_En38
  SIGNAL Delay24_out1_1                   : signed(40 DOWNTO 0);  -- sfix41_En38
  SIGNAL Delay12_out1_1                   : signed(40 DOWNTO 0);  -- sfix41_En38
  SIGNAL Zero_out1_9                      : signed(40 DOWNTO 0);  -- sfix41_En38
  SIGNAL Log10Table_int32_10_out1_1       : signed(40 DOWNTO 0);  -- sfix41_En38
  SIGNAL if_w_hat_0_5_out1_9              : signed(40 DOWNTO 0);  -- sfix41_En38
  SIGNAL Log10MinusTable_int32_10_out1_1  : signed(40 DOWNTO 0);  -- sfix41_En38
  SIGNAL if_w_hat_0_75_out1_9             : signed(40 DOWNTO 0);  -- sfix41_En38
  SIGNAL Delay26_out1                     : signed(40 DOWNTO 0);  -- sfix41_En38
  SIGNAL Delay18_out1_1                   : signed(40 DOWNTO 0);  -- sfix41_En38
  SIGNAL L_Log10Table_10_out1             : signed(40 DOWNTO 0);  -- sfix41_En38
  SIGNAL alpha0_out1_1                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Bit_Concat_out1_11               : unsigned(49 DOWNTO 0);  -- ufix50
  SIGNAL reinterpretcast_bitconcat_L_f_out1 : signed(49 DOWNTO 0);  -- sfix50_En47
  SIGNAL Delay25_reg                      : vector_of_signed50(0 TO 5);  -- sfix50 [6]
  SIGNAL Delay25_reg_next                 : vector_of_signed50(0 TO 5);  -- sfix50_En47 [6]
  SIGNAL Delay25_out1_2                   : signed(49 DOWNTO 0);  -- sfix50_En47
  SIGNAL BitSlice_out1_11                 : std_logic;  -- ufix1
  SIGNAL alphaw_cast                      : signed(30 DOWNTO 0);  -- sfix31_En25
  SIGNAL alphaw_cast_1                    : signed(30 DOWNTO 0);  -- sfix31_En25
  SIGNAL alphaw_out1                      : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_sign_1_out1                   : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL Delay22_out1_1                   : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL w_abs_2_out1                     : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1                   : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL Bit_Slice5_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_1          : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice7_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_1                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1_1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_1                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_2          : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_1         : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_1                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice7_out1_1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_2                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1_2                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_2                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_3          : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_2         : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_2                : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_2                : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_2                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1_1                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_2         : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1_2                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Bit_Slice7_out1_2                : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_3                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_2         : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1_3                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_3                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_4          : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_3                : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_3                : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_3                 : std_logic;  -- ufix1
  SIGNAL Start_out1                       : signed(7 DOWNTO 0);  -- int8
  SIGNAL Logical_Operator4_out1_2         : std_logic;  -- ufix1
  SIGNAL Start_1_out1                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch_out1_2                    : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_2_out1                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_3_out1                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Logical_Operator1_out1_3         : std_logic;  -- ufix1
  SIGNAL Switch2_out1                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch1_out1_1                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_4_out1                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_5_out1                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch5_out1                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_6_out1                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_7_out1                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch7_out1                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Logical_Operator6_out1_1         : std_logic;  -- ufix1
  SIGNAL Switch6_out1                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch4_out1                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_out1_1                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_1_out1_1                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch_out1_3                    : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_2_out1_1                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_3_out1_1                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch2_out1_1                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch1_out1_2                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_4_out1_1                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_5_out1_1                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch5_out1_1                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_6_out1_1                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_7_out1_1                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch7_out1_1                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch6_out1_1                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Logical_Operator2_out1_3         : std_logic;  -- ufix1
  SIGNAL Switch4_out1_1                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch33_out1                    : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_out1_2                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_1_out1_2                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch_out1_4                    : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_2_out1_2                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_3_out1_2                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch2_out1_2                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch1_out1_3                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_4_out1_2                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_5_out1_2                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch5_out1_2                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_6_out1_2                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_7_out1_2                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch7_out1_2                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch6_out1_2                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch4_out1_2                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL alpha24_out1                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL alpha25_out1                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch7_out1_3                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL alpha26_out1                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch1_out1_4                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch2_out1_3                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch34_out1                    : signed(7 DOWNTO 0);  -- int8
  SIGNAL bitsll_w_abs_j_zerosig           : signed(7 DOWNTO 0);  -- int8
  SIGNAL bitsll_w_abs_j_selsig            : signed(7 DOWNTO 0);  -- int8
  SIGNAL dynamic_shift_zerosig            : signed(7 DOWNTO 0);  -- int8
  SIGNAL dynamic_shift_selsig             : signed(7 DOWNTO 0);  -- int8
  SIGNAL bitsll_w_abs_j_out1              : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL bitsra_w_abs_1_out1              : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL if_w_abs_2_1_out1                : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL BitSlice1_out1                   : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL reinterpretcast_bitsliceget_tm_out1 : unsigned(25 DOWNTO 0);  -- ufix26_En25
  SIGNAL Delay3_out1_3                    : unsigned(25 DOWNTO 0);  -- ufix26_En25
  SIGNAL alpha1_out1_1                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL bitsra_w_cfType_Log2NumberOfI_out1 : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL alpha1_tmp1_out1                 : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL Delay24_out1_2                   : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL BitSlice2_out1                   : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL reinterpretcast_bitsliceget_tm_out1_1 : unsigned(25 DOWNTO 0);  -- ufix26_En25
  SIGNAL Delay4_out1_4                    : unsigned(25 DOWNTO 0);  -- ufix26_En25
  SIGNAL tmp_m1_tmp_m2_mul_temp           : unsigned(51 DOWNTO 0);  -- ufix52_En50
  SIGNAL tmp_m1_tmp_m2_out1               : unsigned(26 DOWNTO 0);  -- ufix27_En25
  SIGNAL Delay14_reg                      : vector_of_unsigned27(0 TO 1);  -- ufix27 [2]
  SIGNAL Delay14_reg_next                 : vector_of_unsigned27(0 TO 1);  -- ufix27_En25 [2]
  SIGNAL Delay14_out1_1                   : unsigned(26 DOWNTO 0);  -- ufix27_En25
  SIGNAL Delay1_reg                       : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay1_reg_next                  : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay1_out1_3                    : std_logic;  -- ufix1
  SIGNAL Log4rt10E_out1                   : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL alphaLog4rt10E_out1              : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL if_sign_1_out1_1                 : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL Delay6_out1_1                    : signed(26 DOWNTO 0);  -- sfix27_En25
  SIGNAL tmp3_Log4rt10E_cast              : signed(27 DOWNTO 0);  -- sfix28_En25
  SIGNAL tmp3_Log4rt10E_mul_temp          : signed(54 DOWNTO 0);  -- sfix55_En50
  SIGNAL tmp3_Log4rt10E_cast_1            : signed(53 DOWNTO 0);  -- sfix54_En50
  SIGNAL tmp3_Log4rt10E_out1              : signed(49 DOWNTO 0);  -- sfix50_En47
  SIGNAL cfType_Log2NumberOfIterations_out1 : signed(7 DOWNTO 0);  -- int8
  SIGNAL C_out1_3                         : signed(7 DOWNTO 0);  -- int8
  SIGNAL if_w_abs_2_out1                  : signed(7 DOWNTO 0);  -- int8
  SIGNAL cfType_Log2NumberOfIterations_out1_1 : signed(7 DOWNTO 0);  -- int8
  SIGNAL Delay9_reg_1                     : vector_of_signed8(0 TO 4);  -- sfix8 [5]
  SIGNAL Delay9_reg_next_1                : vector_of_signed8(0 TO 4);  -- sfix8 [5]
  SIGNAL Delay9_out1_2                    : signed(7 DOWNTO 0);  -- int8
  SIGNAL bitsra_appx_shift_zerosig        : signed(7 DOWNTO 0);  -- int8
  SIGNAL bitsra_appx_shift_selsig         : signed(7 DOWNTO 0);  -- int8
  SIGNAL Delay8_reg                       : vector_of_signed50(0 TO 1);  -- sfix50 [2]
  SIGNAL Delay8_reg_next                  : vector_of_signed50(0 TO 1);  -- sfix50_En47 [2]
  SIGNAL Delay8_out1_2                    : signed(49 DOWNTO 0);  -- sfix50_En47
  SIGNAL dynamic_shift_zerosig_1          : signed(7 DOWNTO 0);  -- int8
  SIGNAL dynamic_shift_selsig_1           : signed(7 DOWNTO 0);  -- int8
  SIGNAL bitsra_appx_shift_out1           : signed(49 DOWNTO 0);  -- sfix50_En47
  SIGNAL Delay17_out1_1                   : signed(49 DOWNTO 0);  -- sfix50_En47
  SIGNAL L_tmp4_out1                      : signed(49 DOWNTO 0);  -- sfix50_En47
  SIGNAL if_w_0_out1                      : signed(49 DOWNTO 0);  -- sfix50_En47
  SIGNAL Delay11_out1_1                   : signed(49 DOWNTO 0);  -- sfix50_En47
  SIGNAL BitSlice_out1_12                 : std_logic;  -- ufix1
  SIGNAL bitget_L_L_WordLength_0_out1     : std_logic;  -- ufix1
  SIGNAL alpha1_out1_2                    : signed(7 DOWNTO 0);  -- int8
  SIGNAL alpha1_out1_3                    : signed(7 DOWNTO 0);  -- int8
  SIGNAL if_bitget_L_L_WordLength_0_out1  : signed(7 DOWNTO 0);  -- int8
  SIGNAL Delay21_out1_1                   : signed(57 DOWNTO 0);  -- sfix58_En47
  SIGNAL Bit_Concat1_out1_2               : unsigned(57 DOWNTO 0);  -- ufix58
  SIGNAL reinterpretcast_bitconcat_fi_0_out1 : signed(57 DOWNTO 0);  -- sfix58_En47
  SIGNAL exp_tmp_L_out1                   : signed(57 DOWNTO 0);  -- sfix58_En47
  SIGNAL Delay12_out1_2                   : signed(57 DOWNTO 0);  -- sfix58_En47
  SIGNAL BitSlice_out1_13                 : std_logic;  -- ufix1
  SIGNAL Delay3_reg_1                     : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay3_reg_next_1                : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay3_out1_4                    : std_logic;  -- ufix1
  SIGNAL Delay13_out1_1                   : std_logic;  -- ufix1
  SIGNAL C4_out1                          : std_logic;  -- ufix1
  SIGNAL if_aExponent_0_2_out1            : std_logic;  -- ufix1
  SIGNAL Delay6_reg                       : std_logic_vector(0 TO 24);  -- ufix1 [25]
  SIGNAL Delay6_reg_next                  : std_logic_vector(0 TO 24);  -- ufix1 [25]
  SIGNAL Delay6_out1_2                    : std_logic;  -- ufix1
  SIGNAL if_aExponent_cfType_Exponent_2_out1 : std_logic;  -- ufix1
  SIGNAL Switch1_out1_5                   : std_logic;  -- ufix1
  SIGNAL Delay3_out1_5                    : std_logic;  -- ufix1
  SIGNAL Constant3_out1_1                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL alpha0_out1_2                    : std_logic;  -- ufix1
  SIGNAL Unary_Minus_cast                 : signed(58 DOWNTO 0);  -- sfix59_En47
  SIGNAL Unary_Minus_cast_1               : signed(58 DOWNTO 0);  -- sfix59_En47
  SIGNAL Unary_Minus_out1                 : signed(57 DOWNTO 0);  -- sfix58_En47
  SIGNAL Switch_out1_5                    : signed(57 DOWNTO 0);  -- sfix58_En47
  SIGNAL Delay1_out1_4                    : signed(57 DOWNTO 0);  -- sfix58_En47
  SIGNAL BitSlice1_out1_1                 : unsigned(56 DOWNTO 0);  -- ufix57
  SIGNAL Delay4_out1_5                    : unsigned(56 DOWNTO 0);  -- ufix57
  SIGNAL Bit_Slice9_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice8_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_3         : std_logic;  -- ufix1
  SIGNAL Bit_Slice7_out1_3                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice7_out1_4                : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_4                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_4         : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1_4                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_4                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_5          : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_4         : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_4                : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_4                : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_3         : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_4                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1_3                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_4         : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_2         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_2         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_4         : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_5                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice7_out1_5                : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_6                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_5         : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1_5                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_5                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_6          : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_5         : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_5                : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_5                : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_5         : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_5                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1_4                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_5         : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_3         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_3         : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1_6                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice7_out1_6                : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_7                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_6         : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1_7                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_6                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_7          : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_6         : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_6                : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_6                : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_6         : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_6                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1_5                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_6         : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_4         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_4         : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_7         : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_7                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice7_out1_7                : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_8                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_7         : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1_8                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_8                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_8          : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_8         : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_7                : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_7                : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_7         : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_7                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1_6                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_7         : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_5         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_5         : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_8                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice7_out1_8                : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_9                : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_8         : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1_9                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_9                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_9          : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_9         : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_9                : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_8                : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_8         : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_8                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1_7                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_8         : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_6         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_6         : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_9                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice7_out1_9                : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_10               : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_9         : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1_10               : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_10               : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_10         : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_10        : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_10               : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_10               : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_9         : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_9                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1_8                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_9         : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_7         : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1_9                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Bit_Slice7_out1_10               : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_11               : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_10        : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1_11               : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_11               : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_11         : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_11               : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_11               : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_10                : std_logic;  -- ufix1
  SIGNAL Start_out1_3                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Logical_Operator4_out1_10        : std_logic;  -- ufix1
  SIGNAL Start_1_out1_3                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch_out1_6                    : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_2_out1_3                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_3_out1_3                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Logical_Operator1_out1_11        : std_logic;  -- ufix1
  SIGNAL Switch2_out1_4                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch1_out1_6                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_4_out1_3                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_5_out1_3                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch5_out1_3                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_6_out1_3                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_7_out1_3                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch7_out1_4                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Logical_Operator6_out1_7         : std_logic;  -- ufix1
  SIGNAL Switch6_out1_3                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch4_out1_3                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_out1_4                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_1_out1_4                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch_out1_7                    : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_2_out1_4                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_3_out1_4                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch2_out1_5                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch1_out1_7                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_4_out1_4                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_5_out1_4                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch5_out1_4                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_6_out1_4                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_7_out1_4                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch7_out1_5                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch6_out1_4                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Logical_Operator2_out1_10        : std_logic;  -- ufix1
  SIGNAL Switch4_out1_4                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch33_out1_1                  : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_out1_5                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_1_out1_5                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch_out1_8                    : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_2_out1_5                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_3_out1_5                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch2_out1_6                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch1_out1_8                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_4_out1_5                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_5_out1_5                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch5_out1_5                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_6_out1_5                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_7_out1_5                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch7_out1_6                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch6_out1_5                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch4_out1_5                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_out1_6                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_1_out1_6                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch_out1_9                    : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_2_out1_6                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_3_out1_6                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch2_out1_7                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch1_out1_9                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_4_out1_6                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_5_out1_6                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch5_out1_6                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_6_out1_6                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_7_out1_6                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch7_out1_7                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch6_out1_6                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch4_out1_6                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Logical_Operator5_out1_8         : std_logic;  -- ufix1
  SIGNAL Switch2_out1_8                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch34_out1_1                  : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_out1_7                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_1_out1_7                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch_out1_10                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_2_out1_7                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_3_out1_7                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch2_out1_9                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch1_out1_10                  : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_4_out1_7                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_5_out1_7                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch5_out1_7                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_6_out1_7                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_7_out1_7                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch7_out1_8                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch6_out1_7                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch4_out1_7                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_out1_8                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_1_out1_8                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch_out1_11                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_2_out1_8                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_3_out1_8                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch2_out1_10                  : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch1_out1_11                  : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_4_out1_8                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_5_out1_8                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch5_out1_8                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_6_out1_8                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_7_out1_8                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch7_out1_9                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch6_out1_8                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch4_out1_8                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch1_out1_12                  : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_out1_9                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_1_out1_9                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch_out1_12                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_2_out1_9                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_3_out1_9                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch2_out1_11                  : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch1_out1_13                  : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_4_out1_9                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_5_out1_9                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch5_out1_9                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_6_out1_9                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Start_7_out1_9                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch7_out1_10                  : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch6_out1_9                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch4_out1_9                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL alpha56_out1                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL alpha57_out1                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch7_out1_11                  : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch3_out1                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch4_out1_10                  : signed(7 DOWNTO 0);  -- int8
  SIGNAL Switch5_out1_10                  : signed(7 DOWNTO 0);  -- int8
  SIGNAL DTC_out1_2                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay5_out1_2                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL bitsll_Sum_tmp1_out1             : unsigned(56 DOWNTO 0);  -- ufix57
  SIGNAL BitSlice2_out1_1                 : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Delay18_out1_2                   : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Concat_out1_12               : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL BitSlice1_out1_2                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_14                 : std_logic;  -- ufix1
  SIGNAL Delay1_reg_1                     : std_logic_vector(0 TO 22);  -- ufix1 [23]
  SIGNAL Delay1_reg_next_1                : std_logic_vector(0 TO 22);  -- ufix1 [23]
  SIGNAL Delay1_out1_5                    : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_2_0_out1    : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_1_0_out1    : std_logic;  -- ufix1
  SIGNAL cast_2_like_Mant_tmp_out1        : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL Mant_tmp_cast_2_like_Man_out1    : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL if_bitget_Mant_tmp_1_0_out1      : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL BitSlice2_out1_2                 : std_logic;  -- ufix1
  SIGNAL Compare_To_Constant_out1_1       : std_logic;  -- ufix1
  SIGNAL alpha80_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL alpha80_cast_pos_like_exp_out_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL alpha80_1_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch1_out1_14                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay17_out1_2                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL cast_1_like_Exp_out1             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Exp_cast_1_like_Exp_out1         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C_out1_4                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_aSign_1_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C2_out1                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_aExponent_0_out1              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay7_reg                       : vector_of_unsigned8(0 TO 24);  -- ufix8 [25]
  SIGNAL Delay7_reg_next                  : vector_of_unsigned8(0 TO 24);  -- ufix8 [25]
  SIGNAL Delay7_out1_1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_aExponent_cfType_Exponent_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch6_out1_10                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay4_out1_6                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant2_out1_1                 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Compare_To_Zero_out1_1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_12         : std_logic;  -- ufix1
  SIGNAL BitSlice3_out1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C_out1_5                         : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C1_out1                          : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_aSign_1_1_out1                : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C3_out1                          : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_aExponent_0_1_out1            : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay8_reg_1                     : vector_of_unsigned23(0 TO 24);  -- ufix23 [25]
  SIGNAL Delay8_reg_next_1                : vector_of_unsigned23(0 TO 24);  -- ufix23 [25]
  SIGNAL Delay8_out1_3                    : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_aExponent_cfType_Exponent_1_out1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch5_out1_11                  : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay5_out1_3                    : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL nfp_out_pack                     : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  Constant8_out1 <= '1';

  Constant7_out1 <= to_unsigned(16#1A#, 8);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay4_out1 <= Relational_Operator_relop1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Logical_Operator2_out1 <=  NOT Delay4_out1;

  Logical_Operator_out1 <= Constant8_out1 AND Logical_Operator2_out1;

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay3_out1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Add_add_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & Logical_Operator_out1;
  Add_out1 <= Delay3_out1 + Add_add_cast;

  
  Relational_Operator_relop1 <= '1' WHEN Add_out1 > Constant7_out1 ELSE
      '0';

  Constant1_out1 <= '0';

  nfp_in_unsigned <= unsigned(nfp_in);

  -- Split 32 bit word into FP sign, exponent, mantissa
  aSign <= nfp_in_unsigned(31);
  aExponent <= nfp_in_unsigned(30 DOWNTO 23);
  aMantissa <= nfp_in_unsigned(22 DOWNTO 0);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay2_out1 <= aSign;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  aSign_1_out1 <= '1' WHEN Delay2_out1 = '1' ELSE
      '0';

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay1_out1 <= aExponent;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  aExponent_cfType_Exponent_I_out1 <= '1' WHEN Delay1_out1 = to_unsigned(16#FF#, 8) ELSE
      '0';

  alphaaExponent_cfType_Exponent_out1 <= aSign_1_out1 OR aExponent_cfType_Exponent_I_out1;

  
  aExponent_0_out1 <= '1' WHEN Delay1_out1 = to_unsigned(16#00#, 8) ELSE
      '0';

  
  Compare_To_Zero_out1 <= '1' WHEN Delay1_out1 = to_unsigned(16#00#, 8) ELSE
      '0';

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= to_unsigned(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay_out1 <= aMantissa;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Constant_out1 <= to_unsigned(16#000000#, 23);

  
  Switch_out1 <= Delay_out1 WHEN Compare_To_Zero_out1 = '0' ELSE
      Constant_out1;

  
  aMantissa_0_out1 <= '1' WHEN Switch_out1 = to_unsigned(16#000000#, 23) ELSE
      '0';

  alphaaExponent_0_aMantissa_out1 <= aExponent_0_out1 AND aMantissa_0_out1;

  alphaaExponent_cfType_Exponent_out1_1 <= alphaaExponent_cfType_Exponent_out1 OR alphaaExponent_0_aMantissa_out1;

  Delay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_reg(0) <= '0';
      Delay9_reg(1) <= '0';
      Delay9_reg(2) <= '0';
      Delay9_reg(3) <= '0';
      Delay9_reg(4) <= '0';
      Delay9_reg(5) <= '0';
      Delay9_reg(6) <= '0';
      Delay9_reg(7) <= '0';
      Delay9_reg(8) <= '0';
      Delay9_reg(9) <= '0';
      Delay9_reg(10) <= '0';
      Delay9_reg(11) <= '0';
      Delay9_reg(12) <= '0';
      Delay9_reg(13) <= '0';
      Delay9_reg(14) <= '0';
      Delay9_reg(15) <= '0';
      Delay9_reg(16) <= '0';
      Delay9_reg(17) <= '0';
      Delay9_reg(18) <= '0';
      Delay9_reg(19) <= '0';
      Delay9_reg(20) <= '0';
      Delay9_reg(21) <= '0';
      Delay9_reg(22) <= '0';
      Delay9_reg(23) <= '0';
      Delay9_reg(24) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay9_reg(0) <= Delay9_reg_next(0);
        Delay9_reg(1) <= Delay9_reg_next(1);
        Delay9_reg(2) <= Delay9_reg_next(2);
        Delay9_reg(3) <= Delay9_reg_next(3);
        Delay9_reg(4) <= Delay9_reg_next(4);
        Delay9_reg(5) <= Delay9_reg_next(5);
        Delay9_reg(6) <= Delay9_reg_next(6);
        Delay9_reg(7) <= Delay9_reg_next(7);
        Delay9_reg(8) <= Delay9_reg_next(8);
        Delay9_reg(9) <= Delay9_reg_next(9);
        Delay9_reg(10) <= Delay9_reg_next(10);
        Delay9_reg(11) <= Delay9_reg_next(11);
        Delay9_reg(12) <= Delay9_reg_next(12);
        Delay9_reg(13) <= Delay9_reg_next(13);
        Delay9_reg(14) <= Delay9_reg_next(14);
        Delay9_reg(15) <= Delay9_reg_next(15);
        Delay9_reg(16) <= Delay9_reg_next(16);
        Delay9_reg(17) <= Delay9_reg_next(17);
        Delay9_reg(18) <= Delay9_reg_next(18);
        Delay9_reg(19) <= Delay9_reg_next(19);
        Delay9_reg(20) <= Delay9_reg_next(20);
        Delay9_reg(21) <= Delay9_reg_next(21);
        Delay9_reg(22) <= Delay9_reg_next(22);
        Delay9_reg(23) <= Delay9_reg_next(23);
        Delay9_reg(24) <= Delay9_reg_next(24);
      END IF;
    END IF;
  END PROCESS Delay9_process;

  Delay9_out1 <= Delay9_reg(24);
  Delay9_reg_next(0) <= alphaaExponent_cfType_Exponent_out1_1;
  Delay9_reg_next(1) <= Delay9_reg(0);
  Delay9_reg_next(2) <= Delay9_reg(1);
  Delay9_reg_next(3) <= Delay9_reg(2);
  Delay9_reg_next(4) <= Delay9_reg(3);
  Delay9_reg_next(5) <= Delay9_reg(4);
  Delay9_reg_next(6) <= Delay9_reg(5);
  Delay9_reg_next(7) <= Delay9_reg(6);
  Delay9_reg_next(8) <= Delay9_reg(7);
  Delay9_reg_next(9) <= Delay9_reg(8);
  Delay9_reg_next(10) <= Delay9_reg(9);
  Delay9_reg_next(11) <= Delay9_reg(10);
  Delay9_reg_next(12) <= Delay9_reg(11);
  Delay9_reg_next(13) <= Delay9_reg(12);
  Delay9_reg_next(14) <= Delay9_reg(13);
  Delay9_reg_next(15) <= Delay9_reg(14);
  Delay9_reg_next(16) <= Delay9_reg(15);
  Delay9_reg_next(17) <= Delay9_reg(16);
  Delay9_reg_next(18) <= Delay9_reg(17);
  Delay9_reg_next(19) <= Delay9_reg(18);
  Delay9_reg_next(20) <= Delay9_reg(19);
  Delay9_reg_next(21) <= Delay9_reg(20);
  Delay9_reg_next(22) <= Delay9_reg(21);
  Delay9_reg_next(23) <= Delay9_reg(22);
  Delay9_reg_next(24) <= Delay9_reg(23);

  alpha1_out1 <= '1';

  Bit_Concat1_out1 <= alpha1_out1 & Switch_out1;

  alpha0_out1 <= '0';

  Bit_Concat_out1 <= alpha0_out1 & Switch_out1;

  
  if_Exponent_0_cfType_Exp_out1 <= Bit_Concat1_out1 WHEN aExponent_0_out1 = '0' ELSE
      Bit_Concat_out1;

  BitSlice_out1 <= if_Exponent_0_cfType_Exp_out1(22 DOWNTO 0);

  Delay1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_1 <= to_unsigned(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay1_out1_1 <= BitSlice_out1;
      END IF;
    END IF;
  END PROCESS Delay1_1_process;


  Delay25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay25_out1 <= to_unsigned(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay25_out1 <= Delay1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay25_process;


  
  bitsliceget_mant_norm_mant_no_out1 <= '1' WHEN Delay25_out1 /= to_unsigned(16#000000#, 23) ELSE
      '0';

  C_out1 <= to_signed(16#00000000#, 30);

  Constant_out1_1 <= to_unsigned(16#0#, 4);

  Constant1_out1_1 <= to_unsigned(16#0#, 3);

  Bit_Concat_out1_1 <= Constant_out1_1 & Delay25_out1 & Constant1_out1_1;

  DTC_out1 <= signed(Bit_Concat_out1_1);

  
  if_tmp_out1 <= C_out1 WHEN bitsliceget_mant_norm_mant_no_out1 = '0' ELSE
      DTC_out1;

  
  w_1_out1 <= '1' WHEN if_tmp_out1 > to_signed(16#02000000#, 30) ELSE
      '0';

  C_out1_1 <= to_unsigned(16#01#, 8);

  
  if_Exponent_0_out1 <= Delay1_out1 WHEN aExponent_0_out1 = '0' ELSE
      C_out1_1;

  Delay2_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1_1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay2_out1_1 <= if_Exponent_0_out1;
      END IF;
    END IF;
  END PROCESS Delay2_1_process;


  DTC_out1_1 <= signed(resize(Delay2_out1_1, 11));

  Delay24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay24_out1 <= to_signed(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay24_out1 <= DTC_out1_1;
      END IF;
    END IF;
  END PROCESS Delay24_process;


  ExponentBias_out1 <= to_signed(-16#07F#, 11);

  exp_unbiased_cast_cfType_Exp_add_temp <= resize(Delay24_out1, 32) + resize(ExponentBias_out1, 32);
  exp_unbiased_cast_cfType_Exp_out1 <= exp_unbiased_cast_cfType_Exp_add_temp(10 DOWNTO 0);

  C_out1_2 <= to_signed(16#001#, 11);

  Add_out1_1 <= C_out1_2 + exp_unbiased_cast_cfType_Exp_out1;

  
  if_w_1_out1 <= exp_unbiased_cast_cfType_Exp_out1 WHEN w_1_out1 = '0' ELSE
      Add_out1_1;

  Delay15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay15_reg(0) <= to_signed(16#000#, 11);
      Delay15_reg(1) <= to_signed(16#000#, 11);
      Delay15_reg(2) <= to_signed(16#000#, 11);
      Delay15_reg(3) <= to_signed(16#000#, 11);
      Delay15_reg(4) <= to_signed(16#000#, 11);
      Delay15_reg(5) <= to_signed(16#000#, 11);
      Delay15_reg(6) <= to_signed(16#000#, 11);
      Delay15_reg(7) <= to_signed(16#000#, 11);
      Delay15_reg(8) <= to_signed(16#000#, 11);
      Delay15_reg(9) <= to_signed(16#000#, 11);
      Delay15_reg(10) <= to_signed(16#000#, 11);
      Delay15_reg(11) <= to_signed(16#000#, 11);
      Delay15_reg(12) <= to_signed(16#000#, 11);
      Delay15_reg(13) <= to_signed(16#000#, 11);
      Delay15_reg(14) <= to_signed(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay15_reg(0) <= Delay15_reg_next(0);
        Delay15_reg(1) <= Delay15_reg_next(1);
        Delay15_reg(2) <= Delay15_reg_next(2);
        Delay15_reg(3) <= Delay15_reg_next(3);
        Delay15_reg(4) <= Delay15_reg_next(4);
        Delay15_reg(5) <= Delay15_reg_next(5);
        Delay15_reg(6) <= Delay15_reg_next(6);
        Delay15_reg(7) <= Delay15_reg_next(7);
        Delay15_reg(8) <= Delay15_reg_next(8);
        Delay15_reg(9) <= Delay15_reg_next(9);
        Delay15_reg(10) <= Delay15_reg_next(10);
        Delay15_reg(11) <= Delay15_reg_next(11);
        Delay15_reg(12) <= Delay15_reg_next(12);
        Delay15_reg(13) <= Delay15_reg_next(13);
        Delay15_reg(14) <= Delay15_reg_next(14);
      END IF;
    END IF;
  END PROCESS Delay15_process;

  Delay15_out1 <= Delay15_reg(14);
  Delay15_reg_next(0) <= if_w_1_out1;
  Delay15_reg_next(1) <= Delay15_reg(0);
  Delay15_reg_next(2) <= Delay15_reg(1);
  Delay15_reg_next(3) <= Delay15_reg(2);
  Delay15_reg_next(4) <= Delay15_reg(3);
  Delay15_reg_next(5) <= Delay15_reg(4);
  Delay15_reg_next(6) <= Delay15_reg(5);
  Delay15_reg_next(7) <= Delay15_reg(6);
  Delay15_reg_next(8) <= Delay15_reg(7);
  Delay15_reg_next(9) <= Delay15_reg(8);
  Delay15_reg_next(10) <= Delay15_reg(9);
  Delay15_reg_next(11) <= Delay15_reg(10);
  Delay15_reg_next(12) <= Delay15_reg(11);
  Delay15_reg_next(13) <= Delay15_reg(12);
  Delay15_reg_next(14) <= Delay15_reg(13);

  
  Compare_To_Constant_out1 <= '1' WHEN Delay15_out1 = to_signed(16#001#, 11) ELSE
      '0';

  
  Compare_To_Constant1_out1 <= '1' WHEN Delay15_out1 = to_signed(-16#001#, 11) ELSE
      '0';

  Constant3_out1 <= to_signed(16#268826A#, 27);

  Product_mul_temp <= Delay15_out1 * Constant3_out1;
  Product_out1 <= Product_mul_temp(35 DOWNTO 1);

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_reg(0) <= to_signed(0, 35);
      Delay5_reg(1) <= to_signed(0, 35);
      Delay5_reg(2) <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay5_reg(0) <= Delay5_reg_next(0);
        Delay5_reg(1) <= Delay5_reg_next(1);
        Delay5_reg(2) <= Delay5_reg_next(2);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1 <= Delay5_reg(2);
  Delay5_reg_next(0) <= Product_out1;
  Delay5_reg_next(1) <= Delay5_reg(0);
  Delay5_reg_next(2) <= Delay5_reg(1);

  Delay4_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_reg(0) <= '0';
      Delay4_reg(1) <= '0';
      Delay4_reg(2) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay4_reg(0) <= Delay4_reg_next(0);
        Delay4_reg(1) <= Delay4_reg_next(1);
        Delay4_reg(2) <= Delay4_reg_next(2);
      END IF;
    END IF;
  END PROCESS Delay4_1_process;

  Delay4_out1_1 <= Delay4_reg(2);
  Delay4_reg_next(0) <= Compare_To_Constant1_out1;
  Delay4_reg_next(1) <= Delay4_reg(0);
  Delay4_reg_next(2) <= Delay4_reg(1);

  Constant_out1_2 <= to_unsigned(16#000000#, 23);

  Bit_Concat_out1_2 <= unsigned(Delay5_out1) & Constant_out1_2;

  Data_Type_Conversion_out1 <= signed(Bit_Concat_out1_2);

  Delay3_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_reg(0) <= '0';
      Delay3_reg(1) <= '0';
      Delay3_reg(2) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay3_reg(0) <= Delay3_reg_next(0);
        Delay3_reg(1) <= Delay3_reg_next(1);
        Delay3_reg(2) <= Delay3_reg_next(2);
      END IF;
    END IF;
  END PROCESS Delay3_1_process;

  Delay3_out1_1 <= Delay3_reg(2);
  Delay3_reg_next(0) <= Compare_To_Constant_out1;
  Delay3_reg_next(1) <= Delay3_reg(0);
  Delay3_reg_next(2) <= Delay3_reg(1);

  Constant1_out1_2 <= signed'("1111111111011001011101111101100101011110110000010000110000");

  
  Switch1_out1 <= Data_Type_Conversion_out1 WHEN Delay4_out1_1 = '0' ELSE
      Constant1_out1_2;

  Constant2_out1 <= signed'("0000000000100110100010000010011010100001001111101111010000");

  
  Switch_out1_1 <= Switch1_out1 WHEN Delay3_out1_1 = '0' ELSE
      Constant2_out1;

  bitsll_w_1_out1 <= if_tmp_out1 sll 1;

  alpha2_out1 <= to_signed(-16#04000000#, 30);

  w_2_out1 <= if_tmp_out1 + alpha2_out1;

  
  if_w_1_1_out1 <= bitsll_w_1_out1 WHEN w_1_out1 = '0' ELSE
      w_2_out1;

  Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_out1 <= to_signed(16#00000000#, 30);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay8_out1 <= if_w_1_1_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  BitSlice_out1_1 <= unsigned(Delay8_out1(29 DOWNTO 23));

  reinterpretcast_bitsliceget_w_out1 <= signed(BitSlice_out1_1);

  
  w_hat_0_75_out1 <= '1' WHEN reinterpretcast_bitsliceget_w_out1 >= to_signed(16#03#, 7) ELSE
      '0';

  
  w_hat_0_5_out1 <= '1' WHEN reinterpretcast_bitsliceget_w_out1 < to_signed(-16#02#, 7) ELSE
      '0';

  bitsll_w_1_out1_1 <= Delay8_out1 sll 1;

  alpha2_out1_1 <= to_signed(16#04000000#, 30);

  bitsra_w_1_out1 <= SHIFT_RIGHT(Delay8_out1, 1);

  alpha2_tmp1_out1 <= alpha2_out1_1 + bitsra_w_1_out1;

  w_tmp2_out1 <= bitsll_w_1_out1_1 + alpha2_tmp1_out1;

  
  if_w_hat_0_5_1_out1 <= bitsll_w_1_out1_1 WHEN w_hat_0_5_out1 = '0' ELSE
      w_tmp2_out1;

  w_tmp2_out1_1 <= bitsll_w_1_out1_1 - alpha2_tmp1_out1;

  
  if_w_hat_0_75_1_out1 <= if_w_hat_0_5_1_out1 WHEN w_hat_0_75_out1 = '0' ELSE
      w_tmp2_out1_1;

  Delay4_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1_2 <= to_signed(16#00000000#, 30);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay4_out1_2 <= if_w_hat_0_75_1_out1;
      END IF;
    END IF;
  END PROCESS Delay4_2_process;


  BitSlice_out1_2 <= unsigned(Delay4_out1_2(29 DOWNTO 21));

  reinterpretcast_bitsliceget_w_out1_1 <= signed(BitSlice_out1_2);

  
  w_hat_0_75_out1_1 <= '1' WHEN reinterpretcast_bitsliceget_w_out1_1 > to_signed(16#008#, 9) ELSE
      '0';

  
  w_hat_0_5_out1_1 <= '1' WHEN reinterpretcast_bitsliceget_w_out1_1 < to_signed(-16#008#, 9) ELSE
      '0';

  bitsll_w_1_out1_2 <= Delay4_out1_2 sll 1;

  alpha2_out1_2 <= to_signed(16#04000000#, 30);

  bitsra_w_1_out1_1 <= SHIFT_RIGHT(Delay4_out1_2, 2);

  alpha2_tmp1_out1_1 <= alpha2_out1_2 + bitsra_w_1_out1_1;

  w_tmp2_out1_2 <= bitsll_w_1_out1_2 + alpha2_tmp1_out1_1;

  
  if_w_hat_0_5_1_out1_1 <= bitsll_w_1_out1_2 WHEN w_hat_0_5_out1_1 = '0' ELSE
      w_tmp2_out1_2;

  w_tmp2_out1_3 <= bitsll_w_1_out1_2 - alpha2_tmp1_out1_1;

  
  if_w_hat_0_75_1_out1_1 <= if_w_hat_0_5_1_out1_1 WHEN w_hat_0_75_out1_1 = '0' ELSE
      w_tmp2_out1_3;

  Delay1_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_2 <= to_signed(16#00000000#, 30);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay1_out1_2 <= if_w_hat_0_75_1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay1_2_process;


  BitSlice_out1_3 <= unsigned(Delay1_out1_2(29 DOWNTO 21));

  reinterpretcast_bitsliceget_w_out1_2 <= signed(BitSlice_out1_3);

  
  w_hat_0_75_out1_2 <= '1' WHEN reinterpretcast_bitsliceget_w_out1_2 > to_signed(16#008#, 9) ELSE
      '0';

  
  w_hat_0_5_out1_2 <= '1' WHEN reinterpretcast_bitsliceget_w_out1_2 < to_signed(-16#008#, 9) ELSE
      '0';

  bitsll_w_1_out1_3 <= Delay1_out1_2 sll 1;

  alpha2_out1_3 <= to_signed(16#04000000#, 30);

  bitsra_w_1_out1_2 <= SHIFT_RIGHT(Delay1_out1_2, 3);

  alpha2_tmp1_out1_2 <= alpha2_out1_3 + bitsra_w_1_out1_2;

  w_tmp2_out1_4 <= bitsll_w_1_out1_3 + alpha2_tmp1_out1_2;

  
  if_w_hat_0_5_1_out1_2 <= bitsll_w_1_out1_3 WHEN w_hat_0_5_out1_2 = '0' ELSE
      w_tmp2_out1_4;

  w_tmp2_out1_5 <= bitsll_w_1_out1_3 - alpha2_tmp1_out1_2;

  
  if_w_hat_0_75_1_out1_2 <= if_w_hat_0_5_1_out1_2 WHEN w_hat_0_75_out1_2 = '0' ELSE
      w_tmp2_out1_5;

  Delay9_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_out1_1 <= to_signed(16#00000000#, 30);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay9_out1_1 <= if_w_hat_0_75_1_out1_2;
      END IF;
    END IF;
  END PROCESS Delay9_1_process;


  BitSlice_out1_4 <= unsigned(Delay9_out1_1(29 DOWNTO 21));

  reinterpretcast_bitsliceget_w_out1_3 <= signed(BitSlice_out1_4);

  
  w_hat_0_75_out1_3 <= '1' WHEN reinterpretcast_bitsliceget_w_out1_3 > to_signed(16#008#, 9) ELSE
      '0';

  
  w_hat_0_5_out1_3 <= '1' WHEN reinterpretcast_bitsliceget_w_out1_3 < to_signed(-16#008#, 9) ELSE
      '0';

  bitsll_w_1_out1_4 <= Delay9_out1_1 sll 1;

  alpha2_out1_4 <= to_signed(16#04000000#, 30);

  bitsra_w_1_out1_3 <= SHIFT_RIGHT(Delay9_out1_1, 4);

  alpha2_tmp1_out1_3 <= alpha2_out1_4 + bitsra_w_1_out1_3;

  w_tmp2_out1_6 <= bitsll_w_1_out1_4 + alpha2_tmp1_out1_3;

  
  if_w_hat_0_5_1_out1_3 <= bitsll_w_1_out1_4 WHEN w_hat_0_5_out1_3 = '0' ELSE
      w_tmp2_out1_6;

  w_tmp2_out1_7 <= bitsll_w_1_out1_4 - alpha2_tmp1_out1_3;

  
  if_w_hat_0_75_1_out1_3 <= if_w_hat_0_5_1_out1_3 WHEN w_hat_0_75_out1_3 = '0' ELSE
      w_tmp2_out1_7;

  Delay3_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1_2 <= to_signed(16#00000000#, 30);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay3_out1_2 <= if_w_hat_0_75_1_out1_3;
      END IF;
    END IF;
  END PROCESS Delay3_2_process;


  BitSlice_out1_5 <= unsigned(Delay3_out1_2(29 DOWNTO 21));

  reinterpretcast_bitsliceget_w_out1_4 <= signed(BitSlice_out1_5);

  
  w_hat_0_75_out1_4 <= '1' WHEN reinterpretcast_bitsliceget_w_out1_4 > to_signed(16#008#, 9) ELSE
      '0';

  
  w_hat_0_5_out1_4 <= '1' WHEN reinterpretcast_bitsliceget_w_out1_4 < to_signed(-16#008#, 9) ELSE
      '0';

  bitsll_w_1_out1_5 <= Delay3_out1_2 sll 1;

  alpha2_out1_5 <= to_signed(16#04000000#, 30);

  bitsra_w_1_out1_4 <= SHIFT_RIGHT(Delay3_out1_2, 5);

  alpha2_tmp1_out1_4 <= alpha2_out1_5 + bitsra_w_1_out1_4;

  w_tmp2_out1_8 <= bitsll_w_1_out1_5 + alpha2_tmp1_out1_4;

  
  if_w_hat_0_5_1_out1_4 <= bitsll_w_1_out1_5 WHEN w_hat_0_5_out1_4 = '0' ELSE
      w_tmp2_out1_8;

  w_tmp2_out1_9 <= bitsll_w_1_out1_5 - alpha2_tmp1_out1_4;

  
  if_w_hat_0_75_1_out1_4 <= if_w_hat_0_5_1_out1_4 WHEN w_hat_0_75_out1_4 = '0' ELSE
      w_tmp2_out1_9;

  Delay11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_out1 <= to_signed(16#00000000#, 30);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay11_out1 <= if_w_hat_0_75_1_out1_4;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  BitSlice_out1_6 <= unsigned(Delay11_out1(29 DOWNTO 21));

  reinterpretcast_bitsliceget_w_out1_5 <= signed(BitSlice_out1_6);

  
  w_hat_0_75_out1_5 <= '1' WHEN reinterpretcast_bitsliceget_w_out1_5 > to_signed(16#008#, 9) ELSE
      '0';

  
  w_hat_0_5_out1_5 <= '1' WHEN reinterpretcast_bitsliceget_w_out1_5 < to_signed(-16#008#, 9) ELSE
      '0';

  bitsll_w_1_out1_6 <= Delay11_out1 sll 1;

  alpha2_out1_6 <= to_signed(16#04000000#, 30);

  bitsra_w_1_out1_5 <= SHIFT_RIGHT(Delay11_out1, 6);

  alpha2_tmp1_out1_5 <= alpha2_out1_6 + bitsra_w_1_out1_5;

  w_tmp2_out1_10 <= bitsll_w_1_out1_6 + alpha2_tmp1_out1_5;

  
  if_w_hat_0_5_1_out1_5 <= bitsll_w_1_out1_6 WHEN w_hat_0_5_out1_5 = '0' ELSE
      w_tmp2_out1_10;

  w_tmp2_out1_11 <= bitsll_w_1_out1_6 - alpha2_tmp1_out1_5;

  
  if_w_hat_0_75_1_out1_5 <= if_w_hat_0_5_1_out1_5 WHEN w_hat_0_75_out1_5 = '0' ELSE
      w_tmp2_out1_11;

  Delay5_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1_1 <= to_signed(16#00000000#, 30);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay5_out1_1 <= if_w_hat_0_75_1_out1_5;
      END IF;
    END IF;
  END PROCESS Delay5_1_process;


  BitSlice_out1_7 <= unsigned(Delay5_out1_1(29 DOWNTO 21));

  reinterpretcast_bitsliceget_w_out1_6 <= signed(BitSlice_out1_7);

  
  w_hat_0_75_out1_6 <= '1' WHEN reinterpretcast_bitsliceget_w_out1_6 > to_signed(16#008#, 9) ELSE
      '0';

  
  w_hat_0_5_out1_6 <= '1' WHEN reinterpretcast_bitsliceget_w_out1_6 < to_signed(-16#008#, 9) ELSE
      '0';

  bitsll_w_1_out1_7 <= Delay5_out1_1 sll 1;

  alpha2_out1_7 <= to_signed(16#04000000#, 30);

  bitsra_w_1_out1_6 <= SHIFT_RIGHT(Delay5_out1_1, 7);

  alpha2_tmp1_out1_6 <= alpha2_out1_7 + bitsra_w_1_out1_6;

  w_tmp2_out1_12 <= bitsll_w_1_out1_7 + alpha2_tmp1_out1_6;

  
  if_w_hat_0_5_1_out1_6 <= bitsll_w_1_out1_7 WHEN w_hat_0_5_out1_6 = '0' ELSE
      w_tmp2_out1_12;

  w_tmp2_out1_13 <= bitsll_w_1_out1_7 - alpha2_tmp1_out1_6;

  
  if_w_hat_0_75_1_out1_6 <= if_w_hat_0_5_1_out1_6 WHEN w_hat_0_75_out1_6 = '0' ELSE
      w_tmp2_out1_13;

  Delay13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay13_out1 <= to_signed(16#00000000#, 30);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay13_out1 <= if_w_hat_0_75_1_out1_6;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  BitSlice_out1_8 <= unsigned(Delay13_out1(29 DOWNTO 21));

  reinterpretcast_bitsliceget_w_out1_7 <= signed(BitSlice_out1_8);

  
  w_hat_0_75_out1_7 <= '1' WHEN reinterpretcast_bitsliceget_w_out1_7 > to_signed(16#008#, 9) ELSE
      '0';

  
  w_hat_0_5_out1_7 <= '1' WHEN reinterpretcast_bitsliceget_w_out1_7 < to_signed(-16#008#, 9) ELSE
      '0';

  bitsll_w_1_out1_8 <= Delay13_out1 sll 1;

  alpha2_out1_8 <= to_signed(16#04000000#, 30);

  bitsra_w_1_out1_7 <= SHIFT_RIGHT(Delay13_out1, 8);

  alpha2_tmp1_out1_7 <= alpha2_out1_8 + bitsra_w_1_out1_7;

  w_tmp2_out1_14 <= bitsll_w_1_out1_8 + alpha2_tmp1_out1_7;

  
  if_w_hat_0_5_1_out1_7 <= bitsll_w_1_out1_8 WHEN w_hat_0_5_out1_7 = '0' ELSE
      w_tmp2_out1_14;

  w_tmp2_out1_15 <= bitsll_w_1_out1_8 - alpha2_tmp1_out1_7;

  
  if_w_hat_0_75_1_out1_7 <= if_w_hat_0_5_1_out1_7 WHEN w_hat_0_75_out1_7 = '0' ELSE
      w_tmp2_out1_15;

  Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_out1 <= to_signed(16#00000000#, 30);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay7_out1 <= if_w_hat_0_75_1_out1_7;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  BitSlice_out1_9 <= unsigned(Delay7_out1(29 DOWNTO 21));

  reinterpretcast_bitsliceget_w_out1_8 <= signed(BitSlice_out1_9);

  
  w_hat_0_75_out1_8 <= '1' WHEN reinterpretcast_bitsliceget_w_out1_8 > to_signed(16#008#, 9) ELSE
      '0';

  
  w_hat_0_5_out1_8 <= '1' WHEN reinterpretcast_bitsliceget_w_out1_8 < to_signed(-16#008#, 9) ELSE
      '0';

  bitsll_w_1_out1_9 <= Delay7_out1 sll 1;

  alpha2_out1_9 <= to_signed(16#04000000#, 30);

  bitsra_w_1_out1_8 <= SHIFT_RIGHT(Delay7_out1, 9);

  alpha2_tmp1_out1_8 <= alpha2_out1_9 + bitsra_w_1_out1_8;

  w_tmp2_out1_16 <= bitsll_w_1_out1_9 + alpha2_tmp1_out1_8;

  
  if_w_hat_0_5_1_out1_8 <= bitsll_w_1_out1_9 WHEN w_hat_0_5_out1_8 = '0' ELSE
      w_tmp2_out1_16;

  w_tmp2_out1_17 <= bitsll_w_1_out1_9 - alpha2_tmp1_out1_8;

  
  if_w_hat_0_75_1_out1_8 <= if_w_hat_0_5_1_out1_8 WHEN w_hat_0_75_out1_8 = '0' ELSE
      w_tmp2_out1_17;

  Delay15_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay15_out1_1 <= to_signed(16#00000000#, 30);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay15_out1_1 <= if_w_hat_0_75_1_out1_8;
      END IF;
    END IF;
  END PROCESS Delay15_1_process;


  BitSlice_out1_10 <= unsigned(Delay15_out1_1(29 DOWNTO 21));

  reinterpretcast_bitsliceget_w_out1_9 <= signed(BitSlice_out1_10);

  
  w_hat_0_75_out1_9 <= '1' WHEN reinterpretcast_bitsliceget_w_out1_9 > to_signed(16#008#, 9) ELSE
      '0';

  
  w_hat_0_5_out1_9 <= '1' WHEN reinterpretcast_bitsliceget_w_out1_9 < to_signed(-16#008#, 9) ELSE
      '0';

  bitsll_w_1_out1_10 <= Delay15_out1_1 sll 1;

  alpha2_out1_10 <= to_signed(16#04000000#, 30);

  bitsra_w_1_out1_9 <= SHIFT_RIGHT(Delay15_out1_1, 10);

  alpha2_tmp1_out1_9 <= alpha2_out1_10 + bitsra_w_1_out1_9;

  w_tmp2_out1_18 <= bitsll_w_1_out1_10 + alpha2_tmp1_out1_9;

  
  if_w_hat_0_5_1_out1_9 <= bitsll_w_1_out1_10 WHEN w_hat_0_5_out1_9 = '0' ELSE
      w_tmp2_out1_18;

  w_tmp2_out1_19 <= bitsll_w_1_out1_10 - alpha2_tmp1_out1_9;

  
  if_w_hat_0_75_1_out1_9 <= if_w_hat_0_5_1_out1_9 WHEN w_hat_0_75_out1_9 = '0' ELSE
      w_tmp2_out1_19;

  Delay25_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay25_out1_1 <= to_signed(16#00000000#, 30);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay25_out1_1 <= if_w_hat_0_75_1_out1_9;
      END IF;
    END IF;
  END PROCESS Delay25_1_process;


  
  w_0_out1 <= '1' WHEN Delay25_out1_1 /= to_signed(16#00000000#, 30) ELSE
      '0';

  Delay19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay19_reg(0) <= '0';
      Delay19_reg(1) <= '0';
      Delay19_reg(2) <= '0';
      Delay19_reg(3) <= '0';
      Delay19_reg(4) <= '0';
      Delay19_reg(5) <= '0';
      Delay19_reg(6) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay19_reg(0) <= Delay19_reg_next(0);
        Delay19_reg(1) <= Delay19_reg_next(1);
        Delay19_reg(2) <= Delay19_reg_next(2);
        Delay19_reg(3) <= Delay19_reg_next(3);
        Delay19_reg(4) <= Delay19_reg_next(4);
        Delay19_reg(5) <= Delay19_reg_next(5);
        Delay19_reg(6) <= Delay19_reg_next(6);
      END IF;
    END IF;
  END PROCESS Delay19_process;

  Delay19_out1 <= Delay19_reg(6);
  Delay19_reg_next(0) <= w_0_out1;
  Delay19_reg_next(1) <= Delay19_reg(0);
  Delay19_reg_next(2) <= Delay19_reg(1);
  Delay19_reg_next(3) <= Delay19_reg(2);
  Delay19_reg_next(4) <= Delay19_reg(3);
  Delay19_reg_next(5) <= Delay19_reg(4);
  Delay19_reg_next(6) <= Delay19_reg(5);

  Zero_out1 <= to_signed(0, 32);

  Log10Table_2_out1 <= to_signed(208112668, 32);

  
  if_w_hat_0_5_out1 <= Zero_out1 WHEN w_hat_0_5_out1 = '0' ELSE
      Log10Table_2_out1;

  Log10MinusTable_2_out1 <= to_signed(-268303894, 32);

  
  if_w_hat_0_75_out1 <= if_w_hat_0_5_out1 WHEN w_hat_0_75_out1 = '0' ELSE
      Log10MinusTable_2_out1;

  Delay23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay23_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay23_out1 <= if_w_hat_0_75_out1;
      END IF;
    END IF;
  END PROCESS Delay23_process;


  Constant1_out1_3 <= '0';

  Bit_Concat1_out1_1 <= unsigned(Delay23_out1) & Constant1_out1_3;

  reinterpretcast_bitsliceget_w_2_out1 <= signed(Bit_Concat1_out1_1);

  Delay_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1_1 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay_out1_1 <= reinterpretcast_bitsliceget_w_2_out1;
      END IF;
    END IF;
  END PROCESS Delay_1_process;


  Zero_out1_1 <= to_signed(0, 33);

  Log10Table_int32_3_out1 <= to_signed(219698411, 33);

  
  if_w_hat_0_5_out1_1 <= Zero_out1_1 WHEN w_hat_0_5_out1_1 = '0' ELSE
      Log10Table_int32_3_out1;

  Log10MinusTable_int32_3_out1 <= to_signed(-249073516, 33);

  
  if_w_hat_0_75_out1_1 <= if_w_hat_0_5_out1_1 WHEN w_hat_0_75_out1_1 = '0' ELSE
      Log10MinusTable_int32_3_out1;

  Delay16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay16_out1 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay16_out1 <= if_w_hat_0_75_out1_1;
      END IF;
    END IF;
  END PROCESS Delay16_process;


  L_Log10Table_3_1_out1 <= Delay_out1_1 + Delay16_out1;

  Constant_out1_3 <= '0';

  Bit_Concat_out1_3 <= unsigned(L_Log10Table_3_1_out1) & Constant_out1_3;

  reinterpretcast_bitsliceget_w_1_out1 <= signed(Bit_Concat_out1_3);

  Delay8_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_out1_1 <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay8_out1_1 <= reinterpretcast_bitsliceget_w_1_out1;
      END IF;
    END IF;
  END PROCESS Delay8_1_process;


  Zero_out1_2 <= to_signed(0, 34);

  Log10Table_int32_4_out1 <= to_signed(226163862, 34);

  
  if_w_hat_0_5_out1_2 <= Zero_out1_2 WHEN w_hat_0_5_out1_2 = '0' ELSE
      Log10Table_int32_4_out1;

  Log10MinusTable_int32_4_out1 <= to_signed(-240764902, 34);

  
  if_w_hat_0_75_out1_2 <= if_w_hat_0_5_out1_2 WHEN w_hat_0_75_out1_2 = '0' ELSE
      Log10MinusTable_int32_4_out1;

  Delay17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay17_out1 <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay17_out1 <= if_w_hat_0_75_out1_2;
      END IF;
    END IF;
  END PROCESS Delay17_process;


  L_Log10Table_4_1_out1 <= Delay8_out1_1 + Delay17_out1;

  Constant_out1_4 <= '0';

  Bit_Concat_out1_4 <= unsigned(L_Log10Table_4_1_out1) & Constant_out1_4;

  reinterpretcast_bitsliceget_w_1_out1_1 <= signed(Bit_Concat_out1_4);

  Delay2_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1_2 <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay2_out1_2 <= reinterpretcast_bitsliceget_w_1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay2_2_process;


  Zero_out1_3 <= to_signed(0, 35);

  Log10Table_int32_5_out1 <= to_signed(229591111, 35);

  
  if_w_hat_0_5_out1_3 <= Zero_out1_3 WHEN w_hat_0_5_out1_3 = '0' ELSE
      Log10Table_int32_5_out1;

  Log10MinusTable_int32_5_out1 <= to_signed(-236880924, 35);

  
  if_w_hat_0_75_out1_3 <= if_w_hat_0_5_out1_3 WHEN w_hat_0_75_out1_3 = '0' ELSE
      Log10MinusTable_int32_5_out1;

  Delay18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay18_out1 <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay18_out1 <= if_w_hat_0_75_out1_3;
      END IF;
    END IF;
  END PROCESS Delay18_process;


  L_Log10Table_5_1_out1 <= Delay2_out1_2 + Delay18_out1;

  Constant_out1_5 <= '0';

  Bit_Concat_out1_5 <= unsigned(L_Log10Table_5_1_out1) & Constant_out1_5;

  reinterpretcast_bitsliceget_w_1_out1_2 <= signed(Bit_Concat_out1_5);

  Delay10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay10_out1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay10_out1 <= reinterpretcast_bitsliceget_w_1_out1_2;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  Zero_out1_4 <= to_signed(0, 36);

  Log10Table_int32_6_out1 <= to_signed(231357266, 36);

  
  if_w_hat_0_5_out1_4 <= Zero_out1_4 WHEN w_hat_0_5_out1_4 = '0' ELSE
      Log10Table_int32_6_out1;

  Log10MinusTable_int32_6_out1 <= to_signed(-235000837, 36);

  
  if_w_hat_0_75_out1_4 <= if_w_hat_0_5_out1_4 WHEN w_hat_0_75_out1_4 = '0' ELSE
      Log10MinusTable_int32_6_out1;

  Delay19_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay19_out1_1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay19_out1_1 <= if_w_hat_0_75_out1_4;
      END IF;
    END IF;
  END PROCESS Delay19_1_process;


  L_Log10Table_6_1_out1 <= Delay10_out1 + Delay19_out1_1;

  Constant_out1_6 <= '0';

  Bit_Concat_out1_6 <= unsigned(L_Log10Table_6_1_out1) & Constant_out1_6;

  reinterpretcast_bitsliceget_w_1_out1_3 <= signed(Bit_Concat_out1_6);

  Delay4_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1_3 <= to_signed(0, 37);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay4_out1_3 <= reinterpretcast_bitsliceget_w_1_out1_3;
      END IF;
    END IF;
  END PROCESS Delay4_3_process;


  Zero_out1_5 <= to_signed(0, 37);

  Log10Table_int32_7_out1 <= to_signed(232254009, 37);

  
  if_w_hat_0_5_out1_5 <= Zero_out1_5 WHEN w_hat_0_5_out1_5 = '0' ELSE
      Log10Table_int32_7_out1;

  Log10MinusTable_int32_7_out1 <= to_signed(-234075628, 37);

  
  if_w_hat_0_75_out1_5 <= if_w_hat_0_5_out1_5 WHEN w_hat_0_75_out1_5 = '0' ELSE
      Log10MinusTable_int32_7_out1;

  Delay20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay20_out1 <= to_signed(0, 37);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay20_out1 <= if_w_hat_0_75_out1_5;
      END IF;
    END IF;
  END PROCESS Delay20_process;


  L_Log10Table_7_1_out1 <= Delay4_out1_3 + Delay20_out1;

  Constant_out1_7 <= '0';

  Bit_Concat_out1_7 <= unsigned(L_Log10Table_7_1_out1) & Constant_out1_7;

  reinterpretcast_bitsliceget_w_1_out1_4 <= signed(Bit_Concat_out1_7);

  Delay12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay12_out1 <= to_signed(0, 38);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay12_out1 <= reinterpretcast_bitsliceget_w_1_out1_4;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  Zero_out1_6 <= to_signed(0, 38);

  Log10Table_int32_8_out1 <= to_signed(232705866, 38);

  
  if_w_hat_0_5_out1_6 <= Zero_out1_6 WHEN w_hat_0_5_out1_6 = '0' ELSE
      Log10Table_int32_8_out1;

  Log10MinusTable_int32_8_out1 <= to_signed(-233616655, 38);

  
  if_w_hat_0_75_out1_6 <= if_w_hat_0_5_out1_6 WHEN w_hat_0_75_out1_6 = '0' ELSE
      Log10MinusTable_int32_8_out1;

  Delay21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay21_out1 <= to_signed(0, 38);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay21_out1 <= if_w_hat_0_75_out1_6;
      END IF;
    END IF;
  END PROCESS Delay21_process;


  L_Log10Table_9_1_out1 <= Delay12_out1 + Delay21_out1;

  Constant_out1_8 <= '0';

  Bit_Concat_out1_8 <= unsigned(L_Log10Table_9_1_out1) & Constant_out1_8;

  reinterpretcast_bitsliceget_w_1_out1_5 <= signed(Bit_Concat_out1_8);

  Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_out1 <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay6_out1 <= reinterpretcast_bitsliceget_w_1_out1_5;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Zero_out1_7 <= to_signed(0, 39);

  Log10Table_int32_9_out1 <= to_signed(232932675, 39);

  
  if_w_hat_0_5_out1_7 <= Zero_out1_7 WHEN w_hat_0_5_out1_7 = '0' ELSE
      Log10Table_int32_9_out1;

  Log10MinusTable_int32_9_out1 <= to_signed(-233388067, 39);

  
  if_w_hat_0_75_out1_7 <= if_w_hat_0_5_out1_7 WHEN w_hat_0_75_out1_7 = '0' ELSE
      Log10MinusTable_int32_9_out1;

  Delay22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay22_out1 <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay22_out1 <= if_w_hat_0_75_out1_7;
      END IF;
    END IF;
  END PROCESS Delay22_process;


  L_Log10Table_10_1_out1 <= Delay6_out1 + Delay22_out1;

  Constant_out1_9 <= '0';

  Bit_Concat_out1_9 <= unsigned(L_Log10Table_10_1_out1) & Constant_out1_9;

  reinterpretcast_bitsliceget_w_1_out1_6 <= signed(Bit_Concat_out1_9);

  Delay14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay14_out1 <= to_signed(0, 40);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay14_out1 <= reinterpretcast_bitsliceget_w_1_out1_6;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  Zero_out1_8 <= to_signed(0, 40);

  Log10Table_int32_10_out1 <= to_signed(233046301, 40);

  
  if_w_hat_0_5_out1_8 <= Zero_out1_8 WHEN w_hat_0_5_out1_8 = '0' ELSE
      Log10Table_int32_10_out1;

  Log10MinusTable_int32_10_out1 <= to_signed(-233273996, 40);

  
  if_w_hat_0_75_out1_8 <= if_w_hat_0_5_out1_8 WHEN w_hat_0_75_out1_8 = '0' ELSE
      Log10MinusTable_int32_10_out1;

  Delay23_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay23_out1_1 <= to_signed(0, 40);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay23_out1_1 <= if_w_hat_0_75_out1_8;
      END IF;
    END IF;
  END PROCESS Delay23_1_process;


  L_Log10Table_10_1_out1_1 <= Delay14_out1 + Delay23_out1_1;

  Constant_out1_10 <= '0';

  Bit_Concat_out1_10 <= unsigned(L_Log10Table_10_1_out1_1) & Constant_out1_10;

  reinterpretcast_bitsliceget_w_1_out1_7 <= signed(Bit_Concat_out1_10);

  Delay24_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay24_out1_1 <= to_signed(0, 41);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay24_out1_1 <= reinterpretcast_bitsliceget_w_1_out1_7;
      END IF;
    END IF;
  END PROCESS Delay24_1_process;


  Delay12_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay12_out1_1 <= to_signed(0, 41);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay12_out1_1 <= Delay24_out1_1;
      END IF;
    END IF;
  END PROCESS Delay12_1_process;


  Zero_out1_9 <= to_signed(0, 41);

  Log10Table_int32_10_out1_1 <= to_signed(233103169, 41);

  
  if_w_hat_0_5_out1_9 <= Zero_out1_9 WHEN w_hat_0_5_out1_9 = '0' ELSE
      Log10Table_int32_10_out1_1;

  Log10MinusTable_int32_10_out1_1 <= to_signed(-233217017, 41);

  
  if_w_hat_0_75_out1_9 <= if_w_hat_0_5_out1_9 WHEN w_hat_0_75_out1_9 = '0' ELSE
      Log10MinusTable_int32_10_out1_1;

  Delay26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay26_out1 <= to_signed(0, 41);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay26_out1 <= if_w_hat_0_75_out1_9;
      END IF;
    END IF;
  END PROCESS Delay26_process;


  Delay18_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay18_out1_1 <= to_signed(0, 41);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay18_out1_1 <= Delay26_out1;
      END IF;
    END IF;
  END PROCESS Delay18_1_process;


  L_Log10Table_10_out1 <= Delay12_out1_1 + Delay18_out1_1;

  alpha0_out1_1 <= to_unsigned(16#000#, 9);

  Bit_Concat_out1_11 <= unsigned(L_Log10Table_10_out1) & alpha0_out1_1;

  reinterpretcast_bitconcat_L_f_out1 <= signed(Bit_Concat_out1_11);

  Delay25_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay25_reg(0) <= to_signed(0, 50);
      Delay25_reg(1) <= to_signed(0, 50);
      Delay25_reg(2) <= to_signed(0, 50);
      Delay25_reg(3) <= to_signed(0, 50);
      Delay25_reg(4) <= to_signed(0, 50);
      Delay25_reg(5) <= to_signed(0, 50);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay25_reg(0) <= Delay25_reg_next(0);
        Delay25_reg(1) <= Delay25_reg_next(1);
        Delay25_reg(2) <= Delay25_reg_next(2);
        Delay25_reg(3) <= Delay25_reg_next(3);
        Delay25_reg(4) <= Delay25_reg_next(4);
        Delay25_reg(5) <= Delay25_reg_next(5);
      END IF;
    END IF;
  END PROCESS Delay25_2_process;

  Delay25_out1_2 <= Delay25_reg(5);
  Delay25_reg_next(0) <= reinterpretcast_bitconcat_L_f_out1;
  Delay25_reg_next(1) <= Delay25_reg(0);
  Delay25_reg_next(2) <= Delay25_reg(1);
  Delay25_reg_next(3) <= Delay25_reg(2);
  Delay25_reg_next(4) <= Delay25_reg(3);
  Delay25_reg_next(5) <= Delay25_reg(4);

  BitSlice_out1_11 <= Delay25_out1_1(29);

  alphaw_cast <= resize(Delay25_out1_1, 31);
  alphaw_cast_1 <=  - (alphaw_cast);
  alphaw_out1 <= alphaw_cast_1(29 DOWNTO 0);

  
  if_sign_1_out1 <= Delay25_out1_1 WHEN BitSlice_out1_11 = '0' ELSE
      alphaw_out1;

  Delay22_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay22_out1_1 <= to_signed(16#00000000#, 30);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay22_out1_1 <= if_sign_1_out1;
      END IF;
    END IF;
  END PROCESS Delay22_1_process;


  
  w_abs_2_out1 <= '1' WHEN Delay22_out1_1 >= to_signed(16#04000000#, 30) ELSE
      '0';

  Bit_Slice_out1 <= unsigned(Delay22_out1_1(25 DOWNTO 0));

  Bit_Slice5_out1 <= Bit_Slice_out1(25);

  Bit_Slice3_out1 <= Bit_Slice_out1(24);

  Bit_Slice6_out1 <= Bit_Slice_out1(23);

  Logical_Operator_out1_1 <= Bit_Slice3_out1 OR Bit_Slice6_out1;

  Logical_Operator1_out1 <= Bit_Slice5_out1 OR Logical_Operator_out1_1;

  Bit_Slice2_out1 <= Bit_Slice_out1(22 DOWNTO 15);

  Bit_Slice7_out1 <= Bit_Slice2_out1(7);

  Bit_Slice6_out1_1 <= Bit_Slice2_out1(6);

  Logical_Operator3_out1 <= Bit_Slice7_out1 OR Bit_Slice6_out1_1;

  Bit_Slice5_out1_1 <= Bit_Slice2_out1(5);

  Bit_Slice3_out1_1 <= Bit_Slice2_out1(4);

  Logical_Operator_out1_2 <= Bit_Slice5_out1_1 OR Bit_Slice3_out1_1;

  Logical_Operator1_out1_1 <= Logical_Operator3_out1 OR Logical_Operator_out1_2;

  Bit_Slice2_out1_1 <= Bit_Slice2_out1(3);

  Bit_Slice1_out1 <= Bit_Slice2_out1(2);

  Logical_Operator4_out1 <= Bit_Slice2_out1_1 OR Bit_Slice1_out1;

  Bit_Slice_out1_1 <= Bit_Slice2_out1(1);

  Bit_Slice4_out1 <= Bit_Slice2_out1(0);

  Logical_Operator2_out1_1 <= Bit_Slice_out1_1 OR Bit_Slice4_out1;

  Logical_Operator5_out1 <= Logical_Operator4_out1 OR Logical_Operator2_out1_1;

  Logical_Operator6_out1 <= Logical_Operator1_out1_1 OR Logical_Operator5_out1;

  Bit_Slice1_out1_1 <= Bit_Slice_out1(14 DOWNTO 7);

  Bit_Slice7_out1_1 <= Bit_Slice1_out1_1(7);

  Bit_Slice6_out1_2 <= Bit_Slice1_out1_1(6);

  Logical_Operator3_out1_1 <= Bit_Slice7_out1_1 OR Bit_Slice6_out1_2;

  Bit_Slice5_out1_2 <= Bit_Slice1_out1_1(5);

  Bit_Slice3_out1_2 <= Bit_Slice1_out1_1(4);

  Logical_Operator_out1_3 <= Bit_Slice5_out1_2 OR Bit_Slice3_out1_2;

  Logical_Operator1_out1_2 <= Logical_Operator3_out1_1 OR Logical_Operator_out1_3;

  Bit_Slice2_out1_2 <= Bit_Slice1_out1_1(3);

  Bit_Slice1_out1_2 <= Bit_Slice1_out1_1(2);

  Logical_Operator4_out1_1 <= Bit_Slice2_out1_2 OR Bit_Slice1_out1_2;

  Bit_Slice_out1_2 <= Bit_Slice1_out1_1(1);

  Bit_Slice4_out1_1 <= Bit_Slice1_out1_1(0);

  Logical_Operator2_out1_2 <= Bit_Slice_out1_2 OR Bit_Slice4_out1_1;

  Logical_Operator5_out1_1 <= Logical_Operator4_out1_1 OR Logical_Operator2_out1_2;

  Bit_Slice4_out1_2 <= Bit_Slice_out1(6 DOWNTO 0);

  Bit_Slice7_out1_2 <= Bit_Slice4_out1_2(6);

  Bit_Slice6_out1_3 <= Bit_Slice4_out1_2(5);

  Logical_Operator3_out1_2 <= Bit_Slice7_out1_2 OR Bit_Slice6_out1_3;

  Bit_Slice5_out1_3 <= Bit_Slice4_out1_2(4);

  Bit_Slice3_out1_3 <= Bit_Slice4_out1_2(3);

  Logical_Operator_out1_4 <= Bit_Slice5_out1_3 OR Bit_Slice3_out1_3;

  Bit_Slice2_out1_3 <= Bit_Slice4_out1_2(2);

  Bit_Slice1_out1_3 <= Bit_Slice4_out1_2(1);

  Bit_Slice_out1_3 <= Bit_Slice4_out1_2(0);

  Start_out1 <= to_signed(16#1A#, 8);

  Logical_Operator4_out1_2 <= Bit_Slice2_out1_3 OR Bit_Slice1_out1_3;

  Start_1_out1 <= to_signed(16#19#, 8);

  
  Switch_out1_2 <= Start_out1 WHEN Bit_Slice_out1_3 = '0' ELSE
      Start_1_out1;

  Start_2_out1 <= to_signed(16#18#, 8);

  Start_3_out1 <= to_signed(16#17#, 8);

  Logical_Operator1_out1_3 <= Logical_Operator3_out1_2 OR Logical_Operator_out1_4;

  
  Switch2_out1 <= Start_2_out1 WHEN Bit_Slice2_out1_3 = '0' ELSE
      Start_3_out1;

  
  Switch1_out1_1 <= Switch_out1_2 WHEN Logical_Operator4_out1_2 = '0' ELSE
      Switch2_out1;

  Start_4_out1 <= to_signed(16#16#, 8);

  Start_5_out1 <= to_signed(16#15#, 8);

  
  Switch5_out1 <= Start_4_out1 WHEN Bit_Slice5_out1_3 = '0' ELSE
      Start_5_out1;

  Start_6_out1 <= to_signed(16#14#, 8);

  Start_7_out1 <= to_signed(16#13#, 8);

  
  Switch7_out1 <= Start_6_out1 WHEN Bit_Slice7_out1_2 = '0' ELSE
      Start_7_out1;

  Logical_Operator6_out1_1 <= Logical_Operator1_out1_2 OR Logical_Operator5_out1_1;

  
  Switch6_out1 <= Switch5_out1 WHEN Logical_Operator3_out1_2 = '0' ELSE
      Switch7_out1;

  
  Switch4_out1 <= Switch1_out1_1 WHEN Logical_Operator1_out1_3 = '0' ELSE
      Switch6_out1;

  Start_out1_1 <= to_signed(16#12#, 8);

  Start_1_out1_1 <= to_signed(16#11#, 8);

  
  Switch_out1_3 <= Start_out1_1 WHEN Bit_Slice_out1_2 = '0' ELSE
      Start_1_out1_1;

  Start_2_out1_1 <= to_signed(16#10#, 8);

  Start_3_out1_1 <= to_signed(16#0F#, 8);

  
  Switch2_out1_1 <= Start_2_out1_1 WHEN Bit_Slice2_out1_2 = '0' ELSE
      Start_3_out1_1;

  
  Switch1_out1_2 <= Switch_out1_3 WHEN Logical_Operator4_out1_1 = '0' ELSE
      Switch2_out1_1;

  Start_4_out1_1 <= to_signed(16#0E#, 8);

  Start_5_out1_1 <= to_signed(16#0D#, 8);

  
  Switch5_out1_1 <= Start_4_out1_1 WHEN Bit_Slice5_out1_2 = '0' ELSE
      Start_5_out1_1;

  Start_6_out1_1 <= to_signed(16#0C#, 8);

  Start_7_out1_1 <= to_signed(16#0B#, 8);

  
  Switch7_out1_1 <= Start_6_out1_1 WHEN Bit_Slice7_out1_1 = '0' ELSE
      Start_7_out1_1;

  
  Switch6_out1_1 <= Switch5_out1_1 WHEN Logical_Operator3_out1_1 = '0' ELSE
      Switch7_out1_1;

  Logical_Operator2_out1_3 <= Logical_Operator1_out1 OR Logical_Operator6_out1;

  
  Switch4_out1_1 <= Switch1_out1_2 WHEN Logical_Operator1_out1_2 = '0' ELSE
      Switch6_out1_1;

  
  Switch33_out1 <= Switch4_out1 WHEN Logical_Operator6_out1_1 = '0' ELSE
      Switch4_out1_1;

  Start_out1_2 <= to_signed(16#0A#, 8);

  Start_1_out1_2 <= to_signed(16#09#, 8);

  
  Switch_out1_4 <= Start_out1_2 WHEN Bit_Slice_out1_1 = '0' ELSE
      Start_1_out1_2;

  Start_2_out1_2 <= to_signed(16#08#, 8);

  Start_3_out1_2 <= to_signed(16#07#, 8);

  
  Switch2_out1_2 <= Start_2_out1_2 WHEN Bit_Slice2_out1_1 = '0' ELSE
      Start_3_out1_2;

  
  Switch1_out1_3 <= Switch_out1_4 WHEN Logical_Operator4_out1 = '0' ELSE
      Switch2_out1_2;

  Start_4_out1_2 <= to_signed(16#06#, 8);

  Start_5_out1_2 <= to_signed(16#05#, 8);

  
  Switch5_out1_2 <= Start_4_out1_2 WHEN Bit_Slice5_out1_1 = '0' ELSE
      Start_5_out1_2;

  Start_6_out1_2 <= to_signed(16#04#, 8);

  Start_7_out1_2 <= to_signed(16#03#, 8);

  
  Switch7_out1_2 <= Start_6_out1_2 WHEN Bit_Slice7_out1 = '0' ELSE
      Start_7_out1_2;

  
  Switch6_out1_2 <= Switch5_out1_2 WHEN Logical_Operator3_out1 = '0' ELSE
      Switch7_out1_2;

  
  Switch4_out1_2 <= Switch1_out1_3 WHEN Logical_Operator1_out1_1 = '0' ELSE
      Switch6_out1_2;

  alpha24_out1 <= to_signed(16#02#, 8);

  alpha25_out1 <= to_signed(16#01#, 8);

  
  Switch7_out1_3 <= alpha24_out1 WHEN Bit_Slice3_out1 = '0' ELSE
      alpha25_out1;

  alpha26_out1 <= to_signed(16#00#, 8);

  
  Switch1_out1_4 <= Switch7_out1_3 WHEN Bit_Slice5_out1 = '0' ELSE
      alpha26_out1;

  
  Switch2_out1_3 <= Switch4_out1_2 WHEN Logical_Operator1_out1 = '0' ELSE
      Switch1_out1_4;

  
  Switch34_out1 <= Switch33_out1 WHEN Logical_Operator2_out1_3 = '0' ELSE
      Switch2_out1_3;

  bitsll_w_abs_j_zerosig <= to_signed(16#00#, 8);

  
  bitsll_w_abs_j_selsig <= Switch34_out1 WHEN Switch34_out1 >= bitsll_w_abs_j_zerosig ELSE
      bitsll_w_abs_j_zerosig;

  dynamic_shift_zerosig <= to_signed(16#00#, 8);

  
  dynamic_shift_selsig <= bitsll_w_abs_j_selsig WHEN bitsll_w_abs_j_selsig >= dynamic_shift_zerosig ELSE
      dynamic_shift_zerosig;

  bitsll_w_abs_j_out1 <= Delay22_out1_1 sll to_integer(dynamic_shift_selsig);

  bitsra_w_abs_1_out1 <= SHIFT_RIGHT(Delay22_out1_1, 1);

  
  if_w_abs_2_1_out1 <= bitsll_w_abs_j_out1 WHEN w_abs_2_out1 = '0' ELSE
      bitsra_w_abs_1_out1;

  BitSlice1_out1 <= unsigned(if_w_abs_2_1_out1(25 DOWNTO 0));

  reinterpretcast_bitsliceget_tm_out1 <= BitSlice1_out1;

  Delay3_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1_3 <= to_unsigned(16#0000000#, 26);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay3_out1_3 <= reinterpretcast_bitsliceget_tm_out1;
      END IF;
    END IF;
  END PROCESS Delay3_3_process;


  alpha1_out1_1 <= to_signed(16#02000000#, 30);

  bitsra_w_cfType_Log2NumberOfI_out1 <= SHIFT_RIGHT(Delay25_out1_1, 13);

  alpha1_tmp1_out1 <= alpha1_out1_1 - bitsra_w_cfType_Log2NumberOfI_out1;

  Delay24_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay24_out1_2 <= to_signed(16#00000000#, 30);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay24_out1_2 <= alpha1_tmp1_out1;
      END IF;
    END IF;
  END PROCESS Delay24_2_process;


  BitSlice2_out1 <= unsigned(Delay24_out1_2(25 DOWNTO 0));

  reinterpretcast_bitsliceget_tm_out1_1 <= BitSlice2_out1;

  Delay4_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1_4 <= to_unsigned(16#0000000#, 26);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay4_out1_4 <= reinterpretcast_bitsliceget_tm_out1_1;
      END IF;
    END IF;
  END PROCESS Delay4_4_process;


  tmp_m1_tmp_m2_mul_temp <= Delay3_out1_3 * Delay4_out1_4;
  tmp_m1_tmp_m2_out1 <= tmp_m1_tmp_m2_mul_temp(51 DOWNTO 25);

  Delay14_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay14_reg(0) <= to_unsigned(16#0000000#, 27);
      Delay14_reg(1) <= to_unsigned(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay14_reg(0) <= Delay14_reg_next(0);
        Delay14_reg(1) <= Delay14_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay14_1_process;

  Delay14_out1_1 <= Delay14_reg(1);
  Delay14_reg_next(0) <= tmp_m1_tmp_m2_out1;
  Delay14_reg_next(1) <= Delay14_reg(0);

  Delay1_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg(0) <= '0';
      Delay1_reg(1) <= '0';
      Delay1_reg(2) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay1_reg(0) <= Delay1_reg_next(0);
        Delay1_reg(1) <= Delay1_reg_next(1);
        Delay1_reg(2) <= Delay1_reg_next(2);
      END IF;
    END IF;
  END PROCESS Delay1_3_process;

  Delay1_out1_3 <= Delay1_reg(2);
  Delay1_reg_next(0) <= BitSlice_out1_11;
  Delay1_reg_next(1) <= Delay1_reg(0);
  Delay1_reg_next(2) <= Delay1_reg(1);

  Log4rt10E_out1 <= to_signed(-16#3796F63#, 27);

  alphaLog4rt10E_out1 <= to_signed(16#3796F63#, 27);

  
  if_sign_1_out1_1 <= Log4rt10E_out1 WHEN Delay1_out1_3 = '0' ELSE
      alphaLog4rt10E_out1;

  Delay6_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_out1_1 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay6_out1_1 <= if_sign_1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay6_1_process;


  tmp3_Log4rt10E_cast <= signed(resize(Delay14_out1_1, 28));
  tmp3_Log4rt10E_mul_temp <= tmp3_Log4rt10E_cast * Delay6_out1_1;
  tmp3_Log4rt10E_cast_1 <= tmp3_Log4rt10E_mul_temp(53 DOWNTO 0);
  tmp3_Log4rt10E_out1 <= tmp3_Log4rt10E_cast_1(52 DOWNTO 3);

  cfType_Log2NumberOfIterations_out1 <= to_signed(16#0C#, 8);

  C_out1_3 <= to_signed(-16#01#, 8);

  
  if_w_abs_2_out1 <= Switch34_out1 WHEN w_abs_2_out1 = '0' ELSE
      C_out1_3;

  cfType_Log2NumberOfIterations_out1_1 <= cfType_Log2NumberOfIterations_out1 + if_w_abs_2_out1;

  Delay9_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_reg_1(0) <= to_signed(16#00#, 8);
      Delay9_reg_1(1) <= to_signed(16#00#, 8);
      Delay9_reg_1(2) <= to_signed(16#00#, 8);
      Delay9_reg_1(3) <= to_signed(16#00#, 8);
      Delay9_reg_1(4) <= to_signed(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay9_reg_1(0) <= Delay9_reg_next_1(0);
        Delay9_reg_1(1) <= Delay9_reg_next_1(1);
        Delay9_reg_1(2) <= Delay9_reg_next_1(2);
        Delay9_reg_1(3) <= Delay9_reg_next_1(3);
        Delay9_reg_1(4) <= Delay9_reg_next_1(4);
      END IF;
    END IF;
  END PROCESS Delay9_2_process;

  Delay9_out1_2 <= Delay9_reg_1(4);
  Delay9_reg_next_1(0) <= cfType_Log2NumberOfIterations_out1_1;
  Delay9_reg_next_1(1) <= Delay9_reg_1(0);
  Delay9_reg_next_1(2) <= Delay9_reg_1(1);
  Delay9_reg_next_1(3) <= Delay9_reg_1(2);
  Delay9_reg_next_1(4) <= Delay9_reg_1(3);

  bitsra_appx_shift_zerosig <= to_signed(16#00#, 8);

  
  bitsra_appx_shift_selsig <= Delay9_out1_2 WHEN Delay9_out1_2 >= bitsra_appx_shift_zerosig ELSE
      bitsra_appx_shift_zerosig;

  Delay8_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_reg(0) <= to_signed(0, 50);
      Delay8_reg(1) <= to_signed(0, 50);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay8_reg(0) <= Delay8_reg_next(0);
        Delay8_reg(1) <= Delay8_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay8_2_process;

  Delay8_out1_2 <= Delay8_reg(1);
  Delay8_reg_next(0) <= tmp3_Log4rt10E_out1;
  Delay8_reg_next(1) <= Delay8_reg(0);

  dynamic_shift_zerosig_1 <= to_signed(16#00#, 8);

  
  dynamic_shift_selsig_1 <= bitsra_appx_shift_selsig WHEN bitsra_appx_shift_selsig >= dynamic_shift_zerosig_1 ELSE
      dynamic_shift_zerosig_1;

  bitsra_appx_shift_out1 <= SHIFT_RIGHT(Delay8_out1_2, to_integer(dynamic_shift_selsig_1));

  Delay17_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay17_out1_1 <= to_signed(0, 50);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay17_out1_1 <= bitsra_appx_shift_out1;
      END IF;
    END IF;
  END PROCESS Delay17_1_process;


  L_tmp4_out1 <= Delay25_out1_2 + Delay17_out1_1;

  
  if_w_0_out1 <= Delay25_out1_2 WHEN Delay19_out1 = '0' ELSE
      L_tmp4_out1;

  Delay11_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_out1_1 <= to_signed(0, 50);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay11_out1_1 <= if_w_0_out1;
      END IF;
    END IF;
  END PROCESS Delay11_1_process;


  BitSlice_out1_12 <= Delay11_out1_1(49);

  
  bitget_L_L_WordLength_0_out1 <= '1' WHEN BitSlice_out1_12 = '0' ELSE
      '0';

  alpha1_out1_2 <= to_signed(-16#01#, 8);

  alpha1_out1_3 <= to_signed(16#00#, 8);

  
  if_bitget_L_L_WordLength_0_out1 <= alpha1_out1_2 WHEN bitget_L_L_WordLength_0_out1 = '0' ELSE
      alpha1_out1_3;

  Delay21_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay21_out1_1 <= to_signed(0, 58);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay21_out1_1 <= Switch_out1_1;
      END IF;
    END IF;
  END PROCESS Delay21_1_process;


  Bit_Concat1_out1_2 <= unsigned(if_bitget_L_L_WordLength_0_out1) & unsigned(Delay11_out1_1);

  reinterpretcast_bitconcat_fi_0_out1 <= signed(Bit_Concat1_out1_2);

  exp_tmp_L_out1 <= Delay21_out1_1 - reinterpretcast_bitconcat_fi_0_out1;

  Delay12_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay12_out1_2 <= to_signed(0, 58);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay12_out1_2 <= exp_tmp_L_out1;
      END IF;
    END IF;
  END PROCESS Delay12_2_process;


  BitSlice_out1_13 <= Delay12_out1_2(57);

  Delay3_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_reg_1(0) <= '0';
      Delay3_reg_1(1) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay3_reg_1(0) <= Delay3_reg_next_1(0);
        Delay3_reg_1(1) <= Delay3_reg_next_1(1);
      END IF;
    END IF;
  END PROCESS Delay3_4_process;

  Delay3_out1_4 <= Delay3_reg_1(1);
  Delay3_reg_next_1(0) <= BitSlice_out1_13;
  Delay3_reg_next_1(1) <= Delay3_reg_1(0);

  Delay13_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay13_out1_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay13_out1_1 <= Delay3_out1_4;
      END IF;
    END IF;
  END PROCESS Delay13_1_process;


  C4_out1 <= '1';

  
  if_aExponent_0_2_out1 <= Delay2_out1 WHEN alphaaExponent_0_aMantissa_out1 = '0' ELSE
      C4_out1;

  Delay6_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_reg(0) <= '0';
      Delay6_reg(1) <= '0';
      Delay6_reg(2) <= '0';
      Delay6_reg(3) <= '0';
      Delay6_reg(4) <= '0';
      Delay6_reg(5) <= '0';
      Delay6_reg(6) <= '0';
      Delay6_reg(7) <= '0';
      Delay6_reg(8) <= '0';
      Delay6_reg(9) <= '0';
      Delay6_reg(10) <= '0';
      Delay6_reg(11) <= '0';
      Delay6_reg(12) <= '0';
      Delay6_reg(13) <= '0';
      Delay6_reg(14) <= '0';
      Delay6_reg(15) <= '0';
      Delay6_reg(16) <= '0';
      Delay6_reg(17) <= '0';
      Delay6_reg(18) <= '0';
      Delay6_reg(19) <= '0';
      Delay6_reg(20) <= '0';
      Delay6_reg(21) <= '0';
      Delay6_reg(22) <= '0';
      Delay6_reg(23) <= '0';
      Delay6_reg(24) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay6_reg(0) <= Delay6_reg_next(0);
        Delay6_reg(1) <= Delay6_reg_next(1);
        Delay6_reg(2) <= Delay6_reg_next(2);
        Delay6_reg(3) <= Delay6_reg_next(3);
        Delay6_reg(4) <= Delay6_reg_next(4);
        Delay6_reg(5) <= Delay6_reg_next(5);
        Delay6_reg(6) <= Delay6_reg_next(6);
        Delay6_reg(7) <= Delay6_reg_next(7);
        Delay6_reg(8) <= Delay6_reg_next(8);
        Delay6_reg(9) <= Delay6_reg_next(9);
        Delay6_reg(10) <= Delay6_reg_next(10);
        Delay6_reg(11) <= Delay6_reg_next(11);
        Delay6_reg(12) <= Delay6_reg_next(12);
        Delay6_reg(13) <= Delay6_reg_next(13);
        Delay6_reg(14) <= Delay6_reg_next(14);
        Delay6_reg(15) <= Delay6_reg_next(15);
        Delay6_reg(16) <= Delay6_reg_next(16);
        Delay6_reg(17) <= Delay6_reg_next(17);
        Delay6_reg(18) <= Delay6_reg_next(18);
        Delay6_reg(19) <= Delay6_reg_next(19);
        Delay6_reg(20) <= Delay6_reg_next(20);
        Delay6_reg(21) <= Delay6_reg_next(21);
        Delay6_reg(22) <= Delay6_reg_next(22);
        Delay6_reg(23) <= Delay6_reg_next(23);
        Delay6_reg(24) <= Delay6_reg_next(24);
      END IF;
    END IF;
  END PROCESS Delay6_2_process;

  Delay6_out1_2 <= Delay6_reg(24);
  Delay6_reg_next(0) <= if_aExponent_0_2_out1;
  Delay6_reg_next(1) <= Delay6_reg(0);
  Delay6_reg_next(2) <= Delay6_reg(1);
  Delay6_reg_next(3) <= Delay6_reg(2);
  Delay6_reg_next(4) <= Delay6_reg(3);
  Delay6_reg_next(5) <= Delay6_reg(4);
  Delay6_reg_next(6) <= Delay6_reg(5);
  Delay6_reg_next(7) <= Delay6_reg(6);
  Delay6_reg_next(8) <= Delay6_reg(7);
  Delay6_reg_next(9) <= Delay6_reg(8);
  Delay6_reg_next(10) <= Delay6_reg(9);
  Delay6_reg_next(11) <= Delay6_reg(10);
  Delay6_reg_next(12) <= Delay6_reg(11);
  Delay6_reg_next(13) <= Delay6_reg(12);
  Delay6_reg_next(14) <= Delay6_reg(13);
  Delay6_reg_next(15) <= Delay6_reg(14);
  Delay6_reg_next(16) <= Delay6_reg(15);
  Delay6_reg_next(17) <= Delay6_reg(16);
  Delay6_reg_next(18) <= Delay6_reg(17);
  Delay6_reg_next(19) <= Delay6_reg(18);
  Delay6_reg_next(20) <= Delay6_reg(19);
  Delay6_reg_next(21) <= Delay6_reg(20);
  Delay6_reg_next(22) <= Delay6_reg(21);
  Delay6_reg_next(23) <= Delay6_reg(22);
  Delay6_reg_next(24) <= Delay6_reg(23);

  
  if_aExponent_cfType_Exponent_2_out1 <= Delay13_out1_1 WHEN Delay9_out1 = '0' ELSE
      Delay6_out1_2;

  
  Switch1_out1_5 <= Constant1_out1 WHEN Relational_Operator_relop1 = '0' ELSE
      if_aExponent_cfType_Exponent_2_out1;

  Delay3_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1_5 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay3_out1_5 <= Switch1_out1_5;
      END IF;
    END IF;
  END PROCESS Delay3_5_process;


  Constant3_out1_1 <= to_unsigned(16#00#, 8);

  alpha0_out1_2 <= '0';

  Unary_Minus_cast <= resize(Delay12_out1_2, 59);
  Unary_Minus_cast_1 <=  - (Unary_Minus_cast);
  Unary_Minus_out1 <= Unary_Minus_cast_1(57 DOWNTO 0);

  
  Switch_out1_5 <= Delay12_out1_2 WHEN BitSlice_out1_13 = '0' ELSE
      Unary_Minus_out1;

  Delay1_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_4 <= to_signed(0, 58);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay1_out1_4 <= Switch_out1_5;
      END IF;
    END IF;
  END PROCESS Delay1_4_process;


  BitSlice1_out1_1 <= unsigned(Delay1_out1_4(56 DOWNTO 0));

  Delay4_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1_5 <= to_unsigned(0, 57);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay4_out1_5 <= BitSlice1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay4_5_process;


  Bit_Slice9_out1 <= BitSlice1_out1_1(56);

  Bit_Slice8_out1 <= BitSlice1_out1_1(55);

  Logical_Operator3_out1_3 <= Bit_Slice9_out1 OR Bit_Slice8_out1;

  Bit_Slice7_out1_3 <= BitSlice1_out1_1(54 DOWNTO 47);

  Bit_Slice7_out1_4 <= Bit_Slice7_out1_3(7);

  Bit_Slice6_out1_4 <= Bit_Slice7_out1_3(6);

  Logical_Operator3_out1_4 <= Bit_Slice7_out1_4 OR Bit_Slice6_out1_4;

  Bit_Slice5_out1_4 <= Bit_Slice7_out1_3(5);

  Bit_Slice3_out1_4 <= Bit_Slice7_out1_3(4);

  Logical_Operator_out1_5 <= Bit_Slice5_out1_4 OR Bit_Slice3_out1_4;

  Logical_Operator1_out1_4 <= Logical_Operator3_out1_4 OR Logical_Operator_out1_5;

  Bit_Slice2_out1_4 <= Bit_Slice7_out1_3(3);

  Bit_Slice1_out1_4 <= Bit_Slice7_out1_3(2);

  Logical_Operator4_out1_3 <= Bit_Slice2_out1_4 OR Bit_Slice1_out1_4;

  Bit_Slice_out1_4 <= Bit_Slice7_out1_3(1);

  Bit_Slice4_out1_3 <= Bit_Slice7_out1_3(0);

  Logical_Operator2_out1_4 <= Bit_Slice_out1_4 OR Bit_Slice4_out1_3;

  Logical_Operator5_out1_2 <= Logical_Operator4_out1_3 OR Logical_Operator2_out1_4;

  Logical_Operator6_out1_2 <= Logical_Operator1_out1_4 OR Logical_Operator5_out1_2;

  Logical_Operator4_out1_4 <= Logical_Operator3_out1_3 OR Logical_Operator6_out1_2;

  Bit_Slice6_out1_5 <= BitSlice1_out1_1(46 DOWNTO 39);

  Bit_Slice7_out1_5 <= Bit_Slice6_out1_5(7);

  Bit_Slice6_out1_6 <= Bit_Slice6_out1_5(6);

  Logical_Operator3_out1_5 <= Bit_Slice7_out1_5 OR Bit_Slice6_out1_6;

  Bit_Slice5_out1_5 <= Bit_Slice6_out1_5(5);

  Bit_Slice3_out1_5 <= Bit_Slice6_out1_5(4);

  Logical_Operator_out1_6 <= Bit_Slice5_out1_5 OR Bit_Slice3_out1_5;

  Logical_Operator1_out1_5 <= Logical_Operator3_out1_5 OR Logical_Operator_out1_6;

  Bit_Slice2_out1_5 <= Bit_Slice6_out1_5(3);

  Bit_Slice1_out1_5 <= Bit_Slice6_out1_5(2);

  Logical_Operator4_out1_5 <= Bit_Slice2_out1_5 OR Bit_Slice1_out1_5;

  Bit_Slice_out1_5 <= Bit_Slice6_out1_5(1);

  Bit_Slice4_out1_4 <= Bit_Slice6_out1_5(0);

  Logical_Operator2_out1_5 <= Bit_Slice_out1_5 OR Bit_Slice4_out1_4;

  Logical_Operator5_out1_3 <= Logical_Operator4_out1_5 OR Logical_Operator2_out1_5;

  Logical_Operator6_out1_3 <= Logical_Operator1_out1_5 OR Logical_Operator5_out1_3;

  Bit_Slice5_out1_6 <= BitSlice1_out1_1(38 DOWNTO 31);

  Bit_Slice7_out1_6 <= Bit_Slice5_out1_6(7);

  Bit_Slice6_out1_7 <= Bit_Slice5_out1_6(6);

  Logical_Operator3_out1_6 <= Bit_Slice7_out1_6 OR Bit_Slice6_out1_7;

  Bit_Slice5_out1_7 <= Bit_Slice5_out1_6(5);

  Bit_Slice3_out1_6 <= Bit_Slice5_out1_6(4);

  Logical_Operator_out1_7 <= Bit_Slice5_out1_7 OR Bit_Slice3_out1_6;

  Logical_Operator1_out1_6 <= Logical_Operator3_out1_6 OR Logical_Operator_out1_7;

  Bit_Slice2_out1_6 <= Bit_Slice5_out1_6(3);

  Bit_Slice1_out1_6 <= Bit_Slice5_out1_6(2);

  Logical_Operator4_out1_6 <= Bit_Slice2_out1_6 OR Bit_Slice1_out1_6;

  Bit_Slice_out1_6 <= Bit_Slice5_out1_6(1);

  Bit_Slice4_out1_5 <= Bit_Slice5_out1_6(0);

  Logical_Operator2_out1_6 <= Bit_Slice_out1_6 OR Bit_Slice4_out1_5;

  Logical_Operator5_out1_4 <= Logical_Operator4_out1_6 OR Logical_Operator2_out1_6;

  Logical_Operator6_out1_4 <= Logical_Operator1_out1_6 OR Logical_Operator5_out1_4;

  Logical_Operator1_out1_7 <= Logical_Operator6_out1_3 OR Logical_Operator6_out1_4;

  Bit_Slice3_out1_7 <= BitSlice1_out1_1(30 DOWNTO 23);

  Bit_Slice7_out1_7 <= Bit_Slice3_out1_7(7);

  Bit_Slice6_out1_8 <= Bit_Slice3_out1_7(6);

  Logical_Operator3_out1_7 <= Bit_Slice7_out1_7 OR Bit_Slice6_out1_8;

  Bit_Slice5_out1_8 <= Bit_Slice3_out1_7(5);

  Bit_Slice3_out1_8 <= Bit_Slice3_out1_7(4);

  Logical_Operator_out1_8 <= Bit_Slice5_out1_8 OR Bit_Slice3_out1_8;

  Logical_Operator1_out1_8 <= Logical_Operator3_out1_7 OR Logical_Operator_out1_8;

  Bit_Slice2_out1_7 <= Bit_Slice3_out1_7(3);

  Bit_Slice1_out1_7 <= Bit_Slice3_out1_7(2);

  Logical_Operator4_out1_7 <= Bit_Slice2_out1_7 OR Bit_Slice1_out1_7;

  Bit_Slice_out1_7 <= Bit_Slice3_out1_7(1);

  Bit_Slice4_out1_6 <= Bit_Slice3_out1_7(0);

  Logical_Operator2_out1_7 <= Bit_Slice_out1_7 OR Bit_Slice4_out1_6;

  Logical_Operator5_out1_5 <= Logical_Operator4_out1_7 OR Logical_Operator2_out1_7;

  Logical_Operator6_out1_5 <= Logical_Operator1_out1_8 OR Logical_Operator5_out1_5;

  Bit_Slice2_out1_8 <= BitSlice1_out1_1(22 DOWNTO 15);

  Bit_Slice7_out1_8 <= Bit_Slice2_out1_8(7);

  Bit_Slice6_out1_9 <= Bit_Slice2_out1_8(6);

  Logical_Operator3_out1_8 <= Bit_Slice7_out1_8 OR Bit_Slice6_out1_9;

  Bit_Slice5_out1_9 <= Bit_Slice2_out1_8(5);

  Bit_Slice3_out1_9 <= Bit_Slice2_out1_8(4);

  Logical_Operator_out1_9 <= Bit_Slice5_out1_9 OR Bit_Slice3_out1_9;

  Logical_Operator1_out1_9 <= Logical_Operator3_out1_8 OR Logical_Operator_out1_9;

  Bit_Slice2_out1_9 <= Bit_Slice2_out1_8(3);

  Bit_Slice1_out1_8 <= Bit_Slice2_out1_8(2);

  Logical_Operator4_out1_8 <= Bit_Slice2_out1_9 OR Bit_Slice1_out1_8;

  Bit_Slice_out1_8 <= Bit_Slice2_out1_8(1);

  Bit_Slice4_out1_7 <= Bit_Slice2_out1_8(0);

  Logical_Operator2_out1_8 <= Bit_Slice_out1_8 OR Bit_Slice4_out1_7;

  Logical_Operator5_out1_6 <= Logical_Operator4_out1_8 OR Logical_Operator2_out1_8;

  Logical_Operator6_out1_6 <= Logical_Operator1_out1_9 OR Logical_Operator5_out1_6;

  Bit_Slice1_out1_9 <= BitSlice1_out1_1(14 DOWNTO 7);

  Bit_Slice7_out1_9 <= Bit_Slice1_out1_9(7);

  Bit_Slice6_out1_10 <= Bit_Slice1_out1_9(6);

  Logical_Operator3_out1_9 <= Bit_Slice7_out1_9 OR Bit_Slice6_out1_10;

  Bit_Slice5_out1_10 <= Bit_Slice1_out1_9(5);

  Bit_Slice3_out1_10 <= Bit_Slice1_out1_9(4);

  Logical_Operator_out1_10 <= Bit_Slice5_out1_10 OR Bit_Slice3_out1_10;

  Logical_Operator1_out1_10 <= Logical_Operator3_out1_9 OR Logical_Operator_out1_10;

  Bit_Slice2_out1_10 <= Bit_Slice1_out1_9(3);

  Bit_Slice1_out1_10 <= Bit_Slice1_out1_9(2);

  Logical_Operator4_out1_9 <= Bit_Slice2_out1_10 OR Bit_Slice1_out1_10;

  Bit_Slice_out1_9 <= Bit_Slice1_out1_9(1);

  Bit_Slice4_out1_8 <= Bit_Slice1_out1_9(0);

  Logical_Operator2_out1_9 <= Bit_Slice_out1_9 OR Bit_Slice4_out1_8;

  Logical_Operator5_out1_7 <= Logical_Operator4_out1_9 OR Logical_Operator2_out1_9;

  Bit_Slice4_out1_9 <= BitSlice1_out1_1(6 DOWNTO 0);

  Bit_Slice7_out1_10 <= Bit_Slice4_out1_9(6);

  Bit_Slice6_out1_11 <= Bit_Slice4_out1_9(5);

  Logical_Operator3_out1_10 <= Bit_Slice7_out1_10 OR Bit_Slice6_out1_11;

  Bit_Slice5_out1_11 <= Bit_Slice4_out1_9(4);

  Bit_Slice3_out1_11 <= Bit_Slice4_out1_9(3);

  Logical_Operator_out1_11 <= Bit_Slice5_out1_11 OR Bit_Slice3_out1_11;

  Bit_Slice2_out1_11 <= Bit_Slice4_out1_9(2);

  Bit_Slice1_out1_11 <= Bit_Slice4_out1_9(1);

  Bit_Slice_out1_10 <= Bit_Slice4_out1_9(0);

  Start_out1_3 <= to_signed(16#39#, 8);

  Logical_Operator4_out1_10 <= Bit_Slice2_out1_11 OR Bit_Slice1_out1_11;

  Start_1_out1_3 <= to_signed(16#38#, 8);

  
  Switch_out1_6 <= Start_out1_3 WHEN Bit_Slice_out1_10 = '0' ELSE
      Start_1_out1_3;

  Start_2_out1_3 <= to_signed(16#37#, 8);

  Start_3_out1_3 <= to_signed(16#36#, 8);

  Logical_Operator1_out1_11 <= Logical_Operator3_out1_10 OR Logical_Operator_out1_11;

  
  Switch2_out1_4 <= Start_2_out1_3 WHEN Bit_Slice2_out1_11 = '0' ELSE
      Start_3_out1_3;

  
  Switch1_out1_6 <= Switch_out1_6 WHEN Logical_Operator4_out1_10 = '0' ELSE
      Switch2_out1_4;

  Start_4_out1_3 <= to_signed(16#35#, 8);

  Start_5_out1_3 <= to_signed(16#34#, 8);

  
  Switch5_out1_3 <= Start_4_out1_3 WHEN Bit_Slice5_out1_11 = '0' ELSE
      Start_5_out1_3;

  Start_6_out1_3 <= to_signed(16#33#, 8);

  Start_7_out1_3 <= to_signed(16#32#, 8);

  
  Switch7_out1_4 <= Start_6_out1_3 WHEN Bit_Slice7_out1_10 = '0' ELSE
      Start_7_out1_3;

  Logical_Operator6_out1_7 <= Logical_Operator1_out1_10 OR Logical_Operator5_out1_7;

  
  Switch6_out1_3 <= Switch5_out1_3 WHEN Logical_Operator3_out1_10 = '0' ELSE
      Switch7_out1_4;

  
  Switch4_out1_3 <= Switch1_out1_6 WHEN Logical_Operator1_out1_11 = '0' ELSE
      Switch6_out1_3;

  Start_out1_4 <= to_signed(16#31#, 8);

  Start_1_out1_4 <= to_signed(16#30#, 8);

  
  Switch_out1_7 <= Start_out1_4 WHEN Bit_Slice_out1_9 = '0' ELSE
      Start_1_out1_4;

  Start_2_out1_4 <= to_signed(16#2F#, 8);

  Start_3_out1_4 <= to_signed(16#2E#, 8);

  
  Switch2_out1_5 <= Start_2_out1_4 WHEN Bit_Slice2_out1_10 = '0' ELSE
      Start_3_out1_4;

  
  Switch1_out1_7 <= Switch_out1_7 WHEN Logical_Operator4_out1_9 = '0' ELSE
      Switch2_out1_5;

  Start_4_out1_4 <= to_signed(16#2D#, 8);

  Start_5_out1_4 <= to_signed(16#2C#, 8);

  
  Switch5_out1_4 <= Start_4_out1_4 WHEN Bit_Slice5_out1_10 = '0' ELSE
      Start_5_out1_4;

  Start_6_out1_4 <= to_signed(16#2B#, 8);

  Start_7_out1_4 <= to_signed(16#2A#, 8);

  
  Switch7_out1_5 <= Start_6_out1_4 WHEN Bit_Slice7_out1_9 = '0' ELSE
      Start_7_out1_4;

  
  Switch6_out1_4 <= Switch5_out1_4 WHEN Logical_Operator3_out1_9 = '0' ELSE
      Switch7_out1_5;

  Logical_Operator2_out1_10 <= Logical_Operator6_out1_5 OR Logical_Operator6_out1_6;

  
  Switch4_out1_4 <= Switch1_out1_7 WHEN Logical_Operator1_out1_10 = '0' ELSE
      Switch6_out1_4;

  
  Switch33_out1_1 <= Switch4_out1_3 WHEN Logical_Operator6_out1_7 = '0' ELSE
      Switch4_out1_4;

  Start_out1_5 <= to_signed(16#29#, 8);

  Start_1_out1_5 <= to_signed(16#28#, 8);

  
  Switch_out1_8 <= Start_out1_5 WHEN Bit_Slice_out1_8 = '0' ELSE
      Start_1_out1_5;

  Start_2_out1_5 <= to_signed(16#27#, 8);

  Start_3_out1_5 <= to_signed(16#26#, 8);

  
  Switch2_out1_6 <= Start_2_out1_5 WHEN Bit_Slice2_out1_9 = '0' ELSE
      Start_3_out1_5;

  
  Switch1_out1_8 <= Switch_out1_8 WHEN Logical_Operator4_out1_8 = '0' ELSE
      Switch2_out1_6;

  Start_4_out1_5 <= to_signed(16#25#, 8);

  Start_5_out1_5 <= to_signed(16#24#, 8);

  
  Switch5_out1_5 <= Start_4_out1_5 WHEN Bit_Slice5_out1_9 = '0' ELSE
      Start_5_out1_5;

  Start_6_out1_5 <= to_signed(16#23#, 8);

  Start_7_out1_5 <= to_signed(16#22#, 8);

  
  Switch7_out1_6 <= Start_6_out1_5 WHEN Bit_Slice7_out1_8 = '0' ELSE
      Start_7_out1_5;

  
  Switch6_out1_5 <= Switch5_out1_5 WHEN Logical_Operator3_out1_8 = '0' ELSE
      Switch7_out1_6;

  
  Switch4_out1_5 <= Switch1_out1_8 WHEN Logical_Operator1_out1_9 = '0' ELSE
      Switch6_out1_5;

  Start_out1_6 <= to_signed(16#21#, 8);

  Start_1_out1_6 <= to_signed(16#20#, 8);

  
  Switch_out1_9 <= Start_out1_6 WHEN Bit_Slice_out1_7 = '0' ELSE
      Start_1_out1_6;

  Start_2_out1_6 <= to_signed(16#1F#, 8);

  Start_3_out1_6 <= to_signed(16#1E#, 8);

  
  Switch2_out1_7 <= Start_2_out1_6 WHEN Bit_Slice2_out1_7 = '0' ELSE
      Start_3_out1_6;

  
  Switch1_out1_9 <= Switch_out1_9 WHEN Logical_Operator4_out1_7 = '0' ELSE
      Switch2_out1_7;

  Start_4_out1_6 <= to_signed(16#1D#, 8);

  Start_5_out1_6 <= to_signed(16#1C#, 8);

  
  Switch5_out1_6 <= Start_4_out1_6 WHEN Bit_Slice5_out1_8 = '0' ELSE
      Start_5_out1_6;

  Start_6_out1_6 <= to_signed(16#1B#, 8);

  Start_7_out1_6 <= to_signed(16#1A#, 8);

  
  Switch7_out1_7 <= Start_6_out1_6 WHEN Bit_Slice7_out1_7 = '0' ELSE
      Start_7_out1_6;

  
  Switch6_out1_6 <= Switch5_out1_6 WHEN Logical_Operator3_out1_7 = '0' ELSE
      Switch7_out1_7;

  
  Switch4_out1_6 <= Switch1_out1_9 WHEN Logical_Operator1_out1_8 = '0' ELSE
      Switch6_out1_6;

  Logical_Operator5_out1_8 <= Logical_Operator4_out1_4 OR Logical_Operator1_out1_7;

  
  Switch2_out1_8 <= Switch4_out1_5 WHEN Logical_Operator6_out1_5 = '0' ELSE
      Switch4_out1_6;

  
  Switch34_out1_1 <= Switch33_out1_1 WHEN Logical_Operator2_out1_10 = '0' ELSE
      Switch2_out1_8;

  Start_out1_7 <= to_signed(16#19#, 8);

  Start_1_out1_7 <= to_signed(16#18#, 8);

  
  Switch_out1_10 <= Start_out1_7 WHEN Bit_Slice_out1_6 = '0' ELSE
      Start_1_out1_7;

  Start_2_out1_7 <= to_signed(16#17#, 8);

  Start_3_out1_7 <= to_signed(16#16#, 8);

  
  Switch2_out1_9 <= Start_2_out1_7 WHEN Bit_Slice2_out1_6 = '0' ELSE
      Start_3_out1_7;

  
  Switch1_out1_10 <= Switch_out1_10 WHEN Logical_Operator4_out1_6 = '0' ELSE
      Switch2_out1_9;

  Start_4_out1_7 <= to_signed(16#15#, 8);

  Start_5_out1_7 <= to_signed(16#14#, 8);

  
  Switch5_out1_7 <= Start_4_out1_7 WHEN Bit_Slice5_out1_7 = '0' ELSE
      Start_5_out1_7;

  Start_6_out1_7 <= to_signed(16#13#, 8);

  Start_7_out1_7 <= to_signed(16#12#, 8);

  
  Switch7_out1_8 <= Start_6_out1_7 WHEN Bit_Slice7_out1_6 = '0' ELSE
      Start_7_out1_7;

  
  Switch6_out1_7 <= Switch5_out1_7 WHEN Logical_Operator3_out1_6 = '0' ELSE
      Switch7_out1_8;

  
  Switch4_out1_7 <= Switch1_out1_10 WHEN Logical_Operator1_out1_6 = '0' ELSE
      Switch6_out1_7;

  Start_out1_8 <= to_signed(16#11#, 8);

  Start_1_out1_8 <= to_signed(16#10#, 8);

  
  Switch_out1_11 <= Start_out1_8 WHEN Bit_Slice_out1_5 = '0' ELSE
      Start_1_out1_8;

  Start_2_out1_8 <= to_signed(16#0F#, 8);

  Start_3_out1_8 <= to_signed(16#0E#, 8);

  
  Switch2_out1_10 <= Start_2_out1_8 WHEN Bit_Slice2_out1_5 = '0' ELSE
      Start_3_out1_8;

  
  Switch1_out1_11 <= Switch_out1_11 WHEN Logical_Operator4_out1_5 = '0' ELSE
      Switch2_out1_10;

  Start_4_out1_8 <= to_signed(16#0D#, 8);

  Start_5_out1_8 <= to_signed(16#0C#, 8);

  
  Switch5_out1_8 <= Start_4_out1_8 WHEN Bit_Slice5_out1_5 = '0' ELSE
      Start_5_out1_8;

  Start_6_out1_8 <= to_signed(16#0B#, 8);

  Start_7_out1_8 <= to_signed(16#0A#, 8);

  
  Switch7_out1_9 <= Start_6_out1_8 WHEN Bit_Slice7_out1_5 = '0' ELSE
      Start_7_out1_8;

  
  Switch6_out1_8 <= Switch5_out1_8 WHEN Logical_Operator3_out1_5 = '0' ELSE
      Switch7_out1_9;

  
  Switch4_out1_8 <= Switch1_out1_11 WHEN Logical_Operator1_out1_5 = '0' ELSE
      Switch6_out1_8;

  
  Switch1_out1_12 <= Switch4_out1_7 WHEN Logical_Operator6_out1_3 = '0' ELSE
      Switch4_out1_8;

  Start_out1_9 <= to_signed(16#09#, 8);

  Start_1_out1_9 <= to_signed(16#08#, 8);

  
  Switch_out1_12 <= Start_out1_9 WHEN Bit_Slice_out1_4 = '0' ELSE
      Start_1_out1_9;

  Start_2_out1_9 <= to_signed(16#07#, 8);

  Start_3_out1_9 <= to_signed(16#06#, 8);

  
  Switch2_out1_11 <= Start_2_out1_9 WHEN Bit_Slice2_out1_4 = '0' ELSE
      Start_3_out1_9;

  
  Switch1_out1_13 <= Switch_out1_12 WHEN Logical_Operator4_out1_3 = '0' ELSE
      Switch2_out1_11;

  Start_4_out1_9 <= to_signed(16#05#, 8);

  Start_5_out1_9 <= to_signed(16#04#, 8);

  
  Switch5_out1_9 <= Start_4_out1_9 WHEN Bit_Slice5_out1_4 = '0' ELSE
      Start_5_out1_9;

  Start_6_out1_9 <= to_signed(16#03#, 8);

  Start_7_out1_9 <= to_signed(16#02#, 8);

  
  Switch7_out1_10 <= Start_6_out1_9 WHEN Bit_Slice7_out1_4 = '0' ELSE
      Start_7_out1_9;

  
  Switch6_out1_9 <= Switch5_out1_9 WHEN Logical_Operator3_out1_4 = '0' ELSE
      Switch7_out1_10;

  
  Switch4_out1_9 <= Switch1_out1_13 WHEN Logical_Operator1_out1_4 = '0' ELSE
      Switch6_out1_9;

  alpha56_out1 <= to_signed(16#01#, 8);

  alpha57_out1 <= to_signed(16#00#, 8);

  
  Switch7_out1_11 <= alpha56_out1 WHEN Bit_Slice9_out1 = '0' ELSE
      alpha57_out1;

  
  Switch3_out1 <= Switch4_out1_9 WHEN Logical_Operator3_out1_3 = '0' ELSE
      Switch7_out1_11;

  
  Switch4_out1_10 <= Switch1_out1_12 WHEN Logical_Operator4_out1_4 = '0' ELSE
      Switch3_out1;

  
  Switch5_out1_10 <= Switch34_out1_1 WHEN Logical_Operator5_out1_8 = '0' ELSE
      Switch4_out1_10;

  DTC_out1_2 <= unsigned(Switch5_out1_10);

  Delay5_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1_2 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay5_out1_2 <= DTC_out1_2;
      END IF;
    END IF;
  END PROCESS Delay5_2_process;


  bitsll_Sum_tmp1_out1 <= Delay4_out1_5 sll to_integer(Delay5_out1_2);

  BitSlice2_out1_1 <= bitsll_Sum_tmp1_out1(55 DOWNTO 32);

  Delay18_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay18_out1_2 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay18_out1_2 <= BitSlice2_out1_1;
      END IF;
    END IF;
  END PROCESS Delay18_2_process;


  Bit_Concat_out1_12 <= alpha0_out1_2 & Delay18_out1_2;

  BitSlice1_out1_2 <= Bit_Concat_out1_12(1);

  BitSlice_out1_14 <= Bit_Concat_out1_12(0);

  Delay1_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg_1(0) <= '0';
      Delay1_reg_1(1) <= '0';
      Delay1_reg_1(2) <= '0';
      Delay1_reg_1(3) <= '0';
      Delay1_reg_1(4) <= '0';
      Delay1_reg_1(5) <= '0';
      Delay1_reg_1(6) <= '0';
      Delay1_reg_1(7) <= '0';
      Delay1_reg_1(8) <= '0';
      Delay1_reg_1(9) <= '0';
      Delay1_reg_1(10) <= '0';
      Delay1_reg_1(11) <= '0';
      Delay1_reg_1(12) <= '0';
      Delay1_reg_1(13) <= '0';
      Delay1_reg_1(14) <= '0';
      Delay1_reg_1(15) <= '0';
      Delay1_reg_1(16) <= '0';
      Delay1_reg_1(17) <= '0';
      Delay1_reg_1(18) <= '0';
      Delay1_reg_1(19) <= '0';
      Delay1_reg_1(20) <= '0';
      Delay1_reg_1(21) <= '0';
      Delay1_reg_1(22) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay1_reg_1(0) <= Delay1_reg_next_1(0);
        Delay1_reg_1(1) <= Delay1_reg_next_1(1);
        Delay1_reg_1(2) <= Delay1_reg_next_1(2);
        Delay1_reg_1(3) <= Delay1_reg_next_1(3);
        Delay1_reg_1(4) <= Delay1_reg_next_1(4);
        Delay1_reg_1(5) <= Delay1_reg_next_1(5);
        Delay1_reg_1(6) <= Delay1_reg_next_1(6);
        Delay1_reg_1(7) <= Delay1_reg_next_1(7);
        Delay1_reg_1(8) <= Delay1_reg_next_1(8);
        Delay1_reg_1(9) <= Delay1_reg_next_1(9);
        Delay1_reg_1(10) <= Delay1_reg_next_1(10);
        Delay1_reg_1(11) <= Delay1_reg_next_1(11);
        Delay1_reg_1(12) <= Delay1_reg_next_1(12);
        Delay1_reg_1(13) <= Delay1_reg_next_1(13);
        Delay1_reg_1(14) <= Delay1_reg_next_1(14);
        Delay1_reg_1(15) <= Delay1_reg_next_1(15);
        Delay1_reg_1(16) <= Delay1_reg_next_1(16);
        Delay1_reg_1(17) <= Delay1_reg_next_1(17);
        Delay1_reg_1(18) <= Delay1_reg_next_1(18);
        Delay1_reg_1(19) <= Delay1_reg_next_1(19);
        Delay1_reg_1(20) <= Delay1_reg_next_1(20);
        Delay1_reg_1(21) <= Delay1_reg_next_1(21);
        Delay1_reg_1(22) <= Delay1_reg_next_1(22);
      END IF;
    END IF;
  END PROCESS Delay1_5_process;

  Delay1_out1_5 <= Delay1_reg_1(22);
  Delay1_reg_next_1(0) <= bitsliceget_mant_norm_mant_no_out1;
  Delay1_reg_next_1(1) <= Delay1_reg_1(0);
  Delay1_reg_next_1(2) <= Delay1_reg_1(1);
  Delay1_reg_next_1(3) <= Delay1_reg_1(2);
  Delay1_reg_next_1(4) <= Delay1_reg_1(3);
  Delay1_reg_next_1(5) <= Delay1_reg_1(4);
  Delay1_reg_next_1(6) <= Delay1_reg_1(5);
  Delay1_reg_next_1(7) <= Delay1_reg_1(6);
  Delay1_reg_next_1(8) <= Delay1_reg_1(7);
  Delay1_reg_next_1(9) <= Delay1_reg_1(8);
  Delay1_reg_next_1(10) <= Delay1_reg_1(9);
  Delay1_reg_next_1(11) <= Delay1_reg_1(10);
  Delay1_reg_next_1(12) <= Delay1_reg_1(11);
  Delay1_reg_next_1(13) <= Delay1_reg_1(12);
  Delay1_reg_next_1(14) <= Delay1_reg_1(13);
  Delay1_reg_next_1(15) <= Delay1_reg_1(14);
  Delay1_reg_next_1(16) <= Delay1_reg_1(15);
  Delay1_reg_next_1(17) <= Delay1_reg_1(16);
  Delay1_reg_next_1(18) <= Delay1_reg_1(17);
  Delay1_reg_next_1(19) <= Delay1_reg_1(18);
  Delay1_reg_next_1(20) <= Delay1_reg_1(19);
  Delay1_reg_next_1(21) <= Delay1_reg_1(20);
  Delay1_reg_next_1(22) <= Delay1_reg_1(21);

  alphabitget_Mant_tmp_2_0_out1 <= BitSlice1_out1_2 OR Delay1_out1_5;

  alphabitget_Mant_tmp_1_0_out1 <= BitSlice_out1_14 AND alphabitget_Mant_tmp_2_0_out1;

  cast_2_like_Mant_tmp_out1 <= to_unsigned(16#0000002#, 25);

  Mant_tmp_cast_2_like_Man_out1 <= resize(resize(Bit_Concat_out1_12, 32) + resize(cast_2_like_Mant_tmp_out1, 32), 25);

  
  if_bitget_Mant_tmp_1_0_out1 <= Bit_Concat_out1_12 WHEN alphabitget_Mant_tmp_1_0_out1 = '0' ELSE
      Mant_tmp_cast_2_like_Man_out1;

  BitSlice2_out1_2 <= if_bitget_Mant_tmp_1_0_out1(24);

  
  Compare_To_Constant_out1_1 <= '1' WHEN Delay5_out1_2 = to_unsigned(16#39#, 8) ELSE
      '0';

  alpha80_out1 <= to_unsigned(16#86#, 8);

  alpha80_cast_pos_like_exp_out_out1 <= alpha80_out1 - Delay5_out1_2;

  alpha80_1_out1 <= to_unsigned(16#00#, 8);

  
  Switch1_out1_14 <= alpha80_cast_pos_like_exp_out_out1 WHEN Compare_To_Constant_out1_1 = '0' ELSE
      alpha80_1_out1;

  Delay17_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay17_out1_2 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay17_out1_2 <= Switch1_out1_14;
      END IF;
    END IF;
  END PROCESS Delay17_2_process;


  cast_1_like_Exp_out1 <= to_unsigned(16#01#, 8);

  Exp_cast_1_like_Exp_out1 <= Delay17_out1_2 + cast_1_like_Exp_out1;

  
  if_bitget_Mant_tmp_Mant_tmp_Wor_out1 <= Delay17_out1_2 WHEN BitSlice2_out1_2 = '0' ELSE
      Exp_cast_1_like_Exp_out1;

  C_out1_4 <= to_unsigned(16#FF#, 8);

  
  if_aSign_1_out1 <= Delay1_out1 WHEN Delay2_out1 = '0' ELSE
      C_out1_4;

  C2_out1 <= to_unsigned(16#FF#, 8);

  
  if_aExponent_0_out1 <= if_aSign_1_out1 WHEN alphaaExponent_0_aMantissa_out1 = '0' ELSE
      C2_out1;

  Delay7_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_reg(0) <= to_unsigned(16#00#, 8);
      Delay7_reg(1) <= to_unsigned(16#00#, 8);
      Delay7_reg(2) <= to_unsigned(16#00#, 8);
      Delay7_reg(3) <= to_unsigned(16#00#, 8);
      Delay7_reg(4) <= to_unsigned(16#00#, 8);
      Delay7_reg(5) <= to_unsigned(16#00#, 8);
      Delay7_reg(6) <= to_unsigned(16#00#, 8);
      Delay7_reg(7) <= to_unsigned(16#00#, 8);
      Delay7_reg(8) <= to_unsigned(16#00#, 8);
      Delay7_reg(9) <= to_unsigned(16#00#, 8);
      Delay7_reg(10) <= to_unsigned(16#00#, 8);
      Delay7_reg(11) <= to_unsigned(16#00#, 8);
      Delay7_reg(12) <= to_unsigned(16#00#, 8);
      Delay7_reg(13) <= to_unsigned(16#00#, 8);
      Delay7_reg(14) <= to_unsigned(16#00#, 8);
      Delay7_reg(15) <= to_unsigned(16#00#, 8);
      Delay7_reg(16) <= to_unsigned(16#00#, 8);
      Delay7_reg(17) <= to_unsigned(16#00#, 8);
      Delay7_reg(18) <= to_unsigned(16#00#, 8);
      Delay7_reg(19) <= to_unsigned(16#00#, 8);
      Delay7_reg(20) <= to_unsigned(16#00#, 8);
      Delay7_reg(21) <= to_unsigned(16#00#, 8);
      Delay7_reg(22) <= to_unsigned(16#00#, 8);
      Delay7_reg(23) <= to_unsigned(16#00#, 8);
      Delay7_reg(24) <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay7_reg(0) <= Delay7_reg_next(0);
        Delay7_reg(1) <= Delay7_reg_next(1);
        Delay7_reg(2) <= Delay7_reg_next(2);
        Delay7_reg(3) <= Delay7_reg_next(3);
        Delay7_reg(4) <= Delay7_reg_next(4);
        Delay7_reg(5) <= Delay7_reg_next(5);
        Delay7_reg(6) <= Delay7_reg_next(6);
        Delay7_reg(7) <= Delay7_reg_next(7);
        Delay7_reg(8) <= Delay7_reg_next(8);
        Delay7_reg(9) <= Delay7_reg_next(9);
        Delay7_reg(10) <= Delay7_reg_next(10);
        Delay7_reg(11) <= Delay7_reg_next(11);
        Delay7_reg(12) <= Delay7_reg_next(12);
        Delay7_reg(13) <= Delay7_reg_next(13);
        Delay7_reg(14) <= Delay7_reg_next(14);
        Delay7_reg(15) <= Delay7_reg_next(15);
        Delay7_reg(16) <= Delay7_reg_next(16);
        Delay7_reg(17) <= Delay7_reg_next(17);
        Delay7_reg(18) <= Delay7_reg_next(18);
        Delay7_reg(19) <= Delay7_reg_next(19);
        Delay7_reg(20) <= Delay7_reg_next(20);
        Delay7_reg(21) <= Delay7_reg_next(21);
        Delay7_reg(22) <= Delay7_reg_next(22);
        Delay7_reg(23) <= Delay7_reg_next(23);
        Delay7_reg(24) <= Delay7_reg_next(24);
      END IF;
    END IF;
  END PROCESS Delay7_1_process;

  Delay7_out1_1 <= Delay7_reg(24);
  Delay7_reg_next(0) <= if_aExponent_0_out1;
  Delay7_reg_next(1) <= Delay7_reg(0);
  Delay7_reg_next(2) <= Delay7_reg(1);
  Delay7_reg_next(3) <= Delay7_reg(2);
  Delay7_reg_next(4) <= Delay7_reg(3);
  Delay7_reg_next(5) <= Delay7_reg(4);
  Delay7_reg_next(6) <= Delay7_reg(5);
  Delay7_reg_next(7) <= Delay7_reg(6);
  Delay7_reg_next(8) <= Delay7_reg(7);
  Delay7_reg_next(9) <= Delay7_reg(8);
  Delay7_reg_next(10) <= Delay7_reg(9);
  Delay7_reg_next(11) <= Delay7_reg(10);
  Delay7_reg_next(12) <= Delay7_reg(11);
  Delay7_reg_next(13) <= Delay7_reg(12);
  Delay7_reg_next(14) <= Delay7_reg(13);
  Delay7_reg_next(15) <= Delay7_reg(14);
  Delay7_reg_next(16) <= Delay7_reg(15);
  Delay7_reg_next(17) <= Delay7_reg(16);
  Delay7_reg_next(18) <= Delay7_reg(17);
  Delay7_reg_next(19) <= Delay7_reg(18);
  Delay7_reg_next(20) <= Delay7_reg(19);
  Delay7_reg_next(21) <= Delay7_reg(20);
  Delay7_reg_next(22) <= Delay7_reg(21);
  Delay7_reg_next(23) <= Delay7_reg(22);
  Delay7_reg_next(24) <= Delay7_reg(23);

  
  if_aExponent_cfType_Exponent_out1 <= if_bitget_Mant_tmp_Mant_tmp_Wor_out1 WHEN Delay9_out1 = '0' ELSE
      Delay7_out1_1;

  
  Switch6_out1_10 <= Constant3_out1_1 WHEN Relational_Operator_relop1 = '0' ELSE
      if_aExponent_cfType_Exponent_out1;

  Delay4_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1_6 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay4_out1_6 <= Switch6_out1_10;
      END IF;
    END IF;
  END PROCESS Delay4_6_process;


  Constant2_out1_1 <= to_unsigned(16#000000#, 23);

  
  Compare_To_Zero_out1_1 <= '1' WHEN if_bitget_Mant_tmp_Mant_tmp_Wor_out1 = to_unsigned(16#00#, 8) ELSE
      '0';

  Logical_Operator_out1_12 <= Compare_To_Zero_out1_1 OR BitSlice2_out1_2;

  BitSlice3_out1 <= if_bitget_Mant_tmp_1_0_out1(23 DOWNTO 1);

  C_out1_5 <= to_unsigned(16#000000#, 23);

  
  if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 <= BitSlice3_out1 WHEN Logical_Operator_out1_12 = '0' ELSE
      C_out1_5;

  C1_out1 <= to_unsigned(16#400000#, 23);

  
  if_aSign_1_1_out1 <= Switch_out1 WHEN Delay2_out1 = '0' ELSE
      C1_out1;

  C3_out1 <= to_unsigned(16#000000#, 23);

  
  if_aExponent_0_1_out1 <= if_aSign_1_1_out1 WHEN alphaaExponent_0_aMantissa_out1 = '0' ELSE
      C3_out1;

  Delay8_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_reg_1(0) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(1) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(2) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(3) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(4) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(5) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(6) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(7) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(8) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(9) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(10) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(11) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(12) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(13) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(14) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(15) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(16) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(17) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(18) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(19) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(20) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(21) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(22) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(23) <= to_unsigned(16#000000#, 23);
      Delay8_reg_1(24) <= to_unsigned(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay8_reg_1(0) <= Delay8_reg_next_1(0);
        Delay8_reg_1(1) <= Delay8_reg_next_1(1);
        Delay8_reg_1(2) <= Delay8_reg_next_1(2);
        Delay8_reg_1(3) <= Delay8_reg_next_1(3);
        Delay8_reg_1(4) <= Delay8_reg_next_1(4);
        Delay8_reg_1(5) <= Delay8_reg_next_1(5);
        Delay8_reg_1(6) <= Delay8_reg_next_1(6);
        Delay8_reg_1(7) <= Delay8_reg_next_1(7);
        Delay8_reg_1(8) <= Delay8_reg_next_1(8);
        Delay8_reg_1(9) <= Delay8_reg_next_1(9);
        Delay8_reg_1(10) <= Delay8_reg_next_1(10);
        Delay8_reg_1(11) <= Delay8_reg_next_1(11);
        Delay8_reg_1(12) <= Delay8_reg_next_1(12);
        Delay8_reg_1(13) <= Delay8_reg_next_1(13);
        Delay8_reg_1(14) <= Delay8_reg_next_1(14);
        Delay8_reg_1(15) <= Delay8_reg_next_1(15);
        Delay8_reg_1(16) <= Delay8_reg_next_1(16);
        Delay8_reg_1(17) <= Delay8_reg_next_1(17);
        Delay8_reg_1(18) <= Delay8_reg_next_1(18);
        Delay8_reg_1(19) <= Delay8_reg_next_1(19);
        Delay8_reg_1(20) <= Delay8_reg_next_1(20);
        Delay8_reg_1(21) <= Delay8_reg_next_1(21);
        Delay8_reg_1(22) <= Delay8_reg_next_1(22);
        Delay8_reg_1(23) <= Delay8_reg_next_1(23);
        Delay8_reg_1(24) <= Delay8_reg_next_1(24);
      END IF;
    END IF;
  END PROCESS Delay8_3_process;

  Delay8_out1_3 <= Delay8_reg_1(24);
  Delay8_reg_next_1(0) <= if_aExponent_0_1_out1;
  Delay8_reg_next_1(1) <= Delay8_reg_1(0);
  Delay8_reg_next_1(2) <= Delay8_reg_1(1);
  Delay8_reg_next_1(3) <= Delay8_reg_1(2);
  Delay8_reg_next_1(4) <= Delay8_reg_1(3);
  Delay8_reg_next_1(5) <= Delay8_reg_1(4);
  Delay8_reg_next_1(6) <= Delay8_reg_1(5);
  Delay8_reg_next_1(7) <= Delay8_reg_1(6);
  Delay8_reg_next_1(8) <= Delay8_reg_1(7);
  Delay8_reg_next_1(9) <= Delay8_reg_1(8);
  Delay8_reg_next_1(10) <= Delay8_reg_1(9);
  Delay8_reg_next_1(11) <= Delay8_reg_1(10);
  Delay8_reg_next_1(12) <= Delay8_reg_1(11);
  Delay8_reg_next_1(13) <= Delay8_reg_1(12);
  Delay8_reg_next_1(14) <= Delay8_reg_1(13);
  Delay8_reg_next_1(15) <= Delay8_reg_1(14);
  Delay8_reg_next_1(16) <= Delay8_reg_1(15);
  Delay8_reg_next_1(17) <= Delay8_reg_1(16);
  Delay8_reg_next_1(18) <= Delay8_reg_1(17);
  Delay8_reg_next_1(19) <= Delay8_reg_1(18);
  Delay8_reg_next_1(20) <= Delay8_reg_1(19);
  Delay8_reg_next_1(21) <= Delay8_reg_1(20);
  Delay8_reg_next_1(22) <= Delay8_reg_1(21);
  Delay8_reg_next_1(23) <= Delay8_reg_1(22);
  Delay8_reg_next_1(24) <= Delay8_reg_1(23);

  
  if_aExponent_cfType_Exponent_1_out1 <= if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 WHEN Delay9_out1 = '0' ELSE
      Delay8_out1_3;

  
  Switch5_out1_11 <= Constant2_out1_1 WHEN Relational_Operator_relop1 = '0' ELSE
      if_aExponent_cfType_Exponent_1_out1;

  Delay5_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1_3 <= to_unsigned(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay5_out1_3 <= Switch5_out1_11;
      END IF;
    END IF;
  END PROCESS Delay5_3_process;


  -- Combine FP sign, exponent, mantissa into 32 bit word
  nfp_out_pack <= Delay3_out1_5 & Delay4_out1_6 & Delay5_out1_3;

  nfp_out <= std_logic_vector(nfp_out_pack);

END rtl;

