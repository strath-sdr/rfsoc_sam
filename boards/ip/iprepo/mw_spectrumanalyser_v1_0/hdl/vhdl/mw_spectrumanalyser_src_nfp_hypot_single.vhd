-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\mw_spectrumanalyser\mw_spectrumanalyser_src_nfp_hypot_single.vhd
-- Created: 2020-12-24 09:22:44
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: mw_spectrumanalyser_src_nfp_hypot_single
-- Source Path: mw_spectrumanalyser/Spectrum Analyser/Spectrum Options/nfp_hypot_single
-- Hierarchy Level: 2
-- 
-- {Latency Strategy = "Max"}
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.mw_spectrumanalyser_src_Spectrum_Analyser_pkg.ALL;

ENTITY mw_spectrumanalyser_src_nfp_hypot_single IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_16_0                        :   IN    std_logic;
        nfp_in1                           :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        nfp_in2                           :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        nfp_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END mw_spectrumanalyser_src_nfp_hypot_single;


ARCHITECTURE rtl OF mw_spectrumanalyser_src_nfp_hypot_single IS

  -- Signals
  SIGNAL nfp_in1_unsigned                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL aSign                            : std_logic;  -- ufix1
  SIGNAL aExponent                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL aMantissa                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL InputDelay2_out1                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Reduce1_out1                 : std_logic;  -- ufix1
  SIGNAL InputDelay3_out1                 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Bit_Reduce2_out1                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1            : std_logic;  -- ufix1
  SIGNAL InputDelay1_out1                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1           : std_logic;  -- ufix1
  SIGNAL nfp_in2_unsigned                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL bSign                            : std_logic;  -- ufix1
  SIGNAL bExponent                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL bMantissa                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL InputDelay5_out1                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Reduce1_out1_1               : std_logic;  -- ufix1
  SIGNAL InputDelay6_out1                 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Bit_Reduce2_out1_1               : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_1          : std_logic;  -- ufix1
  SIGNAL InputDelay4_out1                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1           : std_logic;  -- ufix1
  SIGNAL MatchingDelay1_reg               : std_logic_vector(0 TO 30);  -- ufix1 [31]
  SIGNAL MatchingDelay1_reg_next          : std_logic_vector(0 TO 30);  -- ufix1 [31]
  SIGNAL MatchingDelay1_out1              : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_2          : std_logic;  -- ufix1
  SIGNAL MatchingDelay3_reg               : std_logic_vector(0 TO 30);  -- ufix1 [31]
  SIGNAL MatchingDelay3_reg_next          : std_logic_vector(0 TO 30);  -- ufix1 [31]
  SIGNAL MatchingDelay3_out1              : std_logic;  -- ufix1
  SIGNAL EnableSignal_out1                : std_logic;  -- ufix1
  SIGNAL MatchingDelay4_reg               : std_logic_vector(0 TO 31);  -- ufix1 [32]
  SIGNAL MatchingDelay4_reg_next          : std_logic_vector(0 TO 31);  -- ufix1 [32]
  SIGNAL MatchingDelay4_out1              : std_logic;  -- ufix1
  SIGNAL ResetToZero_out1                 : std_logic;  -- ufix1
  SIGNAL CheckResetToZero_out1            : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_1         : std_logic;  -- ufix1
  SIGNAL OutputDelay1_out1                : std_logic;  -- ufix1
  SIGNAL Constant_out1                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Reduce_out1                  : std_logic;  -- ufix1
  SIGNAL C_out1                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_Exponent_0_out1               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Concat_out1                  : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Data_Type_Conversion_out1        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Constant1_out1                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Reduce_out1_1                : std_logic;  -- ufix1
  SIGNAL C_out1_1                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_Exponent_0_out1_1             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Concat1_out1                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Data_Type_Conversion1_out1       : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Add_out1                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Bit_Slice_out1                   : std_logic;  -- ufix1
  SIGNAL AlignMantissaDelay9_out1         : std_logic;  -- ufix1
  SIGNAL Constant4_out1                   : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Concat1_out1_1               : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Constant5_out1                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Concat3_out1                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion3_out1       : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL hypot_Append_Zeros_out4          : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice4_out1                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce1_out1_2               : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Constant1_out1_1                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch2_out1                     : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL AlignMantissaDelay3_out1         : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL dynamic_shift_cast               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic1_out1           : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch3_out1                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay2_out1                : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_1                 : std_logic;  -- ufix1
  SIGNAL Constant2_out1                   : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Concat1_out1_2               : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Constant3_out1                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Concat2_out1                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion2_out1       : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL hypot_Append_Zeros_out2          : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Bit_Slice2_out1                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce_out1_2                : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Constant_out1_1                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Switch1_out1                     : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL AlignMantissaDelay5_out1         : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL dynamic_shift_cast_1             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic_out1            : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay1_out1                : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_out1                        : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_out1                        : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch1_out1_1                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay4_out1                : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_2                 : std_logic;  -- ufix1
  SIGNAL Add1_out1_1                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_1                       : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_1                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay3_out1                : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Shift_Arithmetic_out1_1          : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_out1_1                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_out1_1                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch1_out1_2                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay6_out1                : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_3                 : std_logic;  -- ufix1
  SIGNAL Shift_Arithmetic1_out1_1         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1_2                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_2                       : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_2                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay5_out1                : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Shift_Arithmetic_out1_2          : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_out1_2                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_out1_2                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch1_out1_3                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay8_out1                : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_4                 : std_logic;  -- ufix1
  SIGNAL Shift_Arithmetic1_out1_2         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1_3                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_3                       : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_3                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay7_out1                : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Shift_Arithmetic_out1_3          : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_out1_3                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_out1_3                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch1_out1_4                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay10_out1               : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_5                 : std_logic;  -- ufix1
  SIGNAL Shift_Arithmetic1_out1_3         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1_4                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_4                       : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_4                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay9_out1                : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Shift_Arithmetic_out1_4          : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_out1_4                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_out1_4                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch1_out1_5                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay11_out1               : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_6                 : std_logic;  -- ufix1
  SIGNAL Shift_Arithmetic1_out1_4         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1_5                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_5                       : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_5                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay12_out1               : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Shift_Arithmetic_out1_5          : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_out1_5                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_out1_5                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch1_out1_6                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay2_out1_1              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_7                 : std_logic;  -- ufix1
  SIGNAL Shift_Arithmetic1_out1_5         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1_6                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_6                       : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_6                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay1_out1_1              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Shift_Arithmetic_out1_6          : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_out1_6                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_out1_6                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch1_out1_7                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay4_out1_1              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_8                 : std_logic;  -- ufix1
  SIGNAL Shift_Arithmetic1_out1_6         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1_7                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_7                       : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_7                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay3_out1_1              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Shift_Arithmetic_out1_7          : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_out1_7                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_out1_7                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch1_out1_8                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay6_out1_1              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_9                 : std_logic;  -- ufix1
  SIGNAL Shift_Arithmetic1_out1_7         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1_8                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_8                       : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_8                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay5_out1_1              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Shift_Arithmetic_out1_8          : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_out1_8                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_out1_8                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch1_out1_9                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay8_out1_1              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_10                : std_logic;  -- ufix1
  SIGNAL Shift_Arithmetic1_out1_8         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1_9                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_9                       : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_9                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay7_out1_1              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Shift_Arithmetic_out1_9          : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_out1_9                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_out1_9                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch1_out1_10                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay10_out1_1             : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_11                : std_logic;  -- ufix1
  SIGNAL Shift_Arithmetic1_out1_9         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1_10                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_10                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_10                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay9_out1_1              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Shift_Arithmetic_out1_10         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_out1_10                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_out1_10                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch1_out1_11                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay11_out1_1             : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_12                : std_logic;  -- ufix1
  SIGNAL Shift_Arithmetic1_out1_10        : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1_11                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_11                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_11                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay12_out1_1             : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Shift_Arithmetic_out1_11         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_out1_11                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_out1_11                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch1_out1_12                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay2_out1_2              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_13                : std_logic;  -- ufix1
  SIGNAL Shift_Arithmetic1_out1_11        : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1_12                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_12                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_12                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay1_out1_2              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Shift_Arithmetic_out1_12         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_out1_12                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_out1_12                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch1_out1_13                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay4_out1_2              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_14                : std_logic;  -- ufix1
  SIGNAL Shift_Arithmetic1_out1_12        : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1_13                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_13                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_13                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay3_out1_2              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Shift_Arithmetic_out1_13         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_out1_13                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_out1_13                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch1_out1_14                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay6_out1_2              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_15                : std_logic;  -- ufix1
  SIGNAL Shift_Arithmetic1_out1_13        : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1_14                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_14                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_14                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay5_out1_2              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Shift_Arithmetic_out1_14         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_out1_14                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_out1_14                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch1_out1_15                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay8_out1_2              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_16                : std_logic;  -- ufix1
  SIGNAL Shift_Arithmetic1_out1_14        : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1_15                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_15                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_15                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay7_out1_2              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Shift_Arithmetic_out1_15         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_out1_15                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_out1_15                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch1_out1_16                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay10_out1_2             : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_17                : std_logic;  -- ufix1
  SIGNAL Shift_Arithmetic1_out1_15        : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1_16                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_16                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_16                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay9_out1_2              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Shift_Arithmetic_out1_16         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_out1_16                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_out1_16                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch1_out1_17                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay11_out1_2             : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_18                : std_logic;  -- ufix1
  SIGNAL Shift_Arithmetic1_out1_16        : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1_17                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_17                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_17                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay12_out1_2             : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Shift_Arithmetic_out1_17         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_out1_17                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_out1_17                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch1_out1_18                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay2_out1_3              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_19                : std_logic;  -- ufix1
  SIGNAL Shift_Arithmetic1_out1_17        : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1_18                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_18                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_18                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay1_out1_3              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Shift_Arithmetic_out1_18         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_out1_18                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_out1_18                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch1_out1_19                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay4_out1_3              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_20                : std_logic;  -- ufix1
  SIGNAL Shift_Arithmetic1_out1_18        : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1_19                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_19                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_19                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay3_out1_3              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Shift_Arithmetic_out1_19         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_out1_19                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_out1_19                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch1_out1_20                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay6_out1_3              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_21                : std_logic;  -- ufix1
  SIGNAL Shift_Arithmetic1_out1_19        : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1_20                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_20                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_20                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay5_out1_3              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Shift_Arithmetic_out1_20         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_out1_20                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_out1_20                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch1_out1_21                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay8_out1_3              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_22                : std_logic;  -- ufix1
  SIGNAL Shift_Arithmetic1_out1_20        : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1_21                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_21                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_21                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay7_out1_3              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Shift_Arithmetic_out1_21         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_out1_21                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_out1_21                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch1_out1_22                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay10_out1_3             : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_23                : std_logic;  -- ufix1
  SIGNAL Shift_Arithmetic1_out1_21        : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1_22                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_22                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_22                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay9_out1_3              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Shift_Arithmetic_out1_22         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_out1_22                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_out1_22                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch1_out1_23                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay11_out1_3             : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice_out1_24                : std_logic;  -- ufix1
  SIGNAL Shift_Arithmetic1_out1_22        : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1_23                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_23                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_23                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL CORDICDelay12_out1_3             : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Shift_Arithmetic1_out1_23        : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_out1_24                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1_24                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch_out1_24                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Bit_Slice2_out1_1                : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL PostScalingDelay12_out1          : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL PostScalingDelay9_reg            : vector_of_unsigned31(0 TO 1);  -- ufix31 [2]
  SIGNAL PostScalingDelay9_reg_next       : vector_of_unsigned31(0 TO 1);  -- ufix31 [2]
  SIGNAL PostScalingDelay9_out1           : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL Constant_out1_2                  : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Bit_Concat1_out1_3               : unsigned(39 DOWNTO 0);  -- ufix40
  SIGNAL Constant1_out1_2                 : std_logic;  -- ufix1
  SIGNAL Constant2_out1_1                 : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_4               : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Constant_out1_3                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Concat_out1_1                : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Add_out1_25                      : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL PostScalingDelay5_out1           : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Constant4_out1_1                 : std_logic;  -- ufix1
  SIGNAL Constant5_out1_1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Concat3_out1_1               : unsigned(34 DOWNTO 0);  -- ufix35
  SIGNAL Constant3_out1_1                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Concat2_out1_1               : unsigned(34 DOWNTO 0);  -- ufix35
  SIGNAL Add1_out1_25                     : unsigned(34 DOWNTO 0);  -- ufix35
  SIGNAL PostScalingDelay3_out1           : unsigned(34 DOWNTO 0);  -- ufix35
  SIGNAL Bit_Slice1_out1_1                : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL Add_out1_26                      : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Bit_Slice_out1_25                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Concat_out1_2                : unsigned(38 DOWNTO 0);  -- ufix39
  SIGNAL PostScalingDelay8_out1           : unsigned(38 DOWNTO 0);  -- ufix39
  SIGNAL Add2_out1_23                     : unsigned(39 DOWNTO 0);  -- ufix40
  SIGNAL PostScalingDelay10_out1          : unsigned(39 DOWNTO 0);  -- ufix40
  SIGNAL Constant1_out1_3                 : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL Bit_Concat2_out1_2               : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL Constant4_out1_2                 : std_logic;  -- ufix1
  SIGNAL Constant5_out1_2                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Concat3_out1_2               : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL Constant3_out1_2                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Concat2_out1_3               : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL Add1_out1_26                     : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL PostScalingDelay4_out1           : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL Constant4_out1_3                 : std_logic;  -- ufix1
  SIGNAL Constant5_out1_3                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Concat3_out1_3               : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL Constant3_out1_3                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Concat2_out1_4               : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL Add_out1_27                      : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL PostScalingDelay2_out1           : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL Bit_Slice1_out1_2                : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL Add_out1_28                      : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL Bit_Slice_out1_26                : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Concat_out1_3                : unsigned(38 DOWNTO 0);  -- ufix39
  SIGNAL PostScalingDelay7_out1           : unsigned(38 DOWNTO 0);  -- ufix39
  SIGNAL Bit_Slice1_out1_3                : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL Add_out1_29                      : unsigned(34 DOWNTO 0);  -- ufix35
  SIGNAL Bit_Slice_out1_27                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Concat_out1_4                : unsigned(37 DOWNTO 0);  -- ufix38
  SIGNAL PostScalingDelay6_out1           : unsigned(37 DOWNTO 0);  -- ufix38
  SIGNAL Bit_Slice1_out1_4                : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL Add1_out1_27                     : unsigned(38 DOWNTO 0);  -- ufix39
  SIGNAL Bit_Slice_out1_28                : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Bit_Concat_out1_5                : unsigned(47 DOWNTO 0);  -- ufix48
  SIGNAL PostScalingDelay11_out1          : unsigned(47 DOWNTO 0);  -- ufix48
  SIGNAL Add3_out1_23                     : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL Data_Type_Conversion_out1_1      : unsigned(59 DOWNTO 0);  -- ufix60_En56
  SIGNAL NormalizeAnswerDelay2_out1       : unsigned(59 DOWNTO 0);  -- ufix60_En56
  SIGNAL Bit_Slice4_out1_1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL AlignMantissaDelay2_out1         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice5_out1_1                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL AlignMantissaDelay1_out1         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch4_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL NormalizeAnswerDelay1_reg        : vector_of_unsigned8(0 TO 28);  -- ufix8 [29]
  SIGNAL NormalizeAnswerDelay1_reg_next   : vector_of_unsigned8(0 TO 28);  -- ufix8 [29]
  SIGNAL NormalizeAnswerDelay1_out1       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Add1_out1_28                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch1_out1_24                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Add_out1_30                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch_out1_25                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Reduce1_out1_3               : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_3          : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_1                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Slice2_out1_2                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Switch3_out1_1                   : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Compare_To_Constant_out1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_5                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Constant1_out1_4                 : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Switch4_out1_1                   : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Switch2_out1_1                   : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL MainDelay4_out1                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL BitSlice4_out1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL LSB_out1                         : std_logic;  -- ufix1
  SIGNAL Bit_Slice7_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_1                : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_29                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL Bit_Reduce_out1_3                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_2         : std_logic;  -- ufix1
  SIGNAL Round_out1                       : std_logic;  -- ufix1
  SIGNAL MainDelay5_out1                  : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_2_0_out1    : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_1_0_out1    : std_logic;  -- ufix1
  SIGNAL MainDelay3_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Concat_out1_6                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Reduce_out1_4                : std_logic;  -- ufix1
  SIGNAL Exp_cast_1_like_Exp_add_cast     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Exp_cast_1_like_Exp_out1         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Concat_out1_7                : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Concat1_out1_5               : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Concat2_out1_5               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch1_out1_25                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL OutputDelay2_out1                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant_out1_5                  : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Mant_tmp_cast_2_like_Man_out1    : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch_out1_26                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Logical_Operator_out1_4          : std_logic;  -- ufix1
  SIGNAL Constant_out1_6                  : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch1_out1_26                  : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch_out1_27                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL MatchingDelay2_reg               : vector_of_unsigned23(0 TO 30);  -- ufix23 [31]
  SIGNAL MatchingDelay2_reg_next          : vector_of_unsigned23(0 TO 30);  -- ufix23 [31]
  SIGNAL MatchingDelay2_out1              : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch2_out1_2                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL OutputDelay3_out1                : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL nfp_out_pack                     : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  nfp_in1_unsigned <= unsigned(nfp_in1);

  -- Split 32 bit word into FP sign, exponent, mantissa
  aSign <= nfp_in1_unsigned(31);
  aExponent <= nfp_in1_unsigned(30 DOWNTO 23);
  aMantissa <= nfp_in1_unsigned(22 DOWNTO 0);

  InputDelay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      InputDelay2_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        InputDelay2_out1 <= aExponent;
      END IF;
    END IF;
  END PROCESS InputDelay2_process;


  Bit_Reduce1_out1 <= (InputDelay2_out1(7) AND InputDelay2_out1(6) AND InputDelay2_out1(5) AND InputDelay2_out1(4) AND InputDelay2_out1(3) AND InputDelay2_out1(2) AND InputDelay2_out1(1) AND InputDelay2_out1(0));

  InputDelay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      InputDelay3_out1 <= to_unsigned(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        InputDelay3_out1 <= aMantissa;
      END IF;
    END IF;
  END PROCESS InputDelay3_process;


  Bit_Reduce2_out1 <= (InputDelay3_out1(22) OR InputDelay3_out1(21) OR InputDelay3_out1(20) OR InputDelay3_out1(19) OR InputDelay3_out1(18) OR InputDelay3_out1(17) OR InputDelay3_out1(16) OR InputDelay3_out1(15) OR InputDelay3_out1(14) OR InputDelay3_out1(13) OR InputDelay3_out1(12) OR InputDelay3_out1(11) OR InputDelay3_out1(10) OR InputDelay3_out1(9) OR InputDelay3_out1(8) OR InputDelay3_out1(7) OR InputDelay3_out1(6) OR InputDelay3_out1(5) OR InputDelay3_out1(4) OR InputDelay3_out1(3) OR InputDelay3_out1(2) OR InputDelay3_out1(1) OR InputDelay3_out1(0));

  Logical_Operator_out1 <= Bit_Reduce1_out1 AND Bit_Reduce2_out1;

  InputDelay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      InputDelay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        InputDelay1_out1 <= aSign;
      END IF;
    END IF;
  END PROCESS InputDelay1_process;


  Logical_Operator1_out1 <= Logical_Operator_out1 AND InputDelay1_out1;

  nfp_in2_unsigned <= unsigned(nfp_in2);

  -- Split 32 bit word into FP sign, exponent, mantissa
  bSign <= nfp_in2_unsigned(31);
  bExponent <= nfp_in2_unsigned(30 DOWNTO 23);
  bMantissa <= nfp_in2_unsigned(22 DOWNTO 0);

  InputDelay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      InputDelay5_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        InputDelay5_out1 <= bExponent;
      END IF;
    END IF;
  END PROCESS InputDelay5_process;


  Bit_Reduce1_out1_1 <= (InputDelay5_out1(7) AND InputDelay5_out1(6) AND InputDelay5_out1(5) AND InputDelay5_out1(4) AND InputDelay5_out1(3) AND InputDelay5_out1(2) AND InputDelay5_out1(1) AND InputDelay5_out1(0));

  InputDelay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      InputDelay6_out1 <= to_unsigned(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        InputDelay6_out1 <= bMantissa;
      END IF;
    END IF;
  END PROCESS InputDelay6_process;


  Bit_Reduce2_out1_1 <= (InputDelay6_out1(22) OR InputDelay6_out1(21) OR InputDelay6_out1(20) OR InputDelay6_out1(19) OR InputDelay6_out1(18) OR InputDelay6_out1(17) OR InputDelay6_out1(16) OR InputDelay6_out1(15) OR InputDelay6_out1(14) OR InputDelay6_out1(13) OR InputDelay6_out1(12) OR InputDelay6_out1(11) OR InputDelay6_out1(10) OR InputDelay6_out1(9) OR InputDelay6_out1(8) OR InputDelay6_out1(7) OR InputDelay6_out1(6) OR InputDelay6_out1(5) OR InputDelay6_out1(4) OR InputDelay6_out1(3) OR InputDelay6_out1(2) OR InputDelay6_out1(1) OR InputDelay6_out1(0));

  Logical_Operator_out1_1 <= Bit_Reduce1_out1_1 AND Bit_Reduce2_out1_1;

  InputDelay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      InputDelay4_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        InputDelay4_out1 <= bSign;
      END IF;
    END IF;
  END PROCESS InputDelay4_process;


  Logical_Operator4_out1 <=  NOT Logical_Operator_out1;

  Logical_Operator2_out1 <= Logical_Operator4_out1 AND (Logical_Operator_out1_1 AND InputDelay4_out1);

  Logical_Operator3_out1 <= Logical_Operator1_out1 OR Logical_Operator2_out1;

  MatchingDelay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      MatchingDelay1_reg(0) <= '0';
      MatchingDelay1_reg(1) <= '0';
      MatchingDelay1_reg(2) <= '0';
      MatchingDelay1_reg(3) <= '0';
      MatchingDelay1_reg(4) <= '0';
      MatchingDelay1_reg(5) <= '0';
      MatchingDelay1_reg(6) <= '0';
      MatchingDelay1_reg(7) <= '0';
      MatchingDelay1_reg(8) <= '0';
      MatchingDelay1_reg(9) <= '0';
      MatchingDelay1_reg(10) <= '0';
      MatchingDelay1_reg(11) <= '0';
      MatchingDelay1_reg(12) <= '0';
      MatchingDelay1_reg(13) <= '0';
      MatchingDelay1_reg(14) <= '0';
      MatchingDelay1_reg(15) <= '0';
      MatchingDelay1_reg(16) <= '0';
      MatchingDelay1_reg(17) <= '0';
      MatchingDelay1_reg(18) <= '0';
      MatchingDelay1_reg(19) <= '0';
      MatchingDelay1_reg(20) <= '0';
      MatchingDelay1_reg(21) <= '0';
      MatchingDelay1_reg(22) <= '0';
      MatchingDelay1_reg(23) <= '0';
      MatchingDelay1_reg(24) <= '0';
      MatchingDelay1_reg(25) <= '0';
      MatchingDelay1_reg(26) <= '0';
      MatchingDelay1_reg(27) <= '0';
      MatchingDelay1_reg(28) <= '0';
      MatchingDelay1_reg(29) <= '0';
      MatchingDelay1_reg(30) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        MatchingDelay1_reg(0) <= MatchingDelay1_reg_next(0);
        MatchingDelay1_reg(1) <= MatchingDelay1_reg_next(1);
        MatchingDelay1_reg(2) <= MatchingDelay1_reg_next(2);
        MatchingDelay1_reg(3) <= MatchingDelay1_reg_next(3);
        MatchingDelay1_reg(4) <= MatchingDelay1_reg_next(4);
        MatchingDelay1_reg(5) <= MatchingDelay1_reg_next(5);
        MatchingDelay1_reg(6) <= MatchingDelay1_reg_next(6);
        MatchingDelay1_reg(7) <= MatchingDelay1_reg_next(7);
        MatchingDelay1_reg(8) <= MatchingDelay1_reg_next(8);
        MatchingDelay1_reg(9) <= MatchingDelay1_reg_next(9);
        MatchingDelay1_reg(10) <= MatchingDelay1_reg_next(10);
        MatchingDelay1_reg(11) <= MatchingDelay1_reg_next(11);
        MatchingDelay1_reg(12) <= MatchingDelay1_reg_next(12);
        MatchingDelay1_reg(13) <= MatchingDelay1_reg_next(13);
        MatchingDelay1_reg(14) <= MatchingDelay1_reg_next(14);
        MatchingDelay1_reg(15) <= MatchingDelay1_reg_next(15);
        MatchingDelay1_reg(16) <= MatchingDelay1_reg_next(16);
        MatchingDelay1_reg(17) <= MatchingDelay1_reg_next(17);
        MatchingDelay1_reg(18) <= MatchingDelay1_reg_next(18);
        MatchingDelay1_reg(19) <= MatchingDelay1_reg_next(19);
        MatchingDelay1_reg(20) <= MatchingDelay1_reg_next(20);
        MatchingDelay1_reg(21) <= MatchingDelay1_reg_next(21);
        MatchingDelay1_reg(22) <= MatchingDelay1_reg_next(22);
        MatchingDelay1_reg(23) <= MatchingDelay1_reg_next(23);
        MatchingDelay1_reg(24) <= MatchingDelay1_reg_next(24);
        MatchingDelay1_reg(25) <= MatchingDelay1_reg_next(25);
        MatchingDelay1_reg(26) <= MatchingDelay1_reg_next(26);
        MatchingDelay1_reg(27) <= MatchingDelay1_reg_next(27);
        MatchingDelay1_reg(28) <= MatchingDelay1_reg_next(28);
        MatchingDelay1_reg(29) <= MatchingDelay1_reg_next(29);
        MatchingDelay1_reg(30) <= MatchingDelay1_reg_next(30);
      END IF;
    END IF;
  END PROCESS MatchingDelay1_process;

  MatchingDelay1_out1 <= MatchingDelay1_reg(30);
  MatchingDelay1_reg_next(0) <= Logical_Operator3_out1;
  MatchingDelay1_reg_next(1) <= MatchingDelay1_reg(0);
  MatchingDelay1_reg_next(2) <= MatchingDelay1_reg(1);
  MatchingDelay1_reg_next(3) <= MatchingDelay1_reg(2);
  MatchingDelay1_reg_next(4) <= MatchingDelay1_reg(3);
  MatchingDelay1_reg_next(5) <= MatchingDelay1_reg(4);
  MatchingDelay1_reg_next(6) <= MatchingDelay1_reg(5);
  MatchingDelay1_reg_next(7) <= MatchingDelay1_reg(6);
  MatchingDelay1_reg_next(8) <= MatchingDelay1_reg(7);
  MatchingDelay1_reg_next(9) <= MatchingDelay1_reg(8);
  MatchingDelay1_reg_next(10) <= MatchingDelay1_reg(9);
  MatchingDelay1_reg_next(11) <= MatchingDelay1_reg(10);
  MatchingDelay1_reg_next(12) <= MatchingDelay1_reg(11);
  MatchingDelay1_reg_next(13) <= MatchingDelay1_reg(12);
  MatchingDelay1_reg_next(14) <= MatchingDelay1_reg(13);
  MatchingDelay1_reg_next(15) <= MatchingDelay1_reg(14);
  MatchingDelay1_reg_next(16) <= MatchingDelay1_reg(15);
  MatchingDelay1_reg_next(17) <= MatchingDelay1_reg(16);
  MatchingDelay1_reg_next(18) <= MatchingDelay1_reg(17);
  MatchingDelay1_reg_next(19) <= MatchingDelay1_reg(18);
  MatchingDelay1_reg_next(20) <= MatchingDelay1_reg(19);
  MatchingDelay1_reg_next(21) <= MatchingDelay1_reg(20);
  MatchingDelay1_reg_next(22) <= MatchingDelay1_reg(21);
  MatchingDelay1_reg_next(23) <= MatchingDelay1_reg(22);
  MatchingDelay1_reg_next(24) <= MatchingDelay1_reg(23);
  MatchingDelay1_reg_next(25) <= MatchingDelay1_reg(24);
  MatchingDelay1_reg_next(26) <= MatchingDelay1_reg(25);
  MatchingDelay1_reg_next(27) <= MatchingDelay1_reg(26);
  MatchingDelay1_reg_next(28) <= MatchingDelay1_reg(27);
  MatchingDelay1_reg_next(29) <= MatchingDelay1_reg(28);
  MatchingDelay1_reg_next(30) <= MatchingDelay1_reg(29);

  Logical_Operator_out1_2 <= Bit_Reduce1_out1 OR Bit_Reduce1_out1_1;

  MatchingDelay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      MatchingDelay3_reg(0) <= '0';
      MatchingDelay3_reg(1) <= '0';
      MatchingDelay3_reg(2) <= '0';
      MatchingDelay3_reg(3) <= '0';
      MatchingDelay3_reg(4) <= '0';
      MatchingDelay3_reg(5) <= '0';
      MatchingDelay3_reg(6) <= '0';
      MatchingDelay3_reg(7) <= '0';
      MatchingDelay3_reg(8) <= '0';
      MatchingDelay3_reg(9) <= '0';
      MatchingDelay3_reg(10) <= '0';
      MatchingDelay3_reg(11) <= '0';
      MatchingDelay3_reg(12) <= '0';
      MatchingDelay3_reg(13) <= '0';
      MatchingDelay3_reg(14) <= '0';
      MatchingDelay3_reg(15) <= '0';
      MatchingDelay3_reg(16) <= '0';
      MatchingDelay3_reg(17) <= '0';
      MatchingDelay3_reg(18) <= '0';
      MatchingDelay3_reg(19) <= '0';
      MatchingDelay3_reg(20) <= '0';
      MatchingDelay3_reg(21) <= '0';
      MatchingDelay3_reg(22) <= '0';
      MatchingDelay3_reg(23) <= '0';
      MatchingDelay3_reg(24) <= '0';
      MatchingDelay3_reg(25) <= '0';
      MatchingDelay3_reg(26) <= '0';
      MatchingDelay3_reg(27) <= '0';
      MatchingDelay3_reg(28) <= '0';
      MatchingDelay3_reg(29) <= '0';
      MatchingDelay3_reg(30) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        MatchingDelay3_reg(0) <= MatchingDelay3_reg_next(0);
        MatchingDelay3_reg(1) <= MatchingDelay3_reg_next(1);
        MatchingDelay3_reg(2) <= MatchingDelay3_reg_next(2);
        MatchingDelay3_reg(3) <= MatchingDelay3_reg_next(3);
        MatchingDelay3_reg(4) <= MatchingDelay3_reg_next(4);
        MatchingDelay3_reg(5) <= MatchingDelay3_reg_next(5);
        MatchingDelay3_reg(6) <= MatchingDelay3_reg_next(6);
        MatchingDelay3_reg(7) <= MatchingDelay3_reg_next(7);
        MatchingDelay3_reg(8) <= MatchingDelay3_reg_next(8);
        MatchingDelay3_reg(9) <= MatchingDelay3_reg_next(9);
        MatchingDelay3_reg(10) <= MatchingDelay3_reg_next(10);
        MatchingDelay3_reg(11) <= MatchingDelay3_reg_next(11);
        MatchingDelay3_reg(12) <= MatchingDelay3_reg_next(12);
        MatchingDelay3_reg(13) <= MatchingDelay3_reg_next(13);
        MatchingDelay3_reg(14) <= MatchingDelay3_reg_next(14);
        MatchingDelay3_reg(15) <= MatchingDelay3_reg_next(15);
        MatchingDelay3_reg(16) <= MatchingDelay3_reg_next(16);
        MatchingDelay3_reg(17) <= MatchingDelay3_reg_next(17);
        MatchingDelay3_reg(18) <= MatchingDelay3_reg_next(18);
        MatchingDelay3_reg(19) <= MatchingDelay3_reg_next(19);
        MatchingDelay3_reg(20) <= MatchingDelay3_reg_next(20);
        MatchingDelay3_reg(21) <= MatchingDelay3_reg_next(21);
        MatchingDelay3_reg(22) <= MatchingDelay3_reg_next(22);
        MatchingDelay3_reg(23) <= MatchingDelay3_reg_next(23);
        MatchingDelay3_reg(24) <= MatchingDelay3_reg_next(24);
        MatchingDelay3_reg(25) <= MatchingDelay3_reg_next(25);
        MatchingDelay3_reg(26) <= MatchingDelay3_reg_next(26);
        MatchingDelay3_reg(27) <= MatchingDelay3_reg_next(27);
        MatchingDelay3_reg(28) <= MatchingDelay3_reg_next(28);
        MatchingDelay3_reg(29) <= MatchingDelay3_reg_next(29);
        MatchingDelay3_reg(30) <= MatchingDelay3_reg_next(30);
      END IF;
    END IF;
  END PROCESS MatchingDelay3_process;

  MatchingDelay3_out1 <= MatchingDelay3_reg(30);
  MatchingDelay3_reg_next(0) <= Logical_Operator_out1_2;
  MatchingDelay3_reg_next(1) <= MatchingDelay3_reg(0);
  MatchingDelay3_reg_next(2) <= MatchingDelay3_reg(1);
  MatchingDelay3_reg_next(3) <= MatchingDelay3_reg(2);
  MatchingDelay3_reg_next(4) <= MatchingDelay3_reg(3);
  MatchingDelay3_reg_next(5) <= MatchingDelay3_reg(4);
  MatchingDelay3_reg_next(6) <= MatchingDelay3_reg(5);
  MatchingDelay3_reg_next(7) <= MatchingDelay3_reg(6);
  MatchingDelay3_reg_next(8) <= MatchingDelay3_reg(7);
  MatchingDelay3_reg_next(9) <= MatchingDelay3_reg(8);
  MatchingDelay3_reg_next(10) <= MatchingDelay3_reg(9);
  MatchingDelay3_reg_next(11) <= MatchingDelay3_reg(10);
  MatchingDelay3_reg_next(12) <= MatchingDelay3_reg(11);
  MatchingDelay3_reg_next(13) <= MatchingDelay3_reg(12);
  MatchingDelay3_reg_next(14) <= MatchingDelay3_reg(13);
  MatchingDelay3_reg_next(15) <= MatchingDelay3_reg(14);
  MatchingDelay3_reg_next(16) <= MatchingDelay3_reg(15);
  MatchingDelay3_reg_next(17) <= MatchingDelay3_reg(16);
  MatchingDelay3_reg_next(18) <= MatchingDelay3_reg(17);
  MatchingDelay3_reg_next(19) <= MatchingDelay3_reg(18);
  MatchingDelay3_reg_next(20) <= MatchingDelay3_reg(19);
  MatchingDelay3_reg_next(21) <= MatchingDelay3_reg(20);
  MatchingDelay3_reg_next(22) <= MatchingDelay3_reg(21);
  MatchingDelay3_reg_next(23) <= MatchingDelay3_reg(22);
  MatchingDelay3_reg_next(24) <= MatchingDelay3_reg(23);
  MatchingDelay3_reg_next(25) <= MatchingDelay3_reg(24);
  MatchingDelay3_reg_next(26) <= MatchingDelay3_reg(25);
  MatchingDelay3_reg_next(27) <= MatchingDelay3_reg(26);
  MatchingDelay3_reg_next(28) <= MatchingDelay3_reg(27);
  MatchingDelay3_reg_next(29) <= MatchingDelay3_reg(28);
  MatchingDelay3_reg_next(30) <= MatchingDelay3_reg(29);

  EnableSignal_out1 <= '1';

  MatchingDelay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      MatchingDelay4_reg(0) <= '0';
      MatchingDelay4_reg(1) <= '0';
      MatchingDelay4_reg(2) <= '0';
      MatchingDelay4_reg(3) <= '0';
      MatchingDelay4_reg(4) <= '0';
      MatchingDelay4_reg(5) <= '0';
      MatchingDelay4_reg(6) <= '0';
      MatchingDelay4_reg(7) <= '0';
      MatchingDelay4_reg(8) <= '0';
      MatchingDelay4_reg(9) <= '0';
      MatchingDelay4_reg(10) <= '0';
      MatchingDelay4_reg(11) <= '0';
      MatchingDelay4_reg(12) <= '0';
      MatchingDelay4_reg(13) <= '0';
      MatchingDelay4_reg(14) <= '0';
      MatchingDelay4_reg(15) <= '0';
      MatchingDelay4_reg(16) <= '0';
      MatchingDelay4_reg(17) <= '0';
      MatchingDelay4_reg(18) <= '0';
      MatchingDelay4_reg(19) <= '0';
      MatchingDelay4_reg(20) <= '0';
      MatchingDelay4_reg(21) <= '0';
      MatchingDelay4_reg(22) <= '0';
      MatchingDelay4_reg(23) <= '0';
      MatchingDelay4_reg(24) <= '0';
      MatchingDelay4_reg(25) <= '0';
      MatchingDelay4_reg(26) <= '0';
      MatchingDelay4_reg(27) <= '0';
      MatchingDelay4_reg(28) <= '0';
      MatchingDelay4_reg(29) <= '0';
      MatchingDelay4_reg(30) <= '0';
      MatchingDelay4_reg(31) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        MatchingDelay4_reg(0) <= MatchingDelay4_reg_next(0);
        MatchingDelay4_reg(1) <= MatchingDelay4_reg_next(1);
        MatchingDelay4_reg(2) <= MatchingDelay4_reg_next(2);
        MatchingDelay4_reg(3) <= MatchingDelay4_reg_next(3);
        MatchingDelay4_reg(4) <= MatchingDelay4_reg_next(4);
        MatchingDelay4_reg(5) <= MatchingDelay4_reg_next(5);
        MatchingDelay4_reg(6) <= MatchingDelay4_reg_next(6);
        MatchingDelay4_reg(7) <= MatchingDelay4_reg_next(7);
        MatchingDelay4_reg(8) <= MatchingDelay4_reg_next(8);
        MatchingDelay4_reg(9) <= MatchingDelay4_reg_next(9);
        MatchingDelay4_reg(10) <= MatchingDelay4_reg_next(10);
        MatchingDelay4_reg(11) <= MatchingDelay4_reg_next(11);
        MatchingDelay4_reg(12) <= MatchingDelay4_reg_next(12);
        MatchingDelay4_reg(13) <= MatchingDelay4_reg_next(13);
        MatchingDelay4_reg(14) <= MatchingDelay4_reg_next(14);
        MatchingDelay4_reg(15) <= MatchingDelay4_reg_next(15);
        MatchingDelay4_reg(16) <= MatchingDelay4_reg_next(16);
        MatchingDelay4_reg(17) <= MatchingDelay4_reg_next(17);
        MatchingDelay4_reg(18) <= MatchingDelay4_reg_next(18);
        MatchingDelay4_reg(19) <= MatchingDelay4_reg_next(19);
        MatchingDelay4_reg(20) <= MatchingDelay4_reg_next(20);
        MatchingDelay4_reg(21) <= MatchingDelay4_reg_next(21);
        MatchingDelay4_reg(22) <= MatchingDelay4_reg_next(22);
        MatchingDelay4_reg(23) <= MatchingDelay4_reg_next(23);
        MatchingDelay4_reg(24) <= MatchingDelay4_reg_next(24);
        MatchingDelay4_reg(25) <= MatchingDelay4_reg_next(25);
        MatchingDelay4_reg(26) <= MatchingDelay4_reg_next(26);
        MatchingDelay4_reg(27) <= MatchingDelay4_reg_next(27);
        MatchingDelay4_reg(28) <= MatchingDelay4_reg_next(28);
        MatchingDelay4_reg(29) <= MatchingDelay4_reg_next(29);
        MatchingDelay4_reg(30) <= MatchingDelay4_reg_next(30);
        MatchingDelay4_reg(31) <= MatchingDelay4_reg_next(31);
      END IF;
    END IF;
  END PROCESS MatchingDelay4_process;

  MatchingDelay4_out1 <= MatchingDelay4_reg(31);
  MatchingDelay4_reg_next(0) <= EnableSignal_out1;
  MatchingDelay4_reg_next(1) <= MatchingDelay4_reg(0);
  MatchingDelay4_reg_next(2) <= MatchingDelay4_reg(1);
  MatchingDelay4_reg_next(3) <= MatchingDelay4_reg(2);
  MatchingDelay4_reg_next(4) <= MatchingDelay4_reg(3);
  MatchingDelay4_reg_next(5) <= MatchingDelay4_reg(4);
  MatchingDelay4_reg_next(6) <= MatchingDelay4_reg(5);
  MatchingDelay4_reg_next(7) <= MatchingDelay4_reg(6);
  MatchingDelay4_reg_next(8) <= MatchingDelay4_reg(7);
  MatchingDelay4_reg_next(9) <= MatchingDelay4_reg(8);
  MatchingDelay4_reg_next(10) <= MatchingDelay4_reg(9);
  MatchingDelay4_reg_next(11) <= MatchingDelay4_reg(10);
  MatchingDelay4_reg_next(12) <= MatchingDelay4_reg(11);
  MatchingDelay4_reg_next(13) <= MatchingDelay4_reg(12);
  MatchingDelay4_reg_next(14) <= MatchingDelay4_reg(13);
  MatchingDelay4_reg_next(15) <= MatchingDelay4_reg(14);
  MatchingDelay4_reg_next(16) <= MatchingDelay4_reg(15);
  MatchingDelay4_reg_next(17) <= MatchingDelay4_reg(16);
  MatchingDelay4_reg_next(18) <= MatchingDelay4_reg(17);
  MatchingDelay4_reg_next(19) <= MatchingDelay4_reg(18);
  MatchingDelay4_reg_next(20) <= MatchingDelay4_reg(19);
  MatchingDelay4_reg_next(21) <= MatchingDelay4_reg(20);
  MatchingDelay4_reg_next(22) <= MatchingDelay4_reg(21);
  MatchingDelay4_reg_next(23) <= MatchingDelay4_reg(22);
  MatchingDelay4_reg_next(24) <= MatchingDelay4_reg(23);
  MatchingDelay4_reg_next(25) <= MatchingDelay4_reg(24);
  MatchingDelay4_reg_next(26) <= MatchingDelay4_reg(25);
  MatchingDelay4_reg_next(27) <= MatchingDelay4_reg(26);
  MatchingDelay4_reg_next(28) <= MatchingDelay4_reg(27);
  MatchingDelay4_reg_next(29) <= MatchingDelay4_reg(28);
  MatchingDelay4_reg_next(30) <= MatchingDelay4_reg(29);
  MatchingDelay4_reg_next(31) <= MatchingDelay4_reg(30);

  ResetToZero_out1 <=  NOT MatchingDelay4_out1;

  CheckResetToZero_out1 <= MatchingDelay3_out1 OR ResetToZero_out1;

  Logical_Operator1_out1_1 <= MatchingDelay1_out1 AND CheckResetToZero_out1;

  OutputDelay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      OutputDelay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        OutputDelay1_out1 <= Logical_Operator1_out1_1;
      END IF;
    END IF;
  END PROCESS OutputDelay1_process;


  Constant_out1 <= to_unsigned(16#0#, 2);

  Bit_Reduce_out1 <= (InputDelay2_out1(7) OR InputDelay2_out1(6) OR InputDelay2_out1(5) OR InputDelay2_out1(4) OR InputDelay2_out1(3) OR InputDelay2_out1(2) OR InputDelay2_out1(1) OR InputDelay2_out1(0));

  C_out1 <= to_unsigned(16#01#, 8);

  
  if_Exponent_0_out1 <= C_out1 WHEN Bit_Reduce_out1 = '0' ELSE
      InputDelay2_out1;

  Bit_Concat_out1 <= Constant_out1 & if_Exponent_0_out1;

  Data_Type_Conversion_out1 <= signed(Bit_Concat_out1);

  Constant1_out1 <= to_unsigned(16#0#, 2);

  Bit_Reduce_out1_1 <= (InputDelay5_out1(7) OR InputDelay5_out1(6) OR InputDelay5_out1(5) OR InputDelay5_out1(4) OR InputDelay5_out1(3) OR InputDelay5_out1(2) OR InputDelay5_out1(1) OR InputDelay5_out1(0));

  C_out1_1 <= to_unsigned(16#01#, 8);

  
  if_Exponent_0_out1_1 <= C_out1_1 WHEN Bit_Reduce_out1_1 = '0' ELSE
      InputDelay5_out1;

  Bit_Concat1_out1 <= Constant1_out1 & if_Exponent_0_out1_1;

  Data_Type_Conversion1_out1 <= signed(Bit_Concat1_out1);

  Add_out1 <= Data_Type_Conversion_out1 - Data_Type_Conversion1_out1;

  Bit_Slice_out1 <= Add_out1(9);

  AlignMantissaDelay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      AlignMantissaDelay9_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        AlignMantissaDelay9_out1 <= Bit_Slice_out1;
      END IF;
    END IF;
  END PROCESS AlignMantissaDelay9_process;


  Constant4_out1 <= to_unsigned(16#0#, 3);

  Bit_Concat1_out1_1 <= Bit_Reduce_out1_1 & InputDelay6_out1;

  Constant5_out1 <= to_unsigned(16#00#, 5);

  Bit_Concat3_out1 <= Constant4_out1 & Bit_Concat1_out1_1 & Constant5_out1;

  Data_Type_Conversion3_out1 <= signed(Bit_Concat3_out1);

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      hypot_Append_Zeros_out4 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        hypot_Append_Zeros_out4 <= Data_Type_Conversion3_out1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  Bit_Slice4_out1 <= unsigned(Add_out1(8 DOWNTO 5));

  Bit_Reduce1_out1_2 <= (Bit_Slice4_out1(3) OR Bit_Slice4_out1(2) OR Bit_Slice4_out1(1) OR Bit_Slice4_out1(0));

  Bit_Slice3_out1 <= unsigned(Add_out1(4 DOWNTO 0));

  Constant1_out1_1 <= to_unsigned(16#1F#, 5);

  
  Switch2_out1 <= Bit_Slice3_out1 WHEN Bit_Reduce1_out1_2 = '0' ELSE
      Constant1_out1_1;

  AlignMantissaDelay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      AlignMantissaDelay3_out1 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        AlignMantissaDelay3_out1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS AlignMantissaDelay3_process;


  dynamic_shift_cast <= resize(AlignMantissaDelay3_out1, 8);
  Shift_Arithmetic1_out1 <= SHIFT_RIGHT(hypot_Append_Zeros_out4, to_integer(dynamic_shift_cast));

  
  Switch3_out1 <= Shift_Arithmetic1_out1 WHEN AlignMantissaDelay9_out1 = '0' ELSE
      hypot_Append_Zeros_out4;

  CORDICDelay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay2_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay2_out1 <= Switch3_out1;
      END IF;
    END IF;
  END PROCESS CORDICDelay2_process;


  Bit_Slice_out1_1 <= CORDICDelay2_out1(31);

  Constant2_out1 <= to_unsigned(16#0#, 3);

  Bit_Concat1_out1_2 <= Bit_Reduce_out1 & InputDelay3_out1;

  Constant3_out1 <= to_unsigned(16#00#, 5);

  Bit_Concat2_out1 <= Constant2_out1 & Bit_Concat1_out1_2 & Constant3_out1;

  Data_Type_Conversion2_out1 <= signed(Bit_Concat2_out1);

  reduced_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      hypot_Append_Zeros_out2 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        hypot_Append_Zeros_out2 <= Data_Type_Conversion2_out1;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  Add1_out1 <= Data_Type_Conversion1_out1 - Data_Type_Conversion_out1;

  Bit_Slice2_out1 <= unsigned(Add1_out1(8 DOWNTO 5));

  Bit_Reduce_out1_2 <= (Bit_Slice2_out1(3) OR Bit_Slice2_out1(2) OR Bit_Slice2_out1(1) OR Bit_Slice2_out1(0));

  Bit_Slice1_out1 <= unsigned(Add1_out1(4 DOWNTO 0));

  Constant_out1_1 <= to_unsigned(16#1F#, 5);

  
  Switch1_out1 <= Bit_Slice1_out1 WHEN Bit_Reduce_out1_2 = '0' ELSE
      Constant_out1_1;

  AlignMantissaDelay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      AlignMantissaDelay5_out1 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        AlignMantissaDelay5_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS AlignMantissaDelay5_process;


  dynamic_shift_cast_1 <= resize(AlignMantissaDelay5_out1, 8);
  Shift_Arithmetic_out1 <= SHIFT_RIGHT(hypot_Append_Zeros_out2, to_integer(dynamic_shift_cast_1));

  
  Switch_out1 <= hypot_Append_Zeros_out2 WHEN AlignMantissaDelay9_out1 = '0' ELSE
      Shift_Arithmetic_out1;

  CORDICDelay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay1_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay1_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS CORDICDelay1_process;


  Add3_out1 <= CORDICDelay2_out1 - CORDICDelay1_out1;

  Add2_out1 <= CORDICDelay2_out1 + CORDICDelay1_out1;

  
  Switch1_out1_1 <= Add3_out1 WHEN Bit_Slice_out1_1 = '0' ELSE
      Add2_out1;

  CORDICDelay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay4_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay4_out1 <= Switch1_out1_1;
      END IF;
    END IF;
  END PROCESS CORDICDelay4_process;


  Bit_Slice_out1_2 <= CORDICDelay4_out1(31);

  Add1_out1_1 <= CORDICDelay1_out1 + CORDICDelay2_out1;

  Add_out1_1 <= CORDICDelay1_out1 - CORDICDelay2_out1;

  
  Switch_out1_1 <= Add1_out1_1 WHEN Bit_Slice_out1_1 = '0' ELSE
      Add_out1_1;

  CORDICDelay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay3_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay3_out1 <= Switch_out1_1;
      END IF;
    END IF;
  END PROCESS CORDICDelay3_process;


  Shift_Arithmetic_out1_1 <= SHIFT_RIGHT(CORDICDelay3_out1, 1);

  Add3_out1_1 <= CORDICDelay4_out1 - Shift_Arithmetic_out1_1;

  Add2_out1_1 <= CORDICDelay4_out1 + Shift_Arithmetic_out1_1;

  
  Switch1_out1_2 <= Add3_out1_1 WHEN Bit_Slice_out1_2 = '0' ELSE
      Add2_out1_1;

  CORDICDelay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay6_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay6_out1 <= Switch1_out1_2;
      END IF;
    END IF;
  END PROCESS CORDICDelay6_process;


  Bit_Slice_out1_3 <= CORDICDelay6_out1(31);

  Shift_Arithmetic1_out1_1 <= SHIFT_RIGHT(CORDICDelay4_out1, 1);

  Add1_out1_2 <= CORDICDelay3_out1 + Shift_Arithmetic1_out1_1;

  Add_out1_2 <= CORDICDelay3_out1 - Shift_Arithmetic1_out1_1;

  
  Switch_out1_2 <= Add1_out1_2 WHEN Bit_Slice_out1_2 = '0' ELSE
      Add_out1_2;

  CORDICDelay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay5_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay5_out1 <= Switch_out1_2;
      END IF;
    END IF;
  END PROCESS CORDICDelay5_process;


  Shift_Arithmetic_out1_2 <= SHIFT_RIGHT(CORDICDelay5_out1, 2);

  Add3_out1_2 <= CORDICDelay6_out1 - Shift_Arithmetic_out1_2;

  Add2_out1_2 <= CORDICDelay6_out1 + Shift_Arithmetic_out1_2;

  
  Switch1_out1_3 <= Add3_out1_2 WHEN Bit_Slice_out1_3 = '0' ELSE
      Add2_out1_2;

  CORDICDelay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay8_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay8_out1 <= Switch1_out1_3;
      END IF;
    END IF;
  END PROCESS CORDICDelay8_process;


  Bit_Slice_out1_4 <= CORDICDelay8_out1(31);

  Shift_Arithmetic1_out1_2 <= SHIFT_RIGHT(CORDICDelay6_out1, 2);

  Add1_out1_3 <= CORDICDelay5_out1 + Shift_Arithmetic1_out1_2;

  Add_out1_3 <= CORDICDelay5_out1 - Shift_Arithmetic1_out1_2;

  
  Switch_out1_3 <= Add1_out1_3 WHEN Bit_Slice_out1_3 = '0' ELSE
      Add_out1_3;

  CORDICDelay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay7_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay7_out1 <= Switch_out1_3;
      END IF;
    END IF;
  END PROCESS CORDICDelay7_process;


  Shift_Arithmetic_out1_3 <= SHIFT_RIGHT(CORDICDelay7_out1, 3);

  Add3_out1_3 <= CORDICDelay8_out1 - Shift_Arithmetic_out1_3;

  Add2_out1_3 <= CORDICDelay8_out1 + Shift_Arithmetic_out1_3;

  
  Switch1_out1_4 <= Add3_out1_3 WHEN Bit_Slice_out1_4 = '0' ELSE
      Add2_out1_3;

  CORDICDelay10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay10_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay10_out1 <= Switch1_out1_4;
      END IF;
    END IF;
  END PROCESS CORDICDelay10_process;


  Bit_Slice_out1_5 <= CORDICDelay10_out1(31);

  Shift_Arithmetic1_out1_3 <= SHIFT_RIGHT(CORDICDelay8_out1, 3);

  Add1_out1_4 <= CORDICDelay7_out1 + Shift_Arithmetic1_out1_3;

  Add_out1_4 <= CORDICDelay7_out1 - Shift_Arithmetic1_out1_3;

  
  Switch_out1_4 <= Add1_out1_4 WHEN Bit_Slice_out1_4 = '0' ELSE
      Add_out1_4;

  CORDICDelay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay9_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay9_out1 <= Switch_out1_4;
      END IF;
    END IF;
  END PROCESS CORDICDelay9_process;


  Shift_Arithmetic_out1_4 <= SHIFT_RIGHT(CORDICDelay9_out1, 4);

  Add3_out1_4 <= CORDICDelay10_out1 - Shift_Arithmetic_out1_4;

  Add2_out1_4 <= CORDICDelay10_out1 + Shift_Arithmetic_out1_4;

  
  Switch1_out1_5 <= Add3_out1_4 WHEN Bit_Slice_out1_5 = '0' ELSE
      Add2_out1_4;

  CORDICDelay11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay11_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay11_out1 <= Switch1_out1_5;
      END IF;
    END IF;
  END PROCESS CORDICDelay11_process;


  Bit_Slice_out1_6 <= CORDICDelay11_out1(31);

  Shift_Arithmetic1_out1_4 <= SHIFT_RIGHT(CORDICDelay10_out1, 4);

  Add1_out1_5 <= CORDICDelay9_out1 + Shift_Arithmetic1_out1_4;

  Add_out1_5 <= CORDICDelay9_out1 - Shift_Arithmetic1_out1_4;

  
  Switch_out1_5 <= Add1_out1_5 WHEN Bit_Slice_out1_5 = '0' ELSE
      Add_out1_5;

  CORDICDelay12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay12_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay12_out1 <= Switch_out1_5;
      END IF;
    END IF;
  END PROCESS CORDICDelay12_process;


  Shift_Arithmetic_out1_5 <= SHIFT_RIGHT(CORDICDelay12_out1, 5);

  Add3_out1_5 <= CORDICDelay11_out1 - Shift_Arithmetic_out1_5;

  Add2_out1_5 <= CORDICDelay11_out1 + Shift_Arithmetic_out1_5;

  
  Switch1_out1_6 <= Add3_out1_5 WHEN Bit_Slice_out1_6 = '0' ELSE
      Add2_out1_5;

  CORDICDelay2_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay2_out1_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay2_out1_1 <= Switch1_out1_6;
      END IF;
    END IF;
  END PROCESS CORDICDelay2_1_process;


  Bit_Slice_out1_7 <= CORDICDelay2_out1_1(31);

  Shift_Arithmetic1_out1_5 <= SHIFT_RIGHT(CORDICDelay11_out1, 5);

  Add1_out1_6 <= CORDICDelay12_out1 + Shift_Arithmetic1_out1_5;

  Add_out1_6 <= CORDICDelay12_out1 - Shift_Arithmetic1_out1_5;

  
  Switch_out1_6 <= Add1_out1_6 WHEN Bit_Slice_out1_6 = '0' ELSE
      Add_out1_6;

  CORDICDelay1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay1_out1_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay1_out1_1 <= Switch_out1_6;
      END IF;
    END IF;
  END PROCESS CORDICDelay1_1_process;


  Shift_Arithmetic_out1_6 <= SHIFT_RIGHT(CORDICDelay1_out1_1, 6);

  Add3_out1_6 <= CORDICDelay2_out1_1 - Shift_Arithmetic_out1_6;

  Add2_out1_6 <= CORDICDelay2_out1_1 + Shift_Arithmetic_out1_6;

  
  Switch1_out1_7 <= Add3_out1_6 WHEN Bit_Slice_out1_7 = '0' ELSE
      Add2_out1_6;

  CORDICDelay4_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay4_out1_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay4_out1_1 <= Switch1_out1_7;
      END IF;
    END IF;
  END PROCESS CORDICDelay4_1_process;


  Bit_Slice_out1_8 <= CORDICDelay4_out1_1(31);

  Shift_Arithmetic1_out1_6 <= SHIFT_RIGHT(CORDICDelay2_out1_1, 6);

  Add1_out1_7 <= CORDICDelay1_out1_1 + Shift_Arithmetic1_out1_6;

  Add_out1_7 <= CORDICDelay1_out1_1 - Shift_Arithmetic1_out1_6;

  
  Switch_out1_7 <= Add1_out1_7 WHEN Bit_Slice_out1_7 = '0' ELSE
      Add_out1_7;

  CORDICDelay3_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay3_out1_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay3_out1_1 <= Switch_out1_7;
      END IF;
    END IF;
  END PROCESS CORDICDelay3_1_process;


  Shift_Arithmetic_out1_7 <= SHIFT_RIGHT(CORDICDelay3_out1_1, 7);

  Add3_out1_7 <= CORDICDelay4_out1_1 - Shift_Arithmetic_out1_7;

  Add2_out1_7 <= CORDICDelay4_out1_1 + Shift_Arithmetic_out1_7;

  
  Switch1_out1_8 <= Add3_out1_7 WHEN Bit_Slice_out1_8 = '0' ELSE
      Add2_out1_7;

  CORDICDelay6_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay6_out1_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay6_out1_1 <= Switch1_out1_8;
      END IF;
    END IF;
  END PROCESS CORDICDelay6_1_process;


  Bit_Slice_out1_9 <= CORDICDelay6_out1_1(31);

  Shift_Arithmetic1_out1_7 <= SHIFT_RIGHT(CORDICDelay4_out1_1, 7);

  Add1_out1_8 <= CORDICDelay3_out1_1 + Shift_Arithmetic1_out1_7;

  Add_out1_8 <= CORDICDelay3_out1_1 - Shift_Arithmetic1_out1_7;

  
  Switch_out1_8 <= Add1_out1_8 WHEN Bit_Slice_out1_8 = '0' ELSE
      Add_out1_8;

  CORDICDelay5_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay5_out1_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay5_out1_1 <= Switch_out1_8;
      END IF;
    END IF;
  END PROCESS CORDICDelay5_1_process;


  Shift_Arithmetic_out1_8 <= SHIFT_RIGHT(CORDICDelay5_out1_1, 8);

  Add3_out1_8 <= CORDICDelay6_out1_1 - Shift_Arithmetic_out1_8;

  Add2_out1_8 <= CORDICDelay6_out1_1 + Shift_Arithmetic_out1_8;

  
  Switch1_out1_9 <= Add3_out1_8 WHEN Bit_Slice_out1_9 = '0' ELSE
      Add2_out1_8;

  CORDICDelay8_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay8_out1_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay8_out1_1 <= Switch1_out1_9;
      END IF;
    END IF;
  END PROCESS CORDICDelay8_1_process;


  Bit_Slice_out1_10 <= CORDICDelay8_out1_1(31);

  Shift_Arithmetic1_out1_8 <= SHIFT_RIGHT(CORDICDelay6_out1_1, 8);

  Add1_out1_9 <= CORDICDelay5_out1_1 + Shift_Arithmetic1_out1_8;

  Add_out1_9 <= CORDICDelay5_out1_1 - Shift_Arithmetic1_out1_8;

  
  Switch_out1_9 <= Add1_out1_9 WHEN Bit_Slice_out1_9 = '0' ELSE
      Add_out1_9;

  CORDICDelay7_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay7_out1_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay7_out1_1 <= Switch_out1_9;
      END IF;
    END IF;
  END PROCESS CORDICDelay7_1_process;


  Shift_Arithmetic_out1_9 <= SHIFT_RIGHT(CORDICDelay7_out1_1, 9);

  Add3_out1_9 <= CORDICDelay8_out1_1 - Shift_Arithmetic_out1_9;

  Add2_out1_9 <= CORDICDelay8_out1_1 + Shift_Arithmetic_out1_9;

  
  Switch1_out1_10 <= Add3_out1_9 WHEN Bit_Slice_out1_10 = '0' ELSE
      Add2_out1_9;

  CORDICDelay10_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay10_out1_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay10_out1_1 <= Switch1_out1_10;
      END IF;
    END IF;
  END PROCESS CORDICDelay10_1_process;


  Bit_Slice_out1_11 <= CORDICDelay10_out1_1(31);

  Shift_Arithmetic1_out1_9 <= SHIFT_RIGHT(CORDICDelay8_out1_1, 9);

  Add1_out1_10 <= CORDICDelay7_out1_1 + Shift_Arithmetic1_out1_9;

  Add_out1_10 <= CORDICDelay7_out1_1 - Shift_Arithmetic1_out1_9;

  
  Switch_out1_10 <= Add1_out1_10 WHEN Bit_Slice_out1_10 = '0' ELSE
      Add_out1_10;

  CORDICDelay9_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay9_out1_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay9_out1_1 <= Switch_out1_10;
      END IF;
    END IF;
  END PROCESS CORDICDelay9_1_process;


  Shift_Arithmetic_out1_10 <= SHIFT_RIGHT(CORDICDelay9_out1_1, 10);

  Add3_out1_10 <= CORDICDelay10_out1_1 - Shift_Arithmetic_out1_10;

  Add2_out1_10 <= CORDICDelay10_out1_1 + Shift_Arithmetic_out1_10;

  
  Switch1_out1_11 <= Add3_out1_10 WHEN Bit_Slice_out1_11 = '0' ELSE
      Add2_out1_10;

  CORDICDelay11_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay11_out1_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay11_out1_1 <= Switch1_out1_11;
      END IF;
    END IF;
  END PROCESS CORDICDelay11_1_process;


  Bit_Slice_out1_12 <= CORDICDelay11_out1_1(31);

  Shift_Arithmetic1_out1_10 <= SHIFT_RIGHT(CORDICDelay10_out1_1, 10);

  Add1_out1_11 <= CORDICDelay9_out1_1 + Shift_Arithmetic1_out1_10;

  Add_out1_11 <= CORDICDelay9_out1_1 - Shift_Arithmetic1_out1_10;

  
  Switch_out1_11 <= Add1_out1_11 WHEN Bit_Slice_out1_11 = '0' ELSE
      Add_out1_11;

  CORDICDelay12_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay12_out1_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay12_out1_1 <= Switch_out1_11;
      END IF;
    END IF;
  END PROCESS CORDICDelay12_1_process;


  Shift_Arithmetic_out1_11 <= SHIFT_RIGHT(CORDICDelay12_out1_1, 11);

  Add3_out1_11 <= CORDICDelay11_out1_1 - Shift_Arithmetic_out1_11;

  Add2_out1_11 <= CORDICDelay11_out1_1 + Shift_Arithmetic_out1_11;

  
  Switch1_out1_12 <= Add3_out1_11 WHEN Bit_Slice_out1_12 = '0' ELSE
      Add2_out1_11;

  CORDICDelay2_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay2_out1_2 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay2_out1_2 <= Switch1_out1_12;
      END IF;
    END IF;
  END PROCESS CORDICDelay2_2_process;


  Bit_Slice_out1_13 <= CORDICDelay2_out1_2(31);

  Shift_Arithmetic1_out1_11 <= SHIFT_RIGHT(CORDICDelay11_out1_1, 11);

  Add1_out1_12 <= CORDICDelay12_out1_1 + Shift_Arithmetic1_out1_11;

  Add_out1_12 <= CORDICDelay12_out1_1 - Shift_Arithmetic1_out1_11;

  
  Switch_out1_12 <= Add1_out1_12 WHEN Bit_Slice_out1_12 = '0' ELSE
      Add_out1_12;

  CORDICDelay1_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay1_out1_2 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay1_out1_2 <= Switch_out1_12;
      END IF;
    END IF;
  END PROCESS CORDICDelay1_2_process;


  Shift_Arithmetic_out1_12 <= SHIFT_RIGHT(CORDICDelay1_out1_2, 12);

  Add3_out1_12 <= CORDICDelay2_out1_2 - Shift_Arithmetic_out1_12;

  Add2_out1_12 <= CORDICDelay2_out1_2 + Shift_Arithmetic_out1_12;

  
  Switch1_out1_13 <= Add3_out1_12 WHEN Bit_Slice_out1_13 = '0' ELSE
      Add2_out1_12;

  CORDICDelay4_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay4_out1_2 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay4_out1_2 <= Switch1_out1_13;
      END IF;
    END IF;
  END PROCESS CORDICDelay4_2_process;


  Bit_Slice_out1_14 <= CORDICDelay4_out1_2(31);

  Shift_Arithmetic1_out1_12 <= SHIFT_RIGHT(CORDICDelay2_out1_2, 12);

  Add1_out1_13 <= CORDICDelay1_out1_2 + Shift_Arithmetic1_out1_12;

  Add_out1_13 <= CORDICDelay1_out1_2 - Shift_Arithmetic1_out1_12;

  
  Switch_out1_13 <= Add1_out1_13 WHEN Bit_Slice_out1_13 = '0' ELSE
      Add_out1_13;

  CORDICDelay3_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay3_out1_2 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay3_out1_2 <= Switch_out1_13;
      END IF;
    END IF;
  END PROCESS CORDICDelay3_2_process;


  Shift_Arithmetic_out1_13 <= SHIFT_RIGHT(CORDICDelay3_out1_2, 13);

  Add3_out1_13 <= CORDICDelay4_out1_2 - Shift_Arithmetic_out1_13;

  Add2_out1_13 <= CORDICDelay4_out1_2 + Shift_Arithmetic_out1_13;

  
  Switch1_out1_14 <= Add3_out1_13 WHEN Bit_Slice_out1_14 = '0' ELSE
      Add2_out1_13;

  CORDICDelay6_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay6_out1_2 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay6_out1_2 <= Switch1_out1_14;
      END IF;
    END IF;
  END PROCESS CORDICDelay6_2_process;


  Bit_Slice_out1_15 <= CORDICDelay6_out1_2(31);

  Shift_Arithmetic1_out1_13 <= SHIFT_RIGHT(CORDICDelay4_out1_2, 13);

  Add1_out1_14 <= CORDICDelay3_out1_2 + Shift_Arithmetic1_out1_13;

  Add_out1_14 <= CORDICDelay3_out1_2 - Shift_Arithmetic1_out1_13;

  
  Switch_out1_14 <= Add1_out1_14 WHEN Bit_Slice_out1_14 = '0' ELSE
      Add_out1_14;

  CORDICDelay5_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay5_out1_2 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay5_out1_2 <= Switch_out1_14;
      END IF;
    END IF;
  END PROCESS CORDICDelay5_2_process;


  Shift_Arithmetic_out1_14 <= SHIFT_RIGHT(CORDICDelay5_out1_2, 14);

  Add3_out1_14 <= CORDICDelay6_out1_2 - Shift_Arithmetic_out1_14;

  Add2_out1_14 <= CORDICDelay6_out1_2 + Shift_Arithmetic_out1_14;

  
  Switch1_out1_15 <= Add3_out1_14 WHEN Bit_Slice_out1_15 = '0' ELSE
      Add2_out1_14;

  CORDICDelay8_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay8_out1_2 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay8_out1_2 <= Switch1_out1_15;
      END IF;
    END IF;
  END PROCESS CORDICDelay8_2_process;


  Bit_Slice_out1_16 <= CORDICDelay8_out1_2(31);

  Shift_Arithmetic1_out1_14 <= SHIFT_RIGHT(CORDICDelay6_out1_2, 14);

  Add1_out1_15 <= CORDICDelay5_out1_2 + Shift_Arithmetic1_out1_14;

  Add_out1_15 <= CORDICDelay5_out1_2 - Shift_Arithmetic1_out1_14;

  
  Switch_out1_15 <= Add1_out1_15 WHEN Bit_Slice_out1_15 = '0' ELSE
      Add_out1_15;

  CORDICDelay7_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay7_out1_2 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay7_out1_2 <= Switch_out1_15;
      END IF;
    END IF;
  END PROCESS CORDICDelay7_2_process;


  Shift_Arithmetic_out1_15 <= SHIFT_RIGHT(CORDICDelay7_out1_2, 15);

  Add3_out1_15 <= CORDICDelay8_out1_2 - Shift_Arithmetic_out1_15;

  Add2_out1_15 <= CORDICDelay8_out1_2 + Shift_Arithmetic_out1_15;

  
  Switch1_out1_16 <= Add3_out1_15 WHEN Bit_Slice_out1_16 = '0' ELSE
      Add2_out1_15;

  CORDICDelay10_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay10_out1_2 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay10_out1_2 <= Switch1_out1_16;
      END IF;
    END IF;
  END PROCESS CORDICDelay10_2_process;


  Bit_Slice_out1_17 <= CORDICDelay10_out1_2(31);

  Shift_Arithmetic1_out1_15 <= SHIFT_RIGHT(CORDICDelay8_out1_2, 15);

  Add1_out1_16 <= CORDICDelay7_out1_2 + Shift_Arithmetic1_out1_15;

  Add_out1_16 <= CORDICDelay7_out1_2 - Shift_Arithmetic1_out1_15;

  
  Switch_out1_16 <= Add1_out1_16 WHEN Bit_Slice_out1_16 = '0' ELSE
      Add_out1_16;

  CORDICDelay9_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay9_out1_2 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay9_out1_2 <= Switch_out1_16;
      END IF;
    END IF;
  END PROCESS CORDICDelay9_2_process;


  Shift_Arithmetic_out1_16 <= SHIFT_RIGHT(CORDICDelay9_out1_2, 16);

  Add3_out1_16 <= CORDICDelay10_out1_2 - Shift_Arithmetic_out1_16;

  Add2_out1_16 <= CORDICDelay10_out1_2 + Shift_Arithmetic_out1_16;

  
  Switch1_out1_17 <= Add3_out1_16 WHEN Bit_Slice_out1_17 = '0' ELSE
      Add2_out1_16;

  CORDICDelay11_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay11_out1_2 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay11_out1_2 <= Switch1_out1_17;
      END IF;
    END IF;
  END PROCESS CORDICDelay11_2_process;


  Bit_Slice_out1_18 <= CORDICDelay11_out1_2(31);

  Shift_Arithmetic1_out1_16 <= SHIFT_RIGHT(CORDICDelay10_out1_2, 16);

  Add1_out1_17 <= CORDICDelay9_out1_2 + Shift_Arithmetic1_out1_16;

  Add_out1_17 <= CORDICDelay9_out1_2 - Shift_Arithmetic1_out1_16;

  
  Switch_out1_17 <= Add1_out1_17 WHEN Bit_Slice_out1_17 = '0' ELSE
      Add_out1_17;

  CORDICDelay12_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay12_out1_2 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay12_out1_2 <= Switch_out1_17;
      END IF;
    END IF;
  END PROCESS CORDICDelay12_2_process;


  Shift_Arithmetic_out1_17 <= SHIFT_RIGHT(CORDICDelay12_out1_2, 17);

  Add3_out1_17 <= CORDICDelay11_out1_2 - Shift_Arithmetic_out1_17;

  Add2_out1_17 <= CORDICDelay11_out1_2 + Shift_Arithmetic_out1_17;

  
  Switch1_out1_18 <= Add3_out1_17 WHEN Bit_Slice_out1_18 = '0' ELSE
      Add2_out1_17;

  CORDICDelay2_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay2_out1_3 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay2_out1_3 <= Switch1_out1_18;
      END IF;
    END IF;
  END PROCESS CORDICDelay2_3_process;


  Bit_Slice_out1_19 <= CORDICDelay2_out1_3(31);

  Shift_Arithmetic1_out1_17 <= SHIFT_RIGHT(CORDICDelay11_out1_2, 17);

  Add1_out1_18 <= CORDICDelay12_out1_2 + Shift_Arithmetic1_out1_17;

  Add_out1_18 <= CORDICDelay12_out1_2 - Shift_Arithmetic1_out1_17;

  
  Switch_out1_18 <= Add1_out1_18 WHEN Bit_Slice_out1_18 = '0' ELSE
      Add_out1_18;

  CORDICDelay1_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay1_out1_3 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay1_out1_3 <= Switch_out1_18;
      END IF;
    END IF;
  END PROCESS CORDICDelay1_3_process;


  Shift_Arithmetic_out1_18 <= SHIFT_RIGHT(CORDICDelay1_out1_3, 18);

  Add3_out1_18 <= CORDICDelay2_out1_3 - Shift_Arithmetic_out1_18;

  Add2_out1_18 <= CORDICDelay2_out1_3 + Shift_Arithmetic_out1_18;

  
  Switch1_out1_19 <= Add3_out1_18 WHEN Bit_Slice_out1_19 = '0' ELSE
      Add2_out1_18;

  CORDICDelay4_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay4_out1_3 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay4_out1_3 <= Switch1_out1_19;
      END IF;
    END IF;
  END PROCESS CORDICDelay4_3_process;


  Bit_Slice_out1_20 <= CORDICDelay4_out1_3(31);

  Shift_Arithmetic1_out1_18 <= SHIFT_RIGHT(CORDICDelay2_out1_3, 18);

  Add1_out1_19 <= CORDICDelay1_out1_3 + Shift_Arithmetic1_out1_18;

  Add_out1_19 <= CORDICDelay1_out1_3 - Shift_Arithmetic1_out1_18;

  
  Switch_out1_19 <= Add1_out1_19 WHEN Bit_Slice_out1_19 = '0' ELSE
      Add_out1_19;

  CORDICDelay3_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay3_out1_3 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay3_out1_3 <= Switch_out1_19;
      END IF;
    END IF;
  END PROCESS CORDICDelay3_3_process;


  Shift_Arithmetic_out1_19 <= SHIFT_RIGHT(CORDICDelay3_out1_3, 19);

  Add3_out1_19 <= CORDICDelay4_out1_3 - Shift_Arithmetic_out1_19;

  Add2_out1_19 <= CORDICDelay4_out1_3 + Shift_Arithmetic_out1_19;

  
  Switch1_out1_20 <= Add3_out1_19 WHEN Bit_Slice_out1_20 = '0' ELSE
      Add2_out1_19;

  CORDICDelay6_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay6_out1_3 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay6_out1_3 <= Switch1_out1_20;
      END IF;
    END IF;
  END PROCESS CORDICDelay6_3_process;


  Bit_Slice_out1_21 <= CORDICDelay6_out1_3(31);

  Shift_Arithmetic1_out1_19 <= SHIFT_RIGHT(CORDICDelay4_out1_3, 19);

  Add1_out1_20 <= CORDICDelay3_out1_3 + Shift_Arithmetic1_out1_19;

  Add_out1_20 <= CORDICDelay3_out1_3 - Shift_Arithmetic1_out1_19;

  
  Switch_out1_20 <= Add1_out1_20 WHEN Bit_Slice_out1_20 = '0' ELSE
      Add_out1_20;

  CORDICDelay5_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay5_out1_3 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay5_out1_3 <= Switch_out1_20;
      END IF;
    END IF;
  END PROCESS CORDICDelay5_3_process;


  Shift_Arithmetic_out1_20 <= SHIFT_RIGHT(CORDICDelay5_out1_3, 20);

  Add3_out1_20 <= CORDICDelay6_out1_3 - Shift_Arithmetic_out1_20;

  Add2_out1_20 <= CORDICDelay6_out1_3 + Shift_Arithmetic_out1_20;

  
  Switch1_out1_21 <= Add3_out1_20 WHEN Bit_Slice_out1_21 = '0' ELSE
      Add2_out1_20;

  CORDICDelay8_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay8_out1_3 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay8_out1_3 <= Switch1_out1_21;
      END IF;
    END IF;
  END PROCESS CORDICDelay8_3_process;


  Bit_Slice_out1_22 <= CORDICDelay8_out1_3(31);

  Shift_Arithmetic1_out1_20 <= SHIFT_RIGHT(CORDICDelay6_out1_3, 20);

  Add1_out1_21 <= CORDICDelay5_out1_3 + Shift_Arithmetic1_out1_20;

  Add_out1_21 <= CORDICDelay5_out1_3 - Shift_Arithmetic1_out1_20;

  
  Switch_out1_21 <= Add1_out1_21 WHEN Bit_Slice_out1_21 = '0' ELSE
      Add_out1_21;

  CORDICDelay7_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay7_out1_3 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay7_out1_3 <= Switch_out1_21;
      END IF;
    END IF;
  END PROCESS CORDICDelay7_3_process;


  Shift_Arithmetic_out1_21 <= SHIFT_RIGHT(CORDICDelay7_out1_3, 21);

  Add3_out1_21 <= CORDICDelay8_out1_3 - Shift_Arithmetic_out1_21;

  Add2_out1_21 <= CORDICDelay8_out1_3 + Shift_Arithmetic_out1_21;

  
  Switch1_out1_22 <= Add3_out1_21 WHEN Bit_Slice_out1_22 = '0' ELSE
      Add2_out1_21;

  CORDICDelay10_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay10_out1_3 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay10_out1_3 <= Switch1_out1_22;
      END IF;
    END IF;
  END PROCESS CORDICDelay10_3_process;


  Bit_Slice_out1_23 <= CORDICDelay10_out1_3(31);

  Shift_Arithmetic1_out1_21 <= SHIFT_RIGHT(CORDICDelay8_out1_3, 21);

  Add1_out1_22 <= CORDICDelay7_out1_3 + Shift_Arithmetic1_out1_21;

  Add_out1_22 <= CORDICDelay7_out1_3 - Shift_Arithmetic1_out1_21;

  
  Switch_out1_22 <= Add1_out1_22 WHEN Bit_Slice_out1_22 = '0' ELSE
      Add_out1_22;

  CORDICDelay9_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay9_out1_3 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay9_out1_3 <= Switch_out1_22;
      END IF;
    END IF;
  END PROCESS CORDICDelay9_3_process;


  Shift_Arithmetic_out1_22 <= SHIFT_RIGHT(CORDICDelay9_out1_3, 22);

  Add3_out1_22 <= CORDICDelay10_out1_3 - Shift_Arithmetic_out1_22;

  Add2_out1_22 <= CORDICDelay10_out1_3 + Shift_Arithmetic_out1_22;

  
  Switch1_out1_23 <= Add3_out1_22 WHEN Bit_Slice_out1_23 = '0' ELSE
      Add2_out1_22;

  CORDICDelay11_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay11_out1_3 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay11_out1_3 <= Switch1_out1_23;
      END IF;
    END IF;
  END PROCESS CORDICDelay11_3_process;


  Bit_Slice_out1_24 <= CORDICDelay11_out1_3(31);

  Shift_Arithmetic1_out1_22 <= SHIFT_RIGHT(CORDICDelay10_out1_3, 22);

  Add1_out1_23 <= CORDICDelay9_out1_3 + Shift_Arithmetic1_out1_22;

  Add_out1_23 <= CORDICDelay9_out1_3 - Shift_Arithmetic1_out1_22;

  
  Switch_out1_23 <= Add1_out1_23 WHEN Bit_Slice_out1_23 = '0' ELSE
      Add_out1_23;

  CORDICDelay12_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      CORDICDelay12_out1_3 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        CORDICDelay12_out1_3 <= Switch_out1_23;
      END IF;
    END IF;
  END PROCESS CORDICDelay12_3_process;


  Shift_Arithmetic1_out1_23 <= SHIFT_RIGHT(CORDICDelay11_out1_3, 23);

  Add1_out1_24 <= CORDICDelay12_out1_3 + Shift_Arithmetic1_out1_23;

  Add_out1_24 <= CORDICDelay12_out1_3 - Shift_Arithmetic1_out1_23;

  
  Switch_out1_24 <= Add1_out1_24 WHEN Bit_Slice_out1_24 = '0' ELSE
      Add_out1_24;

  Bit_Slice2_out1_1 <= unsigned(Switch_out1_24(30 DOWNTO 0));

  PostScalingDelay12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PostScalingDelay12_out1 <= to_unsigned(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        PostScalingDelay12_out1 <= Bit_Slice2_out1_1;
      END IF;
    END IF;
  END PROCESS PostScalingDelay12_process;


  PostScalingDelay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PostScalingDelay9_reg(0) <= to_unsigned(16#00000000#, 31);
      PostScalingDelay9_reg(1) <= to_unsigned(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        PostScalingDelay9_reg(0) <= PostScalingDelay9_reg_next(0);
        PostScalingDelay9_reg(1) <= PostScalingDelay9_reg_next(1);
      END IF;
    END IF;
  END PROCESS PostScalingDelay9_process;

  PostScalingDelay9_out1 <= PostScalingDelay9_reg(1);
  PostScalingDelay9_reg_next(0) <= PostScalingDelay12_out1;
  PostScalingDelay9_reg_next(1) <= PostScalingDelay9_reg(0);

  Constant_out1_2 <= to_unsigned(16#000#, 9);

  Bit_Concat1_out1_3 <= PostScalingDelay9_out1 & Constant_out1_2;

  Constant1_out1_2 <= '0';

  Constant2_out1_1 <= '0';

  Bit_Concat1_out1_4 <= Constant1_out1_2 & PostScalingDelay12_out1 & Constant2_out1_1;

  Constant_out1_3 <= to_unsigned(16#0#, 2);

  Bit_Concat_out1_1 <= Constant_out1_3 & PostScalingDelay12_out1;

  Add_out1_25 <= Bit_Concat1_out1_4 + Bit_Concat_out1_1;

  PostScalingDelay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PostScalingDelay5_out1 <= to_unsigned(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        PostScalingDelay5_out1 <= Add_out1_25;
      END IF;
    END IF;
  END PROCESS PostScalingDelay5_process;


  Constant4_out1_1 <= '0';

  Constant5_out1_1 <= to_unsigned(16#0#, 3);

  Bit_Concat3_out1_1 <= Constant4_out1_1 & PostScalingDelay12_out1 & Constant5_out1_1;

  Constant3_out1_1 <= to_unsigned(16#0#, 4);

  Bit_Concat2_out1_1 <= Constant3_out1_1 & PostScalingDelay12_out1;

  Add1_out1_25 <= Bit_Concat3_out1_1 + Bit_Concat2_out1_1;

  PostScalingDelay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PostScalingDelay3_out1 <= to_unsigned(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        PostScalingDelay3_out1 <= Add1_out1_25;
      END IF;
    END IF;
  END PROCESS PostScalingDelay3_process;


  Bit_Slice1_out1_1 <= PostScalingDelay3_out1(34 DOWNTO 6);

  Add_out1_26 <= PostScalingDelay5_out1 + resize(Bit_Slice1_out1_1, 33);

  Bit_Slice_out1_25 <= PostScalingDelay3_out1(5 DOWNTO 0);

  Bit_Concat_out1_2 <= Add_out1_26 & Bit_Slice_out1_25;

  PostScalingDelay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PostScalingDelay8_out1 <= to_unsigned(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        PostScalingDelay8_out1 <= Bit_Concat_out1_2;
      END IF;
    END IF;
  END PROCESS PostScalingDelay8_process;


  Add2_out1_23 <= Bit_Concat1_out1_3 - resize(PostScalingDelay8_out1, 40);

  PostScalingDelay10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PostScalingDelay10_out1 <= to_unsigned(0, 40);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        PostScalingDelay10_out1 <= Add2_out1_23;
      END IF;
    END IF;
  END PROCESS PostScalingDelay10_process;


  Constant1_out1_3 <= to_unsigned(16#00000#, 20);

  Bit_Concat2_out1_2 <= PostScalingDelay10_out1 & Constant1_out1_3;

  Constant4_out1_2 <= '0';

  Constant5_out1_2 <= to_unsigned(16#0#, 2);

  Bit_Concat3_out1_2 <= Constant4_out1_2 & PostScalingDelay12_out1 & Constant5_out1_2;

  Constant3_out1_2 <= to_unsigned(16#0#, 3);

  Bit_Concat2_out1_3 <= Constant3_out1_2 & PostScalingDelay12_out1;

  Add1_out1_26 <= Bit_Concat3_out1_2 + Bit_Concat2_out1_3;

  PostScalingDelay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PostScalingDelay4_out1 <= to_unsigned(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        PostScalingDelay4_out1 <= Add1_out1_26;
      END IF;
    END IF;
  END PROCESS PostScalingDelay4_process;


  Constant4_out1_3 <= '0';

  Constant5_out1_3 <= to_unsigned(16#0#, 4);

  Bit_Concat3_out1_3 <= Constant4_out1_3 & PostScalingDelay12_out1 & Constant5_out1_3;

  Constant3_out1_3 <= to_unsigned(16#00#, 5);

  Bit_Concat2_out1_4 <= Constant3_out1_3 & PostScalingDelay12_out1;

  Add_out1_27 <= Bit_Concat3_out1_3 + Bit_Concat2_out1_4;

  PostScalingDelay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PostScalingDelay2_out1 <= to_unsigned(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        PostScalingDelay2_out1 <= Add_out1_27;
      END IF;
    END IF;
  END PROCESS PostScalingDelay2_process;


  Bit_Slice1_out1_2 <= PostScalingDelay2_out1(35 DOWNTO 5);

  Add_out1_28 <= PostScalingDelay4_out1 + resize(Bit_Slice1_out1_2, 34);

  Bit_Slice_out1_26 <= PostScalingDelay2_out1(4 DOWNTO 0);

  Bit_Concat_out1_3 <= Add_out1_28 & Bit_Slice_out1_26;

  PostScalingDelay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PostScalingDelay7_out1 <= to_unsigned(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        PostScalingDelay7_out1 <= Bit_Concat_out1_3;
      END IF;
    END IF;
  END PROCESS PostScalingDelay7_process;


  Bit_Slice1_out1_3 <= PostScalingDelay5_out1(32 DOWNTO 3);

  Add_out1_29 <= PostScalingDelay3_out1 + resize(Bit_Slice1_out1_3, 35);

  Bit_Slice_out1_27 <= PostScalingDelay5_out1(2 DOWNTO 0);

  Bit_Concat_out1_4 <= Add_out1_29 & Bit_Slice_out1_27;

  PostScalingDelay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PostScalingDelay6_out1 <= to_unsigned(0, 38);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        PostScalingDelay6_out1 <= Bit_Concat_out1_4;
      END IF;
    END IF;
  END PROCESS PostScalingDelay6_process;


  Bit_Slice1_out1_4 <= PostScalingDelay6_out1(37 DOWNTO 9);

  Add1_out1_27 <= PostScalingDelay7_out1 + resize(Bit_Slice1_out1_4, 39);

  Bit_Slice_out1_28 <= PostScalingDelay6_out1(8 DOWNTO 0);

  Bit_Concat_out1_5 <= Add1_out1_27 & Bit_Slice_out1_28;

  PostScalingDelay11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PostScalingDelay11_out1 <= to_unsigned(0, 48);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        PostScalingDelay11_out1 <= Bit_Concat_out1_5;
      END IF;
    END IF;
  END PROCESS PostScalingDelay11_process;


  Add3_out1_23 <= Bit_Concat2_out1_2 - resize(PostScalingDelay11_out1, 60);

  Data_Type_Conversion_out1_1 <= Add3_out1_23;

  NormalizeAnswerDelay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      NormalizeAnswerDelay2_out1 <= to_unsigned(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        NormalizeAnswerDelay2_out1 <= Data_Type_Conversion_out1_1;
      END IF;
    END IF;
  END PROCESS NormalizeAnswerDelay2_process;


  Bit_Slice4_out1_1 <= NormalizeAnswerDelay2_out1(58);

  Bit_Slice5_out1 <= NormalizeAnswerDelay2_out1(57);

  Bit_Slice6_out1 <= unsigned(Data_Type_Conversion_out1(7 DOWNTO 0));

  AlignMantissaDelay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      AlignMantissaDelay2_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        AlignMantissaDelay2_out1 <= Bit_Slice6_out1;
      END IF;
    END IF;
  END PROCESS AlignMantissaDelay2_process;


  Bit_Slice5_out1_1 <= unsigned(Data_Type_Conversion1_out1(7 DOWNTO 0));

  AlignMantissaDelay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      AlignMantissaDelay1_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        AlignMantissaDelay1_out1 <= Bit_Slice5_out1_1;
      END IF;
    END IF;
  END PROCESS AlignMantissaDelay1_process;


  
  Switch4_out1 <= AlignMantissaDelay2_out1 WHEN AlignMantissaDelay9_out1 = '0' ELSE
      AlignMantissaDelay1_out1;

  NormalizeAnswerDelay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      NormalizeAnswerDelay1_reg(0) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(1) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(2) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(3) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(4) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(5) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(6) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(7) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(8) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(9) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(10) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(11) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(12) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(13) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(14) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(15) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(16) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(17) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(18) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(19) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(20) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(21) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(22) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(23) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(24) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(25) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(26) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(27) <= to_unsigned(16#00#, 8);
      NormalizeAnswerDelay1_reg(28) <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        NormalizeAnswerDelay1_reg(0) <= NormalizeAnswerDelay1_reg_next(0);
        NormalizeAnswerDelay1_reg(1) <= NormalizeAnswerDelay1_reg_next(1);
        NormalizeAnswerDelay1_reg(2) <= NormalizeAnswerDelay1_reg_next(2);
        NormalizeAnswerDelay1_reg(3) <= NormalizeAnswerDelay1_reg_next(3);
        NormalizeAnswerDelay1_reg(4) <= NormalizeAnswerDelay1_reg_next(4);
        NormalizeAnswerDelay1_reg(5) <= NormalizeAnswerDelay1_reg_next(5);
        NormalizeAnswerDelay1_reg(6) <= NormalizeAnswerDelay1_reg_next(6);
        NormalizeAnswerDelay1_reg(7) <= NormalizeAnswerDelay1_reg_next(7);
        NormalizeAnswerDelay1_reg(8) <= NormalizeAnswerDelay1_reg_next(8);
        NormalizeAnswerDelay1_reg(9) <= NormalizeAnswerDelay1_reg_next(9);
        NormalizeAnswerDelay1_reg(10) <= NormalizeAnswerDelay1_reg_next(10);
        NormalizeAnswerDelay1_reg(11) <= NormalizeAnswerDelay1_reg_next(11);
        NormalizeAnswerDelay1_reg(12) <= NormalizeAnswerDelay1_reg_next(12);
        NormalizeAnswerDelay1_reg(13) <= NormalizeAnswerDelay1_reg_next(13);
        NormalizeAnswerDelay1_reg(14) <= NormalizeAnswerDelay1_reg_next(14);
        NormalizeAnswerDelay1_reg(15) <= NormalizeAnswerDelay1_reg_next(15);
        NormalizeAnswerDelay1_reg(16) <= NormalizeAnswerDelay1_reg_next(16);
        NormalizeAnswerDelay1_reg(17) <= NormalizeAnswerDelay1_reg_next(17);
        NormalizeAnswerDelay1_reg(18) <= NormalizeAnswerDelay1_reg_next(18);
        NormalizeAnswerDelay1_reg(19) <= NormalizeAnswerDelay1_reg_next(19);
        NormalizeAnswerDelay1_reg(20) <= NormalizeAnswerDelay1_reg_next(20);
        NormalizeAnswerDelay1_reg(21) <= NormalizeAnswerDelay1_reg_next(21);
        NormalizeAnswerDelay1_reg(22) <= NormalizeAnswerDelay1_reg_next(22);
        NormalizeAnswerDelay1_reg(23) <= NormalizeAnswerDelay1_reg_next(23);
        NormalizeAnswerDelay1_reg(24) <= NormalizeAnswerDelay1_reg_next(24);
        NormalizeAnswerDelay1_reg(25) <= NormalizeAnswerDelay1_reg_next(25);
        NormalizeAnswerDelay1_reg(26) <= NormalizeAnswerDelay1_reg_next(26);
        NormalizeAnswerDelay1_reg(27) <= NormalizeAnswerDelay1_reg_next(27);
        NormalizeAnswerDelay1_reg(28) <= NormalizeAnswerDelay1_reg_next(28);
      END IF;
    END IF;
  END PROCESS NormalizeAnswerDelay1_process;

  NormalizeAnswerDelay1_out1 <= NormalizeAnswerDelay1_reg(28);
  NormalizeAnswerDelay1_reg_next(0) <= Switch4_out1;
  NormalizeAnswerDelay1_reg_next(1) <= NormalizeAnswerDelay1_reg(0);
  NormalizeAnswerDelay1_reg_next(2) <= NormalizeAnswerDelay1_reg(1);
  NormalizeAnswerDelay1_reg_next(3) <= NormalizeAnswerDelay1_reg(2);
  NormalizeAnswerDelay1_reg_next(4) <= NormalizeAnswerDelay1_reg(3);
  NormalizeAnswerDelay1_reg_next(5) <= NormalizeAnswerDelay1_reg(4);
  NormalizeAnswerDelay1_reg_next(6) <= NormalizeAnswerDelay1_reg(5);
  NormalizeAnswerDelay1_reg_next(7) <= NormalizeAnswerDelay1_reg(6);
  NormalizeAnswerDelay1_reg_next(8) <= NormalizeAnswerDelay1_reg(7);
  NormalizeAnswerDelay1_reg_next(9) <= NormalizeAnswerDelay1_reg(8);
  NormalizeAnswerDelay1_reg_next(10) <= NormalizeAnswerDelay1_reg(9);
  NormalizeAnswerDelay1_reg_next(11) <= NormalizeAnswerDelay1_reg(10);
  NormalizeAnswerDelay1_reg_next(12) <= NormalizeAnswerDelay1_reg(11);
  NormalizeAnswerDelay1_reg_next(13) <= NormalizeAnswerDelay1_reg(12);
  NormalizeAnswerDelay1_reg_next(14) <= NormalizeAnswerDelay1_reg(13);
  NormalizeAnswerDelay1_reg_next(15) <= NormalizeAnswerDelay1_reg(14);
  NormalizeAnswerDelay1_reg_next(16) <= NormalizeAnswerDelay1_reg(15);
  NormalizeAnswerDelay1_reg_next(17) <= NormalizeAnswerDelay1_reg(16);
  NormalizeAnswerDelay1_reg_next(18) <= NormalizeAnswerDelay1_reg(17);
  NormalizeAnswerDelay1_reg_next(19) <= NormalizeAnswerDelay1_reg(18);
  NormalizeAnswerDelay1_reg_next(20) <= NormalizeAnswerDelay1_reg(19);
  NormalizeAnswerDelay1_reg_next(21) <= NormalizeAnswerDelay1_reg(20);
  NormalizeAnswerDelay1_reg_next(22) <= NormalizeAnswerDelay1_reg(21);
  NormalizeAnswerDelay1_reg_next(23) <= NormalizeAnswerDelay1_reg(22);
  NormalizeAnswerDelay1_reg_next(24) <= NormalizeAnswerDelay1_reg(23);
  NormalizeAnswerDelay1_reg_next(25) <= NormalizeAnswerDelay1_reg(24);
  NormalizeAnswerDelay1_reg_next(26) <= NormalizeAnswerDelay1_reg(25);
  NormalizeAnswerDelay1_reg_next(27) <= NormalizeAnswerDelay1_reg(26);
  NormalizeAnswerDelay1_reg_next(28) <= NormalizeAnswerDelay1_reg(27);

  Constant_out1_4 <= to_unsigned(16#01#, 8);

  Add1_out1_28 <= NormalizeAnswerDelay1_out1 - Constant_out1_4;

  
  Switch1_out1_24 <= Add1_out1_28 WHEN Bit_Slice5_out1 = '0' ELSE
      NormalizeAnswerDelay1_out1;

  Add_out1_30 <= NormalizeAnswerDelay1_out1 + Constant_out1_4;

  
  Switch_out1_25 <= Switch1_out1_24 WHEN Bit_Slice4_out1_1 = '0' ELSE
      Add_out1_30;

  Bit_Reduce1_out1_3 <= (Add1_out1_28(7) OR Add1_out1_28(6) OR Add1_out1_28(5) OR Add1_out1_28(4) OR Add1_out1_28(3) OR Add1_out1_28(2) OR Add1_out1_28(1) OR Add1_out1_28(0));

  Logical_Operator_out1_3 <=  NOT Bit_Reduce1_out1_3;

  Logical_Operator4_out1_1 <= Bit_Slice5_out1 OR Logical_Operator_out1_3;

  Bit_Slice3_out1_1 <= NormalizeAnswerDelay2_out1(55 DOWNTO 32);

  Bit_Slice2_out1_2 <= NormalizeAnswerDelay2_out1(56 DOWNTO 33);

  
  Switch3_out1_1 <= Bit_Slice3_out1_1 WHEN Logical_Operator4_out1_1 = '0' ELSE
      Bit_Slice2_out1_2;

  
  Compare_To_Constant_out1 <= '1' WHEN NormalizeAnswerDelay1_out1 = to_unsigned(16#FE#, 8) ELSE
      '0';

  Bit_Slice1_out1_5 <= NormalizeAnswerDelay2_out1(57 DOWNTO 34);

  Constant1_out1_4 <= to_unsigned(16#000000#, 24);

  
  Switch4_out1_1 <= Bit_Slice1_out1_5 WHEN Compare_To_Constant_out1 = '0' ELSE
      Constant1_out1_4;

  
  Switch2_out1_1 <= Switch3_out1_1 WHEN Bit_Slice4_out1_1 = '0' ELSE
      Switch4_out1_1;

  MainDelay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      MainDelay4_out1 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        MainDelay4_out1 <= Switch2_out1_1;
      END IF;
    END IF;
  END PROCESS MainDelay4_process;


  BitSlice4_out1 <= MainDelay4_out1(23 DOWNTO 1);

  LSB_out1 <= MainDelay4_out1(1);

  Bit_Slice7_out1 <= Bit_Slice3_out1_1(1);

  Logical_Operator5_out1 <= Bit_Slice4_out1_1 OR Logical_Operator4_out1_1;

  Logical_Operator3_out1_1 <= Bit_Slice4_out1_1 AND Bit_Slice7_out1;

  Bit_Slice6_out1_1 <= Bit_Slice3_out1_1(0);

  Logical_Operator6_out1 <= Logical_Operator5_out1 AND Bit_Slice6_out1_1;

  Logical_Operator2_out1_1 <= Logical_Operator3_out1_1 OR Logical_Operator6_out1;

  Bit_Slice_out1_29 <= NormalizeAnswerDelay2_out1(31 DOWNTO 0);

  Bit_Reduce_out1_3 <= (Bit_Slice_out1_29(31) OR Bit_Slice_out1_29(30) OR Bit_Slice_out1_29(29) OR Bit_Slice_out1_29(28) OR Bit_Slice_out1_29(27) OR Bit_Slice_out1_29(26) OR Bit_Slice_out1_29(25) OR Bit_Slice_out1_29(24) OR Bit_Slice_out1_29(23) OR Bit_Slice_out1_29(22) OR Bit_Slice_out1_29(21) OR Bit_Slice_out1_29(20) OR Bit_Slice_out1_29(19) OR Bit_Slice_out1_29(18) OR Bit_Slice_out1_29(17) OR Bit_Slice_out1_29(16) OR Bit_Slice_out1_29(15) OR Bit_Slice_out1_29(14) OR Bit_Slice_out1_29(13) OR Bit_Slice_out1_29(12) OR Bit_Slice_out1_29(11) OR Bit_Slice_out1_29(10) OR Bit_Slice_out1_29(9) OR Bit_Slice_out1_29(8) OR Bit_Slice_out1_29(7) OR Bit_Slice_out1_29(6) OR Bit_Slice_out1_29(5) OR Bit_Slice_out1_29(4) OR Bit_Slice_out1_29(3) OR Bit_Slice_out1_29(2) OR Bit_Slice_out1_29(1) OR Bit_Slice_out1_29(0));

  Logical_Operator1_out1_2 <= Logical_Operator2_out1_1 OR Bit_Reduce_out1_3;

  Round_out1 <= MainDelay4_out1(0);

  MainDelay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      MainDelay5_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        MainDelay5_out1 <= Logical_Operator1_out1_2;
      END IF;
    END IF;
  END PROCESS MainDelay5_process;


  alphabitget_Mant_tmp_2_0_out1 <= LSB_out1 OR MainDelay5_out1;

  alphabitget_Mant_tmp_1_0_out1 <= Round_out1 AND alphabitget_Mant_tmp_2_0_out1;

  MainDelay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      MainDelay3_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        MainDelay3_out1 <= Switch_out1_25;
      END IF;
    END IF;
  END PROCESS MainDelay3_process;


  Bit_Concat_out1_6 <= BitSlice4_out1 & alphabitget_Mant_tmp_1_0_out1;

  Bit_Reduce_out1_4 <= (Bit_Concat_out1_6(23) AND Bit_Concat_out1_6(22) AND Bit_Concat_out1_6(21) AND Bit_Concat_out1_6(20) AND Bit_Concat_out1_6(19) AND Bit_Concat_out1_6(18) AND Bit_Concat_out1_6(17) AND Bit_Concat_out1_6(16) AND Bit_Concat_out1_6(15) AND Bit_Concat_out1_6(14) AND Bit_Concat_out1_6(13) AND Bit_Concat_out1_6(12) AND Bit_Concat_out1_6(11) AND Bit_Concat_out1_6(10) AND Bit_Concat_out1_6(9) AND Bit_Concat_out1_6(8) AND Bit_Concat_out1_6(7) AND Bit_Concat_out1_6(6) AND Bit_Concat_out1_6(5) AND Bit_Concat_out1_6(4) AND Bit_Concat_out1_6(3) AND Bit_Concat_out1_6(2) AND Bit_Concat_out1_6(1) AND Bit_Concat_out1_6(0));

  Exp_cast_1_like_Exp_add_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & Bit_Reduce_out1_4;
  Exp_cast_1_like_Exp_out1 <= MainDelay3_out1 + Exp_cast_1_like_Exp_add_cast;

  Bit_Concat_out1_7 <= unsigned'(MatchingDelay4_out1 & MatchingDelay4_out1);

  Bit_Concat1_out1_5 <= Bit_Concat_out1_7 & Bit_Concat_out1_7;

  Bit_Concat2_out1_5 <= Bit_Concat1_out1_5 & Bit_Concat1_out1_5;

  
  Switch1_out1_25 <= Exp_cast_1_like_Exp_out1 WHEN CheckResetToZero_out1 = '0' ELSE
      Bit_Concat2_out1_5;

  OutputDelay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      OutputDelay2_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        OutputDelay2_out1 <= Switch1_out1_25;
      END IF;
    END IF;
  END PROCESS OutputDelay2_process;


  Constant_out1_5 <= to_unsigned(16#000001#, 23);

  Mant_tmp_cast_2_like_Man_out1 <= BitSlice4_out1 + Constant_out1_5;

  
  Switch_out1_26 <= BitSlice4_out1 WHEN alphabitget_Mant_tmp_1_0_out1 = '0' ELSE
      Mant_tmp_cast_2_like_Man_out1;

  Logical_Operator_out1_4 <= Logical_Operator_out1 OR Logical_Operator_out1_1;

  Constant_out1_6 <= to_unsigned(16#000000#, 23);

  
  Switch1_out1_26 <= InputDelay6_out1 WHEN Logical_Operator_out1 = '0' ELSE
      InputDelay3_out1;

  
  Switch_out1_27 <= Constant_out1_6 WHEN Logical_Operator_out1_4 = '0' ELSE
      Switch1_out1_26;

  MatchingDelay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      MatchingDelay2_reg(0) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(1) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(2) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(3) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(4) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(5) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(6) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(7) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(8) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(9) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(10) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(11) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(12) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(13) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(14) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(15) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(16) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(17) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(18) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(19) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(20) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(21) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(22) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(23) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(24) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(25) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(26) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(27) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(28) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(29) <= to_unsigned(16#000000#, 23);
      MatchingDelay2_reg(30) <= to_unsigned(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        MatchingDelay2_reg(0) <= MatchingDelay2_reg_next(0);
        MatchingDelay2_reg(1) <= MatchingDelay2_reg_next(1);
        MatchingDelay2_reg(2) <= MatchingDelay2_reg_next(2);
        MatchingDelay2_reg(3) <= MatchingDelay2_reg_next(3);
        MatchingDelay2_reg(4) <= MatchingDelay2_reg_next(4);
        MatchingDelay2_reg(5) <= MatchingDelay2_reg_next(5);
        MatchingDelay2_reg(6) <= MatchingDelay2_reg_next(6);
        MatchingDelay2_reg(7) <= MatchingDelay2_reg_next(7);
        MatchingDelay2_reg(8) <= MatchingDelay2_reg_next(8);
        MatchingDelay2_reg(9) <= MatchingDelay2_reg_next(9);
        MatchingDelay2_reg(10) <= MatchingDelay2_reg_next(10);
        MatchingDelay2_reg(11) <= MatchingDelay2_reg_next(11);
        MatchingDelay2_reg(12) <= MatchingDelay2_reg_next(12);
        MatchingDelay2_reg(13) <= MatchingDelay2_reg_next(13);
        MatchingDelay2_reg(14) <= MatchingDelay2_reg_next(14);
        MatchingDelay2_reg(15) <= MatchingDelay2_reg_next(15);
        MatchingDelay2_reg(16) <= MatchingDelay2_reg_next(16);
        MatchingDelay2_reg(17) <= MatchingDelay2_reg_next(17);
        MatchingDelay2_reg(18) <= MatchingDelay2_reg_next(18);
        MatchingDelay2_reg(19) <= MatchingDelay2_reg_next(19);
        MatchingDelay2_reg(20) <= MatchingDelay2_reg_next(20);
        MatchingDelay2_reg(21) <= MatchingDelay2_reg_next(21);
        MatchingDelay2_reg(22) <= MatchingDelay2_reg_next(22);
        MatchingDelay2_reg(23) <= MatchingDelay2_reg_next(23);
        MatchingDelay2_reg(24) <= MatchingDelay2_reg_next(24);
        MatchingDelay2_reg(25) <= MatchingDelay2_reg_next(25);
        MatchingDelay2_reg(26) <= MatchingDelay2_reg_next(26);
        MatchingDelay2_reg(27) <= MatchingDelay2_reg_next(27);
        MatchingDelay2_reg(28) <= MatchingDelay2_reg_next(28);
        MatchingDelay2_reg(29) <= MatchingDelay2_reg_next(29);
        MatchingDelay2_reg(30) <= MatchingDelay2_reg_next(30);
      END IF;
    END IF;
  END PROCESS MatchingDelay2_process;

  MatchingDelay2_out1 <= MatchingDelay2_reg(30);
  MatchingDelay2_reg_next(0) <= Switch_out1_27;
  MatchingDelay2_reg_next(1) <= MatchingDelay2_reg(0);
  MatchingDelay2_reg_next(2) <= MatchingDelay2_reg(1);
  MatchingDelay2_reg_next(3) <= MatchingDelay2_reg(2);
  MatchingDelay2_reg_next(4) <= MatchingDelay2_reg(3);
  MatchingDelay2_reg_next(5) <= MatchingDelay2_reg(4);
  MatchingDelay2_reg_next(6) <= MatchingDelay2_reg(5);
  MatchingDelay2_reg_next(7) <= MatchingDelay2_reg(6);
  MatchingDelay2_reg_next(8) <= MatchingDelay2_reg(7);
  MatchingDelay2_reg_next(9) <= MatchingDelay2_reg(8);
  MatchingDelay2_reg_next(10) <= MatchingDelay2_reg(9);
  MatchingDelay2_reg_next(11) <= MatchingDelay2_reg(10);
  MatchingDelay2_reg_next(12) <= MatchingDelay2_reg(11);
  MatchingDelay2_reg_next(13) <= MatchingDelay2_reg(12);
  MatchingDelay2_reg_next(14) <= MatchingDelay2_reg(13);
  MatchingDelay2_reg_next(15) <= MatchingDelay2_reg(14);
  MatchingDelay2_reg_next(16) <= MatchingDelay2_reg(15);
  MatchingDelay2_reg_next(17) <= MatchingDelay2_reg(16);
  MatchingDelay2_reg_next(18) <= MatchingDelay2_reg(17);
  MatchingDelay2_reg_next(19) <= MatchingDelay2_reg(18);
  MatchingDelay2_reg_next(20) <= MatchingDelay2_reg(19);
  MatchingDelay2_reg_next(21) <= MatchingDelay2_reg(20);
  MatchingDelay2_reg_next(22) <= MatchingDelay2_reg(21);
  MatchingDelay2_reg_next(23) <= MatchingDelay2_reg(22);
  MatchingDelay2_reg_next(24) <= MatchingDelay2_reg(23);
  MatchingDelay2_reg_next(25) <= MatchingDelay2_reg(24);
  MatchingDelay2_reg_next(26) <= MatchingDelay2_reg(25);
  MatchingDelay2_reg_next(27) <= MatchingDelay2_reg(26);
  MatchingDelay2_reg_next(28) <= MatchingDelay2_reg(27);
  MatchingDelay2_reg_next(29) <= MatchingDelay2_reg(28);
  MatchingDelay2_reg_next(30) <= MatchingDelay2_reg(29);

  
  Switch2_out1_2 <= Switch_out1_26 WHEN CheckResetToZero_out1 = '0' ELSE
      MatchingDelay2_out1;

  OutputDelay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      OutputDelay3_out1 <= to_unsigned(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        OutputDelay3_out1 <= Switch2_out1_2;
      END IF;
    END IF;
  END PROCESS OutputDelay3_process;


  -- Combine FP sign, exponent, mantissa into 32 bit word
  nfp_out_pack <= OutputDelay1_out1 & OutputDelay2_out1 & OutputDelay3_out1;

  nfp_out <= std_logic_vector(nfp_out_pack);

END rtl;

