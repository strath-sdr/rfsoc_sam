-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\mw_spectrumanalyser\mw_spectrumanalyser_src_nfp_pow10_single.vhd
-- Created: 2020-12-24 09:22:44
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: mw_spectrumanalyser_src_nfp_pow10_single
-- Source Path: mw_spectrumanalyser/Spectrum Analyser/Spectrum Options/nfp_pow10_single
-- Hierarchy Level: 2
-- 
-- {Latency Strategy = "Max", Denormal Handling = "off"}
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.mw_spectrumanalyser_src_Spectrum_Analyser_pkg.ALL;

ENTITY mw_spectrumanalyser_src_nfp_pow10_single IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_16_0                        :   IN    std_logic;
        nfp_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        nfp_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END mw_spectrumanalyser_src_nfp_pow10_single;


ARCHITECTURE rtl OF mw_spectrumanalyser_src_nfp_pow10_single IS

  -- Signals
  SIGNAL Constant8_out1                   : std_logic;  -- ufix1
  SIGNAL Constant7_out1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL Delay4_out1                      : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1            : std_logic;  -- ufix1
  SIGNAL Add_out1                         : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay3_out1                      : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Add_add_cast                     : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay1_out1                      : std_logic;  -- ufix1
  SIGNAL nfp_in_unsigned                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL aSign                            : std_logic;  -- ufix1
  SIGNAL aExponent                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL aMantissa                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay1_out1_1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL aExponent_cfType_Exponent_I_out1 : std_logic;  -- ufix1
  SIGNAL Delay9_reg                       : std_logic_vector(0 TO 23);  -- ufix1 [24]
  SIGNAL Delay9_reg_next                  : std_logic_vector(0 TO 23);  -- ufix1 [24]
  SIGNAL Delay9_out1                      : std_logic;  -- ufix1
  SIGNAL C3_out1                          : std_logic;  -- ufix1
  SIGNAL Delay_out1                       : std_logic;  -- ufix1
  SIGNAL Compare_To_Zero_out1             : std_logic;  -- ufix1
  SIGNAL Delay2_out1                      : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Constant_out1                    : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch_out1                      : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL aMantissa_0_out1                 : std_logic;  -- ufix1
  SIGNAL alphaaMantissa_0_aSign_out1      : std_logic;  -- ufix1
  SIGNAL C2_out1                          : std_logic;  -- ufix1
  SIGNAL if_aMantissa_0_aSign_2_out1      : std_logic;  -- ufix1
  SIGNAL Delay6_reg                       : std_logic_vector(0 TO 23);  -- ufix1 [24]
  SIGNAL Delay6_reg_next                  : std_logic_vector(0 TO 23);  -- ufix1 [24]
  SIGNAL Delay6_out1                      : std_logic;  -- ufix1
  SIGNAL if_aExponent_cfType_Exponent_2_out1 : std_logic;  -- ufix1
  SIGNAL Constant1_out1                   : std_logic;  -- ufix1
  SIGNAL Switch1_out1                     : std_logic;  -- ufix1
  SIGNAL Delay3_out1_1                    : std_logic;  -- ufix1
  SIGNAL Delay30_reg                      : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay30_reg_next                 : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay30_out1                     : std_logic;  -- ufix1
  SIGNAL C1_out1                          : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL C_out1                           : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL if_aSign_out1                    : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL alpha0_out1                      : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Exponent_0_out1                  : std_logic;  -- ufix1
  SIGNAL alpha1_out1                      : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1                 : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL alpha0_out1_1                    : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL if_Exponent_0_cfType_Exp_out1    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL reinterpretcast_mant_cor_nume_out1 : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL Delay43_out1                     : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL alpha1_66096404753625392914_out1 : unsigned(32 DOWNTO 0);  -- ufix33_En31
  SIGNAL tmp1_1_66096404753625392914_mul_temp : unsigned(56 DOWNTO 0);  -- ufix57_En54
  SIGNAL tmp1_1_66096404753625392914_out1 : unsigned(32 DOWNTO 0);  -- ufix33_En31
  SIGNAL Delay_reg                        : vector_of_unsigned33(0 TO 1);  -- ufix33 [2]
  SIGNAL Delay_reg_next                   : vector_of_unsigned33(0 TO 1);  -- ufix33_En31 [2]
  SIGNAL Delay_out1_1                     : unsigned(32 DOWNTO 0);  -- ufix33_En31
  SIGNAL BitSlice_out1                    : std_logic;  -- ufix1
  SIGNAL C_out1_1                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_Exponent_0_out1               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay1_reg                       : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay1_reg_next                  : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL Delay1_out1_2                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C1_out1_1                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL exp_cor_1_add_temp               : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL exp_cor_1_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay3_out1_2                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C_out1_2                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL exp_cor_2_add_temp               : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL exp_cor_2_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay2_out1_1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_bitget_tmp2_tmp2_WordLength_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Concat_out1_1                : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL reinterpretcast_bitconcat_fi_0_out1 : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL exp_tmp_upperBound_relop1        : std_logic;
  SIGNAL Delay4_out1_1                    : std_logic;  -- ufix1
  SIGNAL Delay38_reg                      : std_logic_vector(0 TO 19);  -- ufix1 [20]
  SIGNAL Delay38_reg_next                 : std_logic_vector(0 TO 19);  -- ufix1 [20]
  SIGNAL Delay38_out1                     : std_logic;  -- ufix1
  SIGNAL Delay1_reg_1                     : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay1_reg_next_1                : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay1_out1_3                    : std_logic;  -- ufix1
  SIGNAL Delay34_reg                      : std_logic_vector(0 TO 18);  -- ufix1 [19]
  SIGNAL Delay34_reg_next                 : std_logic_vector(0 TO 18);  -- ufix1 [19]
  SIGNAL Delay34_out1                     : std_logic;  -- ufix1
  SIGNAL C1_out1_2                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C_out1_3                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_aSign_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL alpha0_out1_2                    : std_logic;  -- ufix1
  SIGNAL alpha127_out1                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL alpha1_out1_1                    : std_logic;  -- ufix1
  SIGNAL C4_out1                          : unsigned(39 DOWNTO 0);  -- ufix40_En31
  SIGNAL cast_cfType_ExponentBias_lik_out1 : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL exp_tmp_cast_cfType_Exponent_out1 : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL DTC_out1                         : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL BitSlice_out1_1                  : std_logic;  -- ufix1
  SIGNAL Delay3_out1_3                    : std_logic;  -- ufix1
  SIGNAL alpha3_out1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL BitSlice2_out1                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reinterpretcast_bitsliceget_t_out1 : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL BitSlice1_out1                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reinterpretcast_bitsliceget_t_out1_1 : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL if_bitget_tmp2_tmp2_WordLength_1_out1 : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL Bit_Concat3_out1                 : unsigned(39 DOWNTO 0);  -- ufix40
  SIGNAL reinterpretcast_bitconcat_fi_0_out1_1 : unsigned(39 DOWNTO 0);  -- ufix40_En31
  SIGNAL Delay_out1_2                     : unsigned(39 DOWNTO 0);  -- ufix40_En31
  SIGNAL DTC2_out1                        : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Delay5_out1                      : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL dynamic_shift_cast               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bitsll_tmp1_shift_length_out1    : unsigned(39 DOWNTO 0);  -- ufix40_En31
  SIGNAL cast_cfType_ExponentBias_lik_out1_1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL cast_cfType_ExponentBias_lik_sub_cast : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL cast_cfType_ExponentBias_lik_sub_cast_1 : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL cast_cfType_ExponentBias_lik_sub_temp : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL cast_cfType_ExponentBias_lik_out1_2 : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL DTC1_out1                        : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Delay1_out1_4                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL dynamic_shift_cast_1             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic_out1            : unsigned(39 DOWNTO 0);  -- ufix40_En31
  SIGNAL if_shift_sign_out1               : unsigned(39 DOWNTO 0);  -- ufix40_En31
  SIGNAL if_exp_tmp_upperBound_1_out1     : unsigned(39 DOWNTO 0);  -- ufix40_En31
  SIGNAL Delay3_out1_4                    : unsigned(39 DOWNTO 0);  -- ufix40_En31
  SIGNAL BitSlice2_out1_1                 : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Bit_Concat1_out1_1               : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL reinterpretcast_bitconcat_fi_0_out1_2 : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL alpha127_exp_tmp_out1            : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL cast_1_like_mant_frac_out1       : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL alpha0_out1_3                    : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_2                  : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL Bit_Concat_out1_2                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reinterpretcast_bitconcat_fi_0_out1_3 : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL cast_1_like_mant_frac_m_out1     : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL BitSlice1_out1_1                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_1          : std_logic;  -- ufix1
  SIGNAL C1_out1_3                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_adj_exp_tmp_out1             : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_4                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_adj_exp_tmp1_out1            : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL if_sticky_out1                   : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL if_aSign_1_out1                  : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay30_reg_1                    : vector_of_signed10(0 TO 17);  -- sfix10 [18]
  SIGNAL Delay30_reg_next_1               : vector_of_signed10(0 TO 17);  -- sfix10 [18]
  SIGNAL Delay30_out1_1                   : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_out_0_out1                   : std_logic;  -- ufix1
  SIGNAL C2_out1_1                        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Logical_Operator1_out1           : std_logic;  -- ufix1
  SIGNAL if_sticky_1_out1                 : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL Delay6_out1_1                    : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL Constant_out1_1                  : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_3                : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Data_Type_Conversion_out1        : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice_out1_3                  : std_logic;  -- ufix1
  SIGNAL Log2Table_1_out1                 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2Table_1_out1               : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay12_out1                     : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1                  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_2                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_4                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_2_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_2_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_1_out1  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_1 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay1_out1_5                    : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_1                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_3                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_5                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_1 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_3_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_3_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_1 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1    : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_2 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay11_out1                     : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_2                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_4                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_6                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_2 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_4_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_4_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_2 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_1  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_3 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay3_out1_5                    : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_3                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_5                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_7                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_3 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_5_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_5_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_3 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_2  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_4 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay13_out1                     : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_4                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_6                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_8                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_4 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_6_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_6_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_4 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_3  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_5 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay5_out1_1                    : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_5                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_7                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_9                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_5 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_7_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_7_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_5 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_4  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_6 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay15_out1                     : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_6                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_8                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_10                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_6 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_8_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_8_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_6 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_5  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_7 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay7_out1                      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_7                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_9                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_11                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_7 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_9_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_9_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_7 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_6  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_8 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay17_out1                     : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_8                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_10                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_12                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_8 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_10_out1          : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_10_out1     : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_8 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_7  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_9 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay9_out1_1                    : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_9                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_11                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_13                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_9 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_11_out1          : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_11_out1     : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_9 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_8  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_10 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Delay19_out1                     : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_10               : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_12                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_14                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_10 : std_logic;  -- ufix1
  SIGNAL C1_out1_4                        : signed(3 DOWNTO 0);  -- sfix4_En1
  SIGNAL C_out1_5                         : signed(3 DOWNTO 0);  -- sfix4_En1
  SIGNAL if_bitget_w_w_WordLength_1_1_out1 : signed(3 DOWNTO 0);  -- sfix4_En1
  SIGNAL Delay11_out1_1                   : signed(3 DOWNTO 0);  -- sfix4_En1
  SIGNAL Constant_out1_2                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Concat_out1_4                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL dtc1_out1_1                      : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL bitsrl_y_int32_2_out1            : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL y_tmp1_out1                      : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL y_tmp1_out1_1                    : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL if_bitget_w_w_WordLength_0_1_out1 : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_1 : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL Delay_out1_3                     : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL Constant_out1_3                  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Concat_out1_5                : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL dtc1_out1_2                      : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL bitsrl_y_int32_2_out1_1          : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL y_tmp1_out1_2                    : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL y_tmp1_out1_3                    : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_1 : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_2 : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL Delay10_out1                     : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL Constant_out1_4                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Concat_out1_6                : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL dtc1_out1_3                      : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL bitsrl_y_int32_2_out1_2          : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL y_tmp1_out1_4                    : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL y_tmp1_out1_5                    : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_2 : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_3 : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Delay2_out1_2                    : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Constant_out1_5                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Concat_out1_7                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL dtc1_out1_4                      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL bitsrl_y_int32_2_out1_3          : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL y_tmp1_out1_6                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL y_tmp1_out1_7                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_3 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_4 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay12_out1_1                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Constant_out1_6                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Concat_out1_8                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL dtc1_out1_5                      : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL bitsrl_y_int32_2_out1_4          : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL y_tmp1_out1_8                    : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL y_tmp1_out1_9                    : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_4 : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_5 : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL Delay4_out1_2                    : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL Constant_out1_7                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Bit_Concat_out1_9                : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL dtc1_out1_6                      : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL bitsrl_y_int32_2_out1_5          : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL y_tmp1_out1_10                   : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL y_tmp1_out1_11                   : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_5 : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_6 : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL Delay14_out1                     : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL Constant_out1_8                  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Concat_out1_10               : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL dtc1_out1_7                      : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL bitsrl_y_int32_2_out1_6          : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_12                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_13                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_6 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_7 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Delay6_out1_2                    : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL bitsrl_y_int32_2_out1_7          : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_14                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_15                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_7 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_8 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Delay16_out1                     : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL bitsrl_y_int32_2_out1_8          : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_16                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_17                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_8 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_9 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Delay8_out1                      : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL bitsrl_y_int32_2_out1_9          : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_18                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_19                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_9 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_10 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Delay18_out1                     : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL bitsrl_y_int32_2_out1_10         : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_20                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_21                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_10 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_11 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Delay1_reg_2                     : vector_of_signed34(0 TO 2);  -- sfix34 [3]
  SIGNAL Delay1_reg_next_2                : vector_of_signed34(0 TO 2);  -- sfix34_En31 [3]
  SIGNAL Delay1_out1_6                    : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Bit_Slice2_out1                  : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL Data_Type_Conversion1_out1       : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL Log2Table_int32_11_out1_1        : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_11_out1_1   : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_10 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_9  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_11 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Bit_Slice_out1                   : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL Data_Type_Conversion_out1_1      : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL Delay22_out1                     : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL alpha0_69314717873930931_out1    : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL tmp1_0_69314717873930931_mul_temp : signed(41 DOWNTO 0);  -- sfix42_En38
  SIGNAL tmp1_0_69314717873930931_out1    : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL Delay_reg_1                      : vector_of_signed21(0 TO 1);  -- sfix21 [2]
  SIGNAL Delay_reg_next_1                 : vector_of_signed21(0 TO 1);  -- sfix21_En19 [2]
  SIGNAL Delay_out1_4                     : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL tmp2_y_mul_temp                  : signed(41 DOWNTO 0);  -- sfix42_En38
  SIGNAL tmp2_y_out1                      : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL Delay3_reg                       : vector_of_signed21(0 TO 1);  -- sfix21 [2]
  SIGNAL Delay3_reg_next                  : vector_of_signed21(0 TO 1);  -- sfix21_En19 [2]
  SIGNAL Delay3_out1_6                    : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL Bit_Slice1_out1                  : std_logic;  -- ufix1
  SIGNAL Constant1_out1_1                 : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Constant_out1_9                  : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Switch_out1_1                    : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Delay2_reg                       : vector_of_signed34(0 TO 1);  -- sfix34 [2]
  SIGNAL Delay2_reg_next                  : vector_of_signed34(0 TO 1);  -- sfix34_En31 [2]
  SIGNAL Delay2_out1_3                    : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Bit_Concat_out1_11               : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL DTC2_out1_1                      : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp3_out1                      : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Delay31_out1                     : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL BitSlice_out1_15                 : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL if_exp_out_0_1_out1              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Delay36_out1                     : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Concat_out1_12               : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL BitSlice1_out1_13                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_16                 : std_logic;  -- ufix1
  SIGNAL Delay37_reg                      : std_logic_vector(0 TO 18);  -- ufix1 [19]
  SIGNAL Delay37_reg_next                 : std_logic_vector(0 TO 18);  -- ufix1 [19]
  SIGNAL Delay37_out1                     : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_2_0_out1    : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_1_0_out1    : std_logic;  -- ufix1
  SIGNAL cast_2_like_Mant_tmp_out1        : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL Mant_tmp_cast_2_like_Man_out1    : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL if_bitget_Mant_tmp_1_0_out1      : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL BitSlice2_out1_2                 : std_logic;  -- ufix1
  SIGNAL BitSlice2_out1_3                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_2          : std_logic;  -- ufix1
  SIGNAL BitSlice1_out1_14                : std_logic;  -- ufix1
  SIGNAL bitget_y_cfType_Pow2Intermedi_out1 : std_logic;  -- ufix1
  SIGNAL C1_out1_5                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C_out1_6                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_bitget_y_cfType_Pow2Intermed_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL DTC_out1_1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_exp_out_0_out1                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay35_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL cast_1_like_Exp_out1             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Exp_cast_1_like_Exp_out1         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_in_range_out1                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C_out1_7                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_aMantissa_0_aSign_out1        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay7_reg                       : vector_of_unsigned8(0 TO 23);  -- ufix8 [24]
  SIGNAL Delay7_reg_next                  : vector_of_unsigned8(0 TO 23);  -- ufix8 [24]
  SIGNAL Delay7_out1_1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_aExponent_cfType_Exponent_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant3_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch6_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay4_out1_3                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C2_out1_2                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Compare_To_Zero_out1_1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_3          : std_logic;  -- ufix1
  SIGNAL BitSlice3_out1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C_out1_8                         : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_in_range_1_out1               : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay8_reg                       : vector_of_unsigned23(0 TO 23);  -- ufix23 [24]
  SIGNAL Delay8_reg_next                  : vector_of_unsigned23(0 TO 23);  -- ufix23 [24]
  SIGNAL Delay8_out1_1                    : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_aExponent_cfType_Exponent_1_out1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Constant2_out1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch5_out1                     : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay5_out1_2                    : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL nfp_out_pack                     : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  Constant8_out1 <= '1';

  Constant7_out1 <= to_unsigned(16#18#, 6);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= '1';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay4_out1 <= Relational_Operator_relop1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Logical_Operator_out1 <= Constant8_out1 AND Delay4_out1;

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= to_unsigned(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay3_out1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Add_add_cast <= '0' & '0' & '0' & '0' & '0' & Logical_Operator_out1;
  Add_out1 <= Delay3_out1 + Add_add_cast;

  
  Relational_Operator_relop1 <= '1' WHEN Add_out1 <= Constant7_out1 ELSE
      '0';

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= '1';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay1_out1 <= Relational_Operator_relop1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  nfp_in_unsigned <= unsigned(nfp_in);

  -- Split 32 bit word into FP sign, exponent, mantissa
  aSign <= nfp_in_unsigned(31);
  aExponent <= nfp_in_unsigned(30 DOWNTO 23);
  aMantissa <= nfp_in_unsigned(22 DOWNTO 0);

  Delay1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay1_out1_1 <= aExponent;
      END IF;
    END IF;
  END PROCESS Delay1_1_process;


  
  aExponent_cfType_Exponent_I_out1 <= '1' WHEN Delay1_out1_1 = to_unsigned(16#FF#, 8) ELSE
      '0';

  Delay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_reg(0) <= '0';
      Delay9_reg(1) <= '0';
      Delay9_reg(2) <= '0';
      Delay9_reg(3) <= '0';
      Delay9_reg(4) <= '0';
      Delay9_reg(5) <= '0';
      Delay9_reg(6) <= '0';
      Delay9_reg(7) <= '0';
      Delay9_reg(8) <= '0';
      Delay9_reg(9) <= '0';
      Delay9_reg(10) <= '0';
      Delay9_reg(11) <= '0';
      Delay9_reg(12) <= '0';
      Delay9_reg(13) <= '0';
      Delay9_reg(14) <= '0';
      Delay9_reg(15) <= '0';
      Delay9_reg(16) <= '0';
      Delay9_reg(17) <= '0';
      Delay9_reg(18) <= '0';
      Delay9_reg(19) <= '0';
      Delay9_reg(20) <= '0';
      Delay9_reg(21) <= '0';
      Delay9_reg(22) <= '0';
      Delay9_reg(23) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay9_reg(0) <= Delay9_reg_next(0);
        Delay9_reg(1) <= Delay9_reg_next(1);
        Delay9_reg(2) <= Delay9_reg_next(2);
        Delay9_reg(3) <= Delay9_reg_next(3);
        Delay9_reg(4) <= Delay9_reg_next(4);
        Delay9_reg(5) <= Delay9_reg_next(5);
        Delay9_reg(6) <= Delay9_reg_next(6);
        Delay9_reg(7) <= Delay9_reg_next(7);
        Delay9_reg(8) <= Delay9_reg_next(8);
        Delay9_reg(9) <= Delay9_reg_next(9);
        Delay9_reg(10) <= Delay9_reg_next(10);
        Delay9_reg(11) <= Delay9_reg_next(11);
        Delay9_reg(12) <= Delay9_reg_next(12);
        Delay9_reg(13) <= Delay9_reg_next(13);
        Delay9_reg(14) <= Delay9_reg_next(14);
        Delay9_reg(15) <= Delay9_reg_next(15);
        Delay9_reg(16) <= Delay9_reg_next(16);
        Delay9_reg(17) <= Delay9_reg_next(17);
        Delay9_reg(18) <= Delay9_reg_next(18);
        Delay9_reg(19) <= Delay9_reg_next(19);
        Delay9_reg(20) <= Delay9_reg_next(20);
        Delay9_reg(21) <= Delay9_reg_next(21);
        Delay9_reg(22) <= Delay9_reg_next(22);
        Delay9_reg(23) <= Delay9_reg_next(23);
      END IF;
    END IF;
  END PROCESS Delay9_process;

  Delay9_out1 <= Delay9_reg(23);
  Delay9_reg_next(0) <= aExponent_cfType_Exponent_I_out1;
  Delay9_reg_next(1) <= Delay9_reg(0);
  Delay9_reg_next(2) <= Delay9_reg(1);
  Delay9_reg_next(3) <= Delay9_reg(2);
  Delay9_reg_next(4) <= Delay9_reg(3);
  Delay9_reg_next(5) <= Delay9_reg(4);
  Delay9_reg_next(6) <= Delay9_reg(5);
  Delay9_reg_next(7) <= Delay9_reg(6);
  Delay9_reg_next(8) <= Delay9_reg(7);
  Delay9_reg_next(9) <= Delay9_reg(8);
  Delay9_reg_next(10) <= Delay9_reg(9);
  Delay9_reg_next(11) <= Delay9_reg(10);
  Delay9_reg_next(12) <= Delay9_reg(11);
  Delay9_reg_next(13) <= Delay9_reg(12);
  Delay9_reg_next(14) <= Delay9_reg(13);
  Delay9_reg_next(15) <= Delay9_reg(14);
  Delay9_reg_next(16) <= Delay9_reg(15);
  Delay9_reg_next(17) <= Delay9_reg(16);
  Delay9_reg_next(18) <= Delay9_reg(17);
  Delay9_reg_next(19) <= Delay9_reg(18);
  Delay9_reg_next(20) <= Delay9_reg(19);
  Delay9_reg_next(21) <= Delay9_reg(20);
  Delay9_reg_next(22) <= Delay9_reg(21);
  Delay9_reg_next(23) <= Delay9_reg(22);

  C3_out1 <= '0';

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay_out1 <= aSign;
      END IF;
    END IF;
  END PROCESS Delay_process;


  
  Compare_To_Zero_out1 <= '1' WHEN Delay1_out1_1 = to_unsigned(16#00#, 8) ELSE
      '0';

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= to_unsigned(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay2_out1 <= aMantissa;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Constant_out1 <= to_unsigned(16#000000#, 23);

  
  Switch_out1 <= Delay2_out1 WHEN Compare_To_Zero_out1 = '0' ELSE
      Constant_out1;

  
  aMantissa_0_out1 <= '1' WHEN Switch_out1 = to_unsigned(16#000000#, 23) ELSE
      '0';

  alphaaMantissa_0_aSign_out1 <= Delay_out1 AND aMantissa_0_out1;

  C2_out1 <= '0';

  
  if_aMantissa_0_aSign_2_out1 <= Delay_out1 WHEN alphaaMantissa_0_aSign_out1 = '0' ELSE
      C2_out1;

  Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_reg(0) <= '0';
      Delay6_reg(1) <= '0';
      Delay6_reg(2) <= '0';
      Delay6_reg(3) <= '0';
      Delay6_reg(4) <= '0';
      Delay6_reg(5) <= '0';
      Delay6_reg(6) <= '0';
      Delay6_reg(7) <= '0';
      Delay6_reg(8) <= '0';
      Delay6_reg(9) <= '0';
      Delay6_reg(10) <= '0';
      Delay6_reg(11) <= '0';
      Delay6_reg(12) <= '0';
      Delay6_reg(13) <= '0';
      Delay6_reg(14) <= '0';
      Delay6_reg(15) <= '0';
      Delay6_reg(16) <= '0';
      Delay6_reg(17) <= '0';
      Delay6_reg(18) <= '0';
      Delay6_reg(19) <= '0';
      Delay6_reg(20) <= '0';
      Delay6_reg(21) <= '0';
      Delay6_reg(22) <= '0';
      Delay6_reg(23) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay6_reg(0) <= Delay6_reg_next(0);
        Delay6_reg(1) <= Delay6_reg_next(1);
        Delay6_reg(2) <= Delay6_reg_next(2);
        Delay6_reg(3) <= Delay6_reg_next(3);
        Delay6_reg(4) <= Delay6_reg_next(4);
        Delay6_reg(5) <= Delay6_reg_next(5);
        Delay6_reg(6) <= Delay6_reg_next(6);
        Delay6_reg(7) <= Delay6_reg_next(7);
        Delay6_reg(8) <= Delay6_reg_next(8);
        Delay6_reg(9) <= Delay6_reg_next(9);
        Delay6_reg(10) <= Delay6_reg_next(10);
        Delay6_reg(11) <= Delay6_reg_next(11);
        Delay6_reg(12) <= Delay6_reg_next(12);
        Delay6_reg(13) <= Delay6_reg_next(13);
        Delay6_reg(14) <= Delay6_reg_next(14);
        Delay6_reg(15) <= Delay6_reg_next(15);
        Delay6_reg(16) <= Delay6_reg_next(16);
        Delay6_reg(17) <= Delay6_reg_next(17);
        Delay6_reg(18) <= Delay6_reg_next(18);
        Delay6_reg(19) <= Delay6_reg_next(19);
        Delay6_reg(20) <= Delay6_reg_next(20);
        Delay6_reg(21) <= Delay6_reg_next(21);
        Delay6_reg(22) <= Delay6_reg_next(22);
        Delay6_reg(23) <= Delay6_reg_next(23);
      END IF;
    END IF;
  END PROCESS Delay6_process;

  Delay6_out1 <= Delay6_reg(23);
  Delay6_reg_next(0) <= if_aMantissa_0_aSign_2_out1;
  Delay6_reg_next(1) <= Delay6_reg(0);
  Delay6_reg_next(2) <= Delay6_reg(1);
  Delay6_reg_next(3) <= Delay6_reg(2);
  Delay6_reg_next(4) <= Delay6_reg(3);
  Delay6_reg_next(5) <= Delay6_reg(4);
  Delay6_reg_next(6) <= Delay6_reg(5);
  Delay6_reg_next(7) <= Delay6_reg(6);
  Delay6_reg_next(8) <= Delay6_reg(7);
  Delay6_reg_next(9) <= Delay6_reg(8);
  Delay6_reg_next(10) <= Delay6_reg(9);
  Delay6_reg_next(11) <= Delay6_reg(10);
  Delay6_reg_next(12) <= Delay6_reg(11);
  Delay6_reg_next(13) <= Delay6_reg(12);
  Delay6_reg_next(14) <= Delay6_reg(13);
  Delay6_reg_next(15) <= Delay6_reg(14);
  Delay6_reg_next(16) <= Delay6_reg(15);
  Delay6_reg_next(17) <= Delay6_reg(16);
  Delay6_reg_next(18) <= Delay6_reg(17);
  Delay6_reg_next(19) <= Delay6_reg(18);
  Delay6_reg_next(20) <= Delay6_reg(19);
  Delay6_reg_next(21) <= Delay6_reg(20);
  Delay6_reg_next(22) <= Delay6_reg(21);
  Delay6_reg_next(23) <= Delay6_reg(22);

  
  if_aExponent_cfType_Exponent_2_out1 <= C3_out1 WHEN Delay9_out1 = '0' ELSE
      Delay6_out1;

  Constant1_out1 <= '0';

  
  Switch1_out1 <= if_aExponent_cfType_Exponent_2_out1 WHEN Delay1_out1 = '0' ELSE
      Constant1_out1;

  Delay3_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay3_out1_1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_1_process;


  Delay30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay30_reg(0) <= '0';
      Delay30_reg(1) <= '0';
      Delay30_reg(2) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay30_reg(0) <= Delay30_reg_next(0);
        Delay30_reg(1) <= Delay30_reg_next(1);
        Delay30_reg(2) <= Delay30_reg_next(2);
      END IF;
    END IF;
  END PROCESS Delay30_process;

  Delay30_out1 <= Delay30_reg(2);
  Delay30_reg_next(0) <= Delay_out1;
  Delay30_reg_next(1) <= Delay30_reg(0);
  Delay30_reg_next(2) <= Delay30_reg(1);

  C1_out1 <= to_signed(16#086#, 11);

  C_out1 <= to_signed(16#086#, 11);

  
  if_aSign_out1 <= C1_out1 WHEN Delay30_out1 = '0' ELSE
      C_out1;

  alpha0_out1 <= to_unsigned(16#0#, 3);

  
  Exponent_0_out1 <= '1' WHEN Delay1_out1_1 = to_unsigned(16#00#, 8) ELSE
      '0';

  alpha1_out1 <= '1';

  Bit_Concat1_out1 <= alpha1_out1 & Switch_out1;

  alpha0_out1_1 <= '0';

  Bit_Concat_out1 <= alpha0_out1_1 & Switch_out1;

  
  if_Exponent_0_cfType_Exp_out1 <= Bit_Concat1_out1 WHEN Exponent_0_out1 = '0' ELSE
      Bit_Concat_out1;

  reinterpretcast_mant_cor_nume_out1 <= if_Exponent_0_cfType_Exp_out1;

  Delay43_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay43_out1 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay43_out1 <= reinterpretcast_mant_cor_nume_out1;
      END IF;
    END IF;
  END PROCESS Delay43_process;


  alpha1_66096404753625392914_out1 <= unsigned'("011010100100110100111100001001100");

  tmp1_1_66096404753625392914_mul_temp <= Delay43_out1 * alpha1_66096404753625392914_out1;
  tmp1_1_66096404753625392914_out1 <= tmp1_1_66096404753625392914_mul_temp(55 DOWNTO 23);

  Delay_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_reg(0) <= to_unsigned(0, 33);
      Delay_reg(1) <= to_unsigned(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay_reg(0) <= Delay_reg_next(0);
        Delay_reg(1) <= Delay_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay_1_process;

  Delay_out1_1 <= Delay_reg(1);
  Delay_reg_next(0) <= tmp1_1_66096404753625392914_out1;
  Delay_reg_next(1) <= Delay_reg(0);

  BitSlice_out1 <= Delay_out1_1(32);

  C_out1_1 <= to_unsigned(16#01#, 8);

  
  if_Exponent_0_out1 <= Delay1_out1_1 WHEN Exponent_0_out1 = '0' ELSE
      C_out1_1;

  Delay1_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg(0) <= to_unsigned(16#00#, 8);
      Delay1_reg(1) <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay1_reg(0) <= Delay1_reg_next(0);
        Delay1_reg(1) <= Delay1_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay1_2_process;

  Delay1_out1_2 <= Delay1_reg(1);
  Delay1_reg_next(0) <= if_Exponent_0_out1;
  Delay1_reg_next(1) <= Delay1_reg(0);

  C1_out1_1 <= to_unsigned(16#01#, 8);

  exp_cor_1_add_temp <= resize(Delay1_out1_2, 9) + resize(C1_out1_1, 9);
  
  exp_cor_1_out1 <= "11111111" WHEN exp_cor_1_add_temp(8) /= '0' ELSE
      exp_cor_1_add_temp(7 DOWNTO 0);

  Delay3_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1_2 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay3_out1_2 <= exp_cor_1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_2_process;


  C_out1_2 <= to_unsigned(16#02#, 8);

  exp_cor_2_add_temp <= resize(Delay1_out1_2, 9) + resize(C_out1_2, 9);
  
  exp_cor_2_out1 <= "11111111" WHEN exp_cor_2_add_temp(8) /= '0' ELSE
      exp_cor_2_add_temp(7 DOWNTO 0);

  Delay2_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1_1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay2_out1_1 <= exp_cor_2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_1_process;


  
  if_bitget_tmp2_tmp2_WordLength_out1 <= Delay3_out1_2 WHEN BitSlice_out1 = '0' ELSE
      Delay2_out1_1;

  Bit_Concat_out1_1 <= alpha0_out1 & if_bitget_tmp2_tmp2_WordLength_out1;

  reinterpretcast_bitconcat_fi_0_out1 <= signed(Bit_Concat_out1_1);

  
  exp_tmp_upperBound_relop1 <= '1' WHEN if_aSign_out1 > reinterpretcast_bitconcat_fi_0_out1 ELSE
      '0';

  Delay4_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay4_out1_1 <= exp_tmp_upperBound_relop1;
      END IF;
    END IF;
  END PROCESS Delay4_1_process;


  Delay38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay38_reg(0) <= '0';
      Delay38_reg(1) <= '0';
      Delay38_reg(2) <= '0';
      Delay38_reg(3) <= '0';
      Delay38_reg(4) <= '0';
      Delay38_reg(5) <= '0';
      Delay38_reg(6) <= '0';
      Delay38_reg(7) <= '0';
      Delay38_reg(8) <= '0';
      Delay38_reg(9) <= '0';
      Delay38_reg(10) <= '0';
      Delay38_reg(11) <= '0';
      Delay38_reg(12) <= '0';
      Delay38_reg(13) <= '0';
      Delay38_reg(14) <= '0';
      Delay38_reg(15) <= '0';
      Delay38_reg(16) <= '0';
      Delay38_reg(17) <= '0';
      Delay38_reg(18) <= '0';
      Delay38_reg(19) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay38_reg(0) <= Delay38_reg_next(0);
        Delay38_reg(1) <= Delay38_reg_next(1);
        Delay38_reg(2) <= Delay38_reg_next(2);
        Delay38_reg(3) <= Delay38_reg_next(3);
        Delay38_reg(4) <= Delay38_reg_next(4);
        Delay38_reg(5) <= Delay38_reg_next(5);
        Delay38_reg(6) <= Delay38_reg_next(6);
        Delay38_reg(7) <= Delay38_reg_next(7);
        Delay38_reg(8) <= Delay38_reg_next(8);
        Delay38_reg(9) <= Delay38_reg_next(9);
        Delay38_reg(10) <= Delay38_reg_next(10);
        Delay38_reg(11) <= Delay38_reg_next(11);
        Delay38_reg(12) <= Delay38_reg_next(12);
        Delay38_reg(13) <= Delay38_reg_next(13);
        Delay38_reg(14) <= Delay38_reg_next(14);
        Delay38_reg(15) <= Delay38_reg_next(15);
        Delay38_reg(16) <= Delay38_reg_next(16);
        Delay38_reg(17) <= Delay38_reg_next(17);
        Delay38_reg(18) <= Delay38_reg_next(18);
        Delay38_reg(19) <= Delay38_reg_next(19);
      END IF;
    END IF;
  END PROCESS Delay38_process;

  Delay38_out1 <= Delay38_reg(19);
  Delay38_reg_next(0) <= Delay4_out1_1;
  Delay38_reg_next(1) <= Delay38_reg(0);
  Delay38_reg_next(2) <= Delay38_reg(1);
  Delay38_reg_next(3) <= Delay38_reg(2);
  Delay38_reg_next(4) <= Delay38_reg(3);
  Delay38_reg_next(5) <= Delay38_reg(4);
  Delay38_reg_next(6) <= Delay38_reg(5);
  Delay38_reg_next(7) <= Delay38_reg(6);
  Delay38_reg_next(8) <= Delay38_reg(7);
  Delay38_reg_next(9) <= Delay38_reg(8);
  Delay38_reg_next(10) <= Delay38_reg(9);
  Delay38_reg_next(11) <= Delay38_reg(10);
  Delay38_reg_next(12) <= Delay38_reg(11);
  Delay38_reg_next(13) <= Delay38_reg(12);
  Delay38_reg_next(14) <= Delay38_reg(13);
  Delay38_reg_next(15) <= Delay38_reg(14);
  Delay38_reg_next(16) <= Delay38_reg(15);
  Delay38_reg_next(17) <= Delay38_reg(16);
  Delay38_reg_next(18) <= Delay38_reg(17);
  Delay38_reg_next(19) <= Delay38_reg(18);

  Delay1_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg_1(0) <= '0';
      Delay1_reg_1(1) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay1_reg_1(0) <= Delay1_reg_next_1(0);
        Delay1_reg_1(1) <= Delay1_reg_next_1(1);
      END IF;
    END IF;
  END PROCESS Delay1_3_process;

  Delay1_out1_3 <= Delay1_reg_1(1);
  Delay1_reg_next_1(0) <= Delay30_out1;
  Delay1_reg_next_1(1) <= Delay1_reg_1(0);

  Delay34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay34_reg(0) <= '0';
      Delay34_reg(1) <= '0';
      Delay34_reg(2) <= '0';
      Delay34_reg(3) <= '0';
      Delay34_reg(4) <= '0';
      Delay34_reg(5) <= '0';
      Delay34_reg(6) <= '0';
      Delay34_reg(7) <= '0';
      Delay34_reg(8) <= '0';
      Delay34_reg(9) <= '0';
      Delay34_reg(10) <= '0';
      Delay34_reg(11) <= '0';
      Delay34_reg(12) <= '0';
      Delay34_reg(13) <= '0';
      Delay34_reg(14) <= '0';
      Delay34_reg(15) <= '0';
      Delay34_reg(16) <= '0';
      Delay34_reg(17) <= '0';
      Delay34_reg(18) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay34_reg(0) <= Delay34_reg_next(0);
        Delay34_reg(1) <= Delay34_reg_next(1);
        Delay34_reg(2) <= Delay34_reg_next(2);
        Delay34_reg(3) <= Delay34_reg_next(3);
        Delay34_reg(4) <= Delay34_reg_next(4);
        Delay34_reg(5) <= Delay34_reg_next(5);
        Delay34_reg(6) <= Delay34_reg_next(6);
        Delay34_reg(7) <= Delay34_reg_next(7);
        Delay34_reg(8) <= Delay34_reg_next(8);
        Delay34_reg(9) <= Delay34_reg_next(9);
        Delay34_reg(10) <= Delay34_reg_next(10);
        Delay34_reg(11) <= Delay34_reg_next(11);
        Delay34_reg(12) <= Delay34_reg_next(12);
        Delay34_reg(13) <= Delay34_reg_next(13);
        Delay34_reg(14) <= Delay34_reg_next(14);
        Delay34_reg(15) <= Delay34_reg_next(15);
        Delay34_reg(16) <= Delay34_reg_next(16);
        Delay34_reg(17) <= Delay34_reg_next(17);
        Delay34_reg(18) <= Delay34_reg_next(18);
      END IF;
    END IF;
  END PROCESS Delay34_process;

  Delay34_out1 <= Delay34_reg(18);
  Delay34_reg_next(0) <= Delay1_out1_3;
  Delay34_reg_next(1) <= Delay34_reg(0);
  Delay34_reg_next(2) <= Delay34_reg(1);
  Delay34_reg_next(3) <= Delay34_reg(2);
  Delay34_reg_next(4) <= Delay34_reg(3);
  Delay34_reg_next(5) <= Delay34_reg(4);
  Delay34_reg_next(6) <= Delay34_reg(5);
  Delay34_reg_next(7) <= Delay34_reg(6);
  Delay34_reg_next(8) <= Delay34_reg(7);
  Delay34_reg_next(9) <= Delay34_reg(8);
  Delay34_reg_next(10) <= Delay34_reg(9);
  Delay34_reg_next(11) <= Delay34_reg(10);
  Delay34_reg_next(12) <= Delay34_reg(11);
  Delay34_reg_next(13) <= Delay34_reg(12);
  Delay34_reg_next(14) <= Delay34_reg(13);
  Delay34_reg_next(15) <= Delay34_reg(14);
  Delay34_reg_next(16) <= Delay34_reg(15);
  Delay34_reg_next(17) <= Delay34_reg(16);
  Delay34_reg_next(18) <= Delay34_reg(17);

  C1_out1_2 <= to_unsigned(16#FF#, 8);

  C_out1_3 <= to_unsigned(16#00#, 8);

  
  if_aSign_out1_1 <= C1_out1_2 WHEN Delay34_out1 = '0' ELSE
      C_out1_3;

  alpha0_out1_2 <= '0';

  alpha127_out1 <= to_signed(16#07F#, 10);

  alpha1_out1_1 <= '0';

  C4_out1 <= to_unsigned(0, 40);

  cast_cfType_ExponentBias_lik_out1 <= to_signed(16#07F#, 11);

  exp_tmp_cast_cfType_Exponent_out1 <= resize(reinterpretcast_bitconcat_fi_0_out1, 12) - resize(cast_cfType_ExponentBias_lik_out1, 12);

  DTC_out1 <= exp_tmp_cast_cfType_Exponent_out1(10 DOWNTO 0);

  BitSlice_out1_1 <= DTC_out1(10);

  Delay3_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1_3 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay3_out1_3 <= BitSlice_out1_1;
      END IF;
    END IF;
  END PROCESS Delay3_3_process;


  alpha3_out1 <= to_unsigned(16#00#, 8);

  BitSlice2_out1 <= Delay_out1_1(31 DOWNTO 0);

  reinterpretcast_bitsliceget_t_out1 <= BitSlice2_out1;

  BitSlice1_out1 <= Delay_out1_1(32 DOWNTO 1);

  reinterpretcast_bitsliceget_t_out1_1 <= BitSlice1_out1;

  
  if_bitget_tmp2_tmp2_WordLength_1_out1 <= reinterpretcast_bitsliceget_t_out1 WHEN BitSlice_out1 = '0' ELSE
      reinterpretcast_bitsliceget_t_out1_1;

  Bit_Concat3_out1 <= alpha3_out1 & if_bitget_tmp2_tmp2_WordLength_1_out1;

  reinterpretcast_bitconcat_fi_0_out1_1 <= Bit_Concat3_out1;

  Delay_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1_2 <= to_unsigned(0, 40);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay_out1_2 <= reinterpretcast_bitconcat_fi_0_out1_1;
      END IF;
    END IF;
  END PROCESS Delay_2_process;


  
  DTC2_out1 <= "11111" WHEN (DTC_out1(10) = '0') AND (DTC_out1(9 DOWNTO 5) /= "00000") ELSE
      "00000" WHEN DTC_out1(10) = '1' ELSE
      unsigned(DTC_out1(4 DOWNTO 0));

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay5_out1 <= DTC2_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  dynamic_shift_cast <= resize(Delay5_out1, 8);
  bitsll_tmp1_shift_length_out1 <= Delay_out1_2 sll to_integer(dynamic_shift_cast);

  cast_cfType_ExponentBias_lik_out1_1 <= to_unsigned(16#7F#, 8);

  cast_cfType_ExponentBias_lik_sub_cast <= signed(resize(cast_cfType_ExponentBias_lik_out1_1, 12));
  cast_cfType_ExponentBias_lik_sub_cast_1 <= signed(resize(if_bitget_tmp2_tmp2_WordLength_out1, 12));
  cast_cfType_ExponentBias_lik_sub_temp <= cast_cfType_ExponentBias_lik_sub_cast - cast_cfType_ExponentBias_lik_sub_cast_1;
  cast_cfType_ExponentBias_lik_out1_2 <= unsigned(cast_cfType_ExponentBias_lik_sub_temp(8 DOWNTO 0));

  
  DTC1_out1 <= "11111" WHEN cast_cfType_ExponentBias_lik_out1_2(8 DOWNTO 5) /= "0000" ELSE
      cast_cfType_ExponentBias_lik_out1_2(4 DOWNTO 0);

  Delay1_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_4 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay1_out1_4 <= DTC1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_4_process;


  dynamic_shift_cast_1 <= resize(Delay1_out1_4, 8);
  Shift_Arithmetic_out1 <= SHIFT_RIGHT(Delay_out1_2, to_integer(dynamic_shift_cast_1));

  
  if_shift_sign_out1 <= bitsll_tmp1_shift_length_out1 WHEN Delay3_out1_3 = '0' ELSE
      Shift_Arithmetic_out1;

  
  if_exp_tmp_upperBound_1_out1 <= C4_out1 WHEN Delay4_out1_1 = '0' ELSE
      if_shift_sign_out1;

  Delay3_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1_4 <= to_unsigned(0, 40);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay3_out1_4 <= if_exp_tmp_upperBound_1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_4_process;


  BitSlice2_out1_1 <= Delay3_out1_4(39 DOWNTO 31);

  Bit_Concat1_out1_1 <= alpha1_out1_1 & BitSlice2_out1_1;

  reinterpretcast_bitconcat_fi_0_out1_2 <= signed(Bit_Concat1_out1_1);

  alpha127_exp_tmp_out1 <= alpha127_out1 + reinterpretcast_bitconcat_fi_0_out1_2;

  cast_1_like_mant_frac_out1 <= unsigned'(X"80000000");

  alpha0_out1_3 <= '0';

  BitSlice_out1_2 <= Delay3_out1_4(30 DOWNTO 0);

  Bit_Concat_out1_2 <= alpha0_out1_3 & BitSlice_out1_2;

  reinterpretcast_bitconcat_fi_0_out1_3 <= Bit_Concat_out1_2;

  cast_1_like_mant_frac_m_out1 <= cast_1_like_mant_frac_out1 - reinterpretcast_bitconcat_fi_0_out1_3;

  BitSlice1_out1_1 <= cast_1_like_mant_frac_m_out1(31);

  Logical_Operator_out1_1 <=  NOT BitSlice1_out1_1;

  C1_out1_3 <= to_signed(16#07F#, 10);

  exp_adj_exp_tmp_out1 <= C1_out1_3 - reinterpretcast_bitconcat_fi_0_out1_2;

  C_out1_4 <= to_signed(16#07E#, 10);

  exp_adj_exp_tmp1_out1 <= C_out1_4 - reinterpretcast_bitconcat_fi_0_out1_2;

  
  if_sticky_out1 <= exp_adj_exp_tmp_out1 WHEN Logical_Operator_out1_1 = '0' ELSE
      exp_adj_exp_tmp1_out1;

  
  if_aSign_1_out1 <= alpha127_exp_tmp_out1 WHEN Delay1_out1_3 = '0' ELSE
      if_sticky_out1;

  Delay30_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay30_reg_1(0) <= to_signed(16#000#, 10);
      Delay30_reg_1(1) <= to_signed(16#000#, 10);
      Delay30_reg_1(2) <= to_signed(16#000#, 10);
      Delay30_reg_1(3) <= to_signed(16#000#, 10);
      Delay30_reg_1(4) <= to_signed(16#000#, 10);
      Delay30_reg_1(5) <= to_signed(16#000#, 10);
      Delay30_reg_1(6) <= to_signed(16#000#, 10);
      Delay30_reg_1(7) <= to_signed(16#000#, 10);
      Delay30_reg_1(8) <= to_signed(16#000#, 10);
      Delay30_reg_1(9) <= to_signed(16#000#, 10);
      Delay30_reg_1(10) <= to_signed(16#000#, 10);
      Delay30_reg_1(11) <= to_signed(16#000#, 10);
      Delay30_reg_1(12) <= to_signed(16#000#, 10);
      Delay30_reg_1(13) <= to_signed(16#000#, 10);
      Delay30_reg_1(14) <= to_signed(16#000#, 10);
      Delay30_reg_1(15) <= to_signed(16#000#, 10);
      Delay30_reg_1(16) <= to_signed(16#000#, 10);
      Delay30_reg_1(17) <= to_signed(16#000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay30_reg_1(0) <= Delay30_reg_next_1(0);
        Delay30_reg_1(1) <= Delay30_reg_next_1(1);
        Delay30_reg_1(2) <= Delay30_reg_next_1(2);
        Delay30_reg_1(3) <= Delay30_reg_next_1(3);
        Delay30_reg_1(4) <= Delay30_reg_next_1(4);
        Delay30_reg_1(5) <= Delay30_reg_next_1(5);
        Delay30_reg_1(6) <= Delay30_reg_next_1(6);
        Delay30_reg_1(7) <= Delay30_reg_next_1(7);
        Delay30_reg_1(8) <= Delay30_reg_next_1(8);
        Delay30_reg_1(9) <= Delay30_reg_next_1(9);
        Delay30_reg_1(10) <= Delay30_reg_next_1(10);
        Delay30_reg_1(11) <= Delay30_reg_next_1(11);
        Delay30_reg_1(12) <= Delay30_reg_next_1(12);
        Delay30_reg_1(13) <= Delay30_reg_next_1(13);
        Delay30_reg_1(14) <= Delay30_reg_next_1(14);
        Delay30_reg_1(15) <= Delay30_reg_next_1(15);
        Delay30_reg_1(16) <= Delay30_reg_next_1(16);
        Delay30_reg_1(17) <= Delay30_reg_next_1(17);
      END IF;
    END IF;
  END PROCESS Delay30_1_process;

  Delay30_out1_1 <= Delay30_reg_1(17);
  Delay30_reg_next_1(0) <= if_aSign_1_out1;
  Delay30_reg_next_1(1) <= Delay30_reg_1(0);
  Delay30_reg_next_1(2) <= Delay30_reg_1(1);
  Delay30_reg_next_1(3) <= Delay30_reg_1(2);
  Delay30_reg_next_1(4) <= Delay30_reg_1(3);
  Delay30_reg_next_1(5) <= Delay30_reg_1(4);
  Delay30_reg_next_1(6) <= Delay30_reg_1(5);
  Delay30_reg_next_1(7) <= Delay30_reg_1(6);
  Delay30_reg_next_1(8) <= Delay30_reg_1(7);
  Delay30_reg_next_1(9) <= Delay30_reg_1(8);
  Delay30_reg_next_1(10) <= Delay30_reg_1(9);
  Delay30_reg_next_1(11) <= Delay30_reg_1(10);
  Delay30_reg_next_1(12) <= Delay30_reg_1(11);
  Delay30_reg_next_1(13) <= Delay30_reg_1(12);
  Delay30_reg_next_1(14) <= Delay30_reg_1(13);
  Delay30_reg_next_1(15) <= Delay30_reg_1(14);
  Delay30_reg_next_1(16) <= Delay30_reg_1(15);
  Delay30_reg_next_1(17) <= Delay30_reg_1(16);

  
  exp_out_0_out1 <= '1' WHEN Delay30_out1_1 > to_signed(16#000#, 10) ELSE
      '0';

  C2_out1_1 <= to_unsigned(16#000000#, 24);

  Logical_Operator1_out1 <= Delay1_out1_3 AND Logical_Operator_out1_1;

  
  if_sticky_1_out1 <= reinterpretcast_bitconcat_fi_0_out1_3 WHEN Logical_Operator1_out1 = '0' ELSE
      cast_1_like_mant_frac_m_out1;

  Delay6_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_out1_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay6_out1_1 <= if_sticky_1_out1;
      END IF;
    END IF;
  END PROCESS Delay6_1_process;


  Constant_out1_1 <= '0';

  Bit_Concat_out1_3 <= Delay6_out1_1 & Constant_out1_1;

  Data_Type_Conversion_out1 <= signed(Bit_Concat_out1_3);

  BitSlice_out1_3 <= Data_Type_Conversion_out1(31);

  Log2Table_1_out1 <= signed'("101101010001111111110010111000110");

  w_Log2Table_1_out1 <= Data_Type_Conversion_out1 + Log2Table_1_out1;

  
  if_bitget_w_w_WordLength_1_out1 <= Data_Type_Conversion_out1 WHEN BitSlice_out1_3 = '0' ELSE
      w_Log2Table_1_out1;

  Delay12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay12_out1 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay12_out1 <= if_bitget_w_w_WordLength_1_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  bitsll_w_1_out1 <= Delay12_out1 sll 1;

  BitSlice1_out1_2 <= bitsll_w_1_out1(31);

  BitSlice_out1_4 <= bitsll_w_1_out1(32);

  alphabitget_w_w_WordLength_1_out1 <= BitSlice1_out1_2 XOR BitSlice_out1_4;

  Log2Table_int32_2_out1 <= signed'("101011011001011000011110110100010");

  Log2MinusTable_int32_2_out1 <= signed'("011010100011111111100101110001100");

  
  if_bitget_w_w_WordLength_0_out1 <= Log2Table_int32_2_out1 WHEN BitSlice_out1_4 = '0' ELSE
      Log2MinusTable_int32_2_out1;

  w_Log2MinusTable_int32_2_1_out1 <= bitsll_w_1_out1 + if_bitget_w_w_WordLength_0_out1;

  
  if_bitget_w_w_WordLength_1_out1_1 <= bitsll_w_1_out1 WHEN alphabitget_w_w_WordLength_1_out1 = '0' ELSE
      w_Log2MinusTable_int32_2_1_out1;

  Delay1_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_5 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay1_out1_5 <= if_bitget_w_w_WordLength_1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay1_5_process;


  bitsll_w_1_out1_1 <= Delay1_out1_5 sll 1;

  BitSlice1_out1_3 <= bitsll_w_1_out1_1(31);

  BitSlice_out1_5 <= bitsll_w_1_out1_1(32);

  alphabitget_w_w_WordLength_1_out1_1 <= BitSlice1_out1_3 XOR BitSlice_out1_5;

  Log2Table_int32_3_out1 <= signed'("101010001111111110010111000110000");

  Log2MinusTable_int32_3_out1 <= signed'("011000101010001001100000001010110");

  
  if_bitget_w_w_WordLength_0_out1_1 <= Log2Table_int32_3_out1 WHEN BitSlice_out1_5 = '0' ELSE
      Log2MinusTable_int32_3_out1;

  w_Log2MinusTable_int32_2_out1 <= bitsll_w_1_out1_1 + if_bitget_w_w_WordLength_0_out1_1;

  
  if_bitget_w_w_WordLength_1_out1_2 <= bitsll_w_1_out1_1 WHEN alphabitget_w_w_WordLength_1_out1_1 = '0' ELSE
      w_Log2MinusTable_int32_2_out1;

  Delay11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_out1 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay11_out1 <= if_bitget_w_w_WordLength_1_out1_2;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  bitsll_w_1_out1_2 <= Delay11_out1 sll 1;

  BitSlice1_out1_4 <= bitsll_w_1_out1_2(31);

  BitSlice_out1_6 <= bitsll_w_1_out1_2(32);

  alphabitget_w_w_WordLength_1_out1_2 <= BitSlice1_out1_4 XOR BitSlice_out1_6;

  Log2Table_int32_4_out1 <= signed'("101001100111000000100100000101010");

  Log2MinusTable_int32_4_out1 <= signed'("010111110101100000010010010110110");

  
  if_bitget_w_w_WordLength_0_out1_2 <= Log2Table_int32_4_out1 WHEN BitSlice_out1_6 = '0' ELSE
      Log2MinusTable_int32_4_out1;

  w_Log2MinusTable_int32_2_out1_1 <= bitsll_w_1_out1_2 + if_bitget_w_w_WordLength_0_out1_2;

  
  if_bitget_w_w_WordLength_1_out1_3 <= bitsll_w_1_out1_2 WHEN alphabitget_w_w_WordLength_1_out1_2 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_1;

  Delay3_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1_5 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay3_out1_5 <= if_bitget_w_w_WordLength_1_out1_3;
      END IF;
    END IF;
  END PROCESS Delay3_5_process;


  bitsll_w_1_out1_3 <= Delay3_out1_5 sll 1;

  BitSlice1_out1_5 <= bitsll_w_1_out1_3(31);

  BitSlice_out1_7 <= bitsll_w_1_out1_3(32);

  alphabitget_w_w_WordLength_1_out1_3 <= BitSlice1_out1_5 XOR BitSlice_out1_7;

  Log2Table_int32_5_out1 <= signed'("101001010001010010110010001010100");

  Log2MinusTable_int32_5_out1 <= signed'("010111011100111001010011001001110");

  
  if_bitget_w_w_WordLength_0_out1_3 <= Log2Table_int32_5_out1 WHEN BitSlice_out1_7 = '0' ELSE
      Log2MinusTable_int32_5_out1;

  w_Log2MinusTable_int32_2_out1_2 <= bitsll_w_1_out1_3 + if_bitget_w_w_WordLength_0_out1_3;

  
  if_bitget_w_w_WordLength_1_out1_4 <= bitsll_w_1_out1_3 WHEN alphabitget_w_w_WordLength_1_out1_3 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_2;

  Delay13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay13_out1 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay13_out1 <= if_bitget_w_w_WordLength_1_out1_4;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  bitsll_w_1_out1_4 <= Delay13_out1 sll 1;

  BitSlice1_out1_6 <= bitsll_w_1_out1_4(31);

  BitSlice_out1_8 <= bitsll_w_1_out1_4(32);

  alphabitget_w_w_WordLength_1_out1_4 <= BitSlice1_out1_6 XOR BitSlice_out1_8;

  Log2Table_int32_6_out1 <= signed'("101001000110000110100101111010010");

  Log2MinusTable_int32_6_out1 <= signed'("010111010000111110111010000110000");

  
  if_bitget_w_w_WordLength_0_out1_4 <= Log2Table_int32_6_out1 WHEN BitSlice_out1_8 = '0' ELSE
      Log2MinusTable_int32_6_out1;

  w_Log2MinusTable_int32_2_out1_3 <= bitsll_w_1_out1_4 + if_bitget_w_w_WordLength_0_out1_4;

  
  if_bitget_w_w_WordLength_1_out1_5 <= bitsll_w_1_out1_4 WHEN alphabitget_w_w_WordLength_1_out1_4 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_3;

  Delay5_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1_1 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay5_out1_1 <= if_bitget_w_w_WordLength_1_out1_5;
      END IF;
    END IF;
  END PROCESS Delay5_1_process;


  bitsll_w_1_out1_5 <= Delay5_out1_1 sll 1;

  BitSlice1_out1_7 <= bitsll_w_1_out1_5(31);

  BitSlice_out1_9 <= bitsll_w_1_out1_5(32);

  alphabitget_w_w_WordLength_1_out1_5 <= BitSlice1_out1_7 XOR BitSlice_out1_9;

  Log2Table_int32_7_out1 <= signed'("101001000000011010111101001001000");

  Log2MinusTable_int32_7_out1 <= signed'("010111001011000111101110100010000");

  
  if_bitget_w_w_WordLength_0_out1_5 <= Log2Table_int32_7_out1 WHEN BitSlice_out1_9 = '0' ELSE
      Log2MinusTable_int32_7_out1;

  w_Log2MinusTable_int32_2_out1_4 <= bitsll_w_1_out1_5 + if_bitget_w_w_WordLength_0_out1_5;

  
  if_bitget_w_w_WordLength_1_out1_6 <= bitsll_w_1_out1_5 WHEN alphabitget_w_w_WordLength_1_out1_5 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_4;

  Delay15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay15_out1 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay15_out1 <= if_bitget_w_w_WordLength_1_out1_6;
      END IF;
    END IF;
  END PROCESS Delay15_process;


  bitsll_w_1_out1_6 <= Delay15_out1 sll 1;

  BitSlice1_out1_8 <= bitsll_w_1_out1_6(31);

  BitSlice_out1_10 <= bitsll_w_1_out1_6(32);

  alphabitget_w_w_WordLength_1_out1_6 <= BitSlice1_out1_8 XOR BitSlice_out1_10;

  Log2Table_int32_8_out1 <= signed'("101000111101100011101110010010100");

  Log2MinusTable_int32_8_out1 <= signed'("010111001000001101100111000000100");

  
  if_bitget_w_w_WordLength_0_out1_6 <= Log2Table_int32_8_out1 WHEN BitSlice_out1_10 = '0' ELSE
      Log2MinusTable_int32_8_out1;

  w_Log2MinusTable_int32_2_out1_5 <= bitsll_w_1_out1_6 + if_bitget_w_w_WordLength_0_out1_6;

  
  if_bitget_w_w_WordLength_1_out1_7 <= bitsll_w_1_out1_6 WHEN alphabitget_w_w_WordLength_1_out1_6 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_5;

  Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_out1 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay7_out1 <= if_bitget_w_w_WordLength_1_out1_7;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  bitsll_w_1_out1_7 <= Delay7_out1 sll 1;

  BitSlice1_out1_9 <= bitsll_w_1_out1_7(31);

  BitSlice_out1_11 <= bitsll_w_1_out1_7(32);

  alphabitget_w_w_WordLength_1_out1_7 <= BitSlice1_out1_9 XOR BitSlice_out1_11;

  Log2Table_int32_9_out1 <= signed'("101000111100000111110000000001000");

  Log2MinusTable_int32_9_out1 <= signed'("010111000110110000111010100100010");

  
  if_bitget_w_w_WordLength_0_out1_7 <= Log2Table_int32_9_out1 WHEN BitSlice_out1_11 = '0' ELSE
      Log2MinusTable_int32_9_out1;

  w_Log2MinusTable_int32_2_out1_6 <= bitsll_w_1_out1_7 + if_bitget_w_w_WordLength_0_out1_7;

  
  if_bitget_w_w_WordLength_1_out1_8 <= bitsll_w_1_out1_7 WHEN alphabitget_w_w_WordLength_1_out1_7 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_6;

  Delay17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay17_out1 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay17_out1 <= if_bitget_w_w_WordLength_1_out1_8;
      END IF;
    END IF;
  END PROCESS Delay17_process;


  bitsll_w_1_out1_8 <= Delay17_out1 sll 1;

  BitSlice1_out1_10 <= bitsll_w_1_out1_8(31);

  BitSlice_out1_12 <= bitsll_w_1_out1_8(32);

  alphabitget_w_w_WordLength_1_out1_8 <= BitSlice1_out1_10 XOR BitSlice_out1_12;

  Log2Table_int32_10_out1 <= signed'("101000111011011001101011001000110");

  Log2MinusTable_int32_10_out1 <= signed'("010111000110000010101010001001010");

  
  if_bitget_w_w_WordLength_0_out1_8 <= Log2Table_int32_10_out1 WHEN BitSlice_out1_12 = '0' ELSE
      Log2MinusTable_int32_10_out1;

  w_Log2MinusTable_int32_2_out1_7 <= bitsll_w_1_out1_8 + if_bitget_w_w_WordLength_0_out1_8;

  
  if_bitget_w_w_WordLength_1_out1_9 <= bitsll_w_1_out1_8 WHEN alphabitget_w_w_WordLength_1_out1_8 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_7;

  Delay9_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_out1_1 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay9_out1_1 <= if_bitget_w_w_WordLength_1_out1_9;
      END IF;
    END IF;
  END PROCESS Delay9_1_process;


  bitsll_w_1_out1_9 <= Delay9_out1_1 sll 1;

  BitSlice1_out1_11 <= bitsll_w_1_out1_9(31);

  BitSlice_out1_13 <= bitsll_w_1_out1_9(32);

  alphabitget_w_w_WordLength_1_out1_9 <= BitSlice1_out1_11 XOR BitSlice_out1_13;

  Log2Table_int32_11_out1 <= signed'("101000111011000010100111010000100");

  Log2MinusTable_int32_11_out1 <= signed'("010111000101101011100011011000100");

  
  if_bitget_w_w_WordLength_0_out1_9 <= Log2Table_int32_11_out1 WHEN BitSlice_out1_13 = '0' ELSE
      Log2MinusTable_int32_11_out1;

  w_Log2MinusTable_int32_2_out1_8 <= bitsll_w_1_out1_9 + if_bitget_w_w_WordLength_0_out1_9;

  
  if_bitget_w_w_WordLength_1_out1_10 <= bitsll_w_1_out1_9 WHEN alphabitget_w_w_WordLength_1_out1_9 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_8;

  Delay19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay19_out1 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay19_out1 <= if_bitget_w_w_WordLength_1_out1_10;
      END IF;
    END IF;
  END PROCESS Delay19_process;


  bitsll_w_1_out1_10 <= Delay19_out1 sll 1;

  BitSlice1_out1_12 <= bitsll_w_1_out1_10(31);

  BitSlice_out1_14 <= bitsll_w_1_out1_10(32);

  alphabitget_w_w_WordLength_1_out1_10 <= BitSlice1_out1_12 XOR BitSlice_out1_14;

  C1_out1_4 <= to_signed(16#2#, 4);

  C_out1_5 <= to_signed(16#3#, 4);

  
  if_bitget_w_w_WordLength_1_1_out1 <= C1_out1_4 WHEN BitSlice_out1_3 = '0' ELSE
      C_out1_5;

  Delay11_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_out1_1 <= to_signed(16#0#, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay11_out1_1 <= if_bitget_w_w_WordLength_1_1_out1;
      END IF;
    END IF;
  END PROCESS Delay11_1_process;


  Constant_out1_2 <= to_unsigned(16#0#, 2);

  Bit_Concat_out1_4 <= unsigned(Delay11_out1_1) & Constant_out1_2;

  dtc1_out1_1 <= signed(Bit_Concat_out1_4);

  bitsrl_y_int32_2_out1 <= dtc1_out1_1 srl 2;

  y_tmp1_out1 <= dtc1_out1_1 - bitsrl_y_int32_2_out1;

  y_tmp1_out1_1 <= dtc1_out1_1 + bitsrl_y_int32_2_out1;

  
  if_bitget_w_w_WordLength_0_1_out1 <= y_tmp1_out1 WHEN BitSlice1_out1_2 = '0' ELSE
      y_tmp1_out1_1;

  
  if_bitget_w_w_WordLength_1_1_out1_1 <= dtc1_out1_1 WHEN alphabitget_w_w_WordLength_1_out1 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1;

  Delay_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1_3 <= to_signed(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay_out1_3 <= if_bitget_w_w_WordLength_1_1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay_3_process;


  Constant_out1_3 <= to_unsigned(16#0#, 3);

  Bit_Concat_out1_5 <= unsigned(Delay_out1_3) & Constant_out1_3;

  dtc1_out1_2 <= signed(Bit_Concat_out1_5);

  bitsrl_y_int32_2_out1_1 <= dtc1_out1_2 srl 3;

  y_tmp1_out1_2 <= dtc1_out1_2 - bitsrl_y_int32_2_out1_1;

  y_tmp1_out1_3 <= dtc1_out1_2 + bitsrl_y_int32_2_out1_1;

  
  if_bitget_w_w_WordLength_0_1_out1_1 <= y_tmp1_out1_2 WHEN BitSlice1_out1_3 = '0' ELSE
      y_tmp1_out1_3;

  
  if_bitget_w_w_WordLength_1_1_out1_2 <= dtc1_out1_2 WHEN alphabitget_w_w_WordLength_1_out1_1 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_1;

  Delay10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay10_out1 <= to_signed(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay10_out1 <= if_bitget_w_w_WordLength_1_1_out1_2;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  Constant_out1_4 <= to_unsigned(16#0#, 4);

  Bit_Concat_out1_6 <= unsigned(Delay10_out1) & Constant_out1_4;

  dtc1_out1_3 <= signed(Bit_Concat_out1_6);

  bitsrl_y_int32_2_out1_2 <= dtc1_out1_3 srl 4;

  y_tmp1_out1_4 <= dtc1_out1_3 - bitsrl_y_int32_2_out1_2;

  y_tmp1_out1_5 <= dtc1_out1_3 + bitsrl_y_int32_2_out1_2;

  
  if_bitget_w_w_WordLength_0_1_out1_2 <= y_tmp1_out1_4 WHEN BitSlice1_out1_4 = '0' ELSE
      y_tmp1_out1_5;

  
  if_bitget_w_w_WordLength_1_1_out1_3 <= dtc1_out1_3 WHEN alphabitget_w_w_WordLength_1_out1_2 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_2;

  Delay2_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1_2 <= to_signed(16#0000#, 13);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay2_out1_2 <= if_bitget_w_w_WordLength_1_1_out1_3;
      END IF;
    END IF;
  END PROCESS Delay2_2_process;


  Constant_out1_5 <= to_unsigned(16#00#, 5);

  Bit_Concat_out1_7 <= unsigned(Delay2_out1_2) & Constant_out1_5;

  dtc1_out1_4 <= signed(Bit_Concat_out1_7);

  bitsrl_y_int32_2_out1_3 <= dtc1_out1_4 srl 5;

  y_tmp1_out1_6 <= dtc1_out1_4 - bitsrl_y_int32_2_out1_3;

  y_tmp1_out1_7 <= dtc1_out1_4 + bitsrl_y_int32_2_out1_3;

  
  if_bitget_w_w_WordLength_0_1_out1_3 <= y_tmp1_out1_6 WHEN BitSlice1_out1_5 = '0' ELSE
      y_tmp1_out1_7;

  
  if_bitget_w_w_WordLength_1_1_out1_4 <= dtc1_out1_4 WHEN alphabitget_w_w_WordLength_1_out1_3 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_3;

  Delay12_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay12_out1_1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay12_out1_1 <= if_bitget_w_w_WordLength_1_1_out1_4;
      END IF;
    END IF;
  END PROCESS Delay12_1_process;


  Constant_out1_6 <= to_unsigned(16#00#, 6);

  Bit_Concat_out1_8 <= unsigned(Delay12_out1_1) & Constant_out1_6;

  dtc1_out1_5 <= signed(Bit_Concat_out1_8);

  bitsrl_y_int32_2_out1_4 <= dtc1_out1_5 srl 6;

  y_tmp1_out1_8 <= dtc1_out1_5 - bitsrl_y_int32_2_out1_4;

  y_tmp1_out1_9 <= dtc1_out1_5 + bitsrl_y_int32_2_out1_4;

  
  if_bitget_w_w_WordLength_0_1_out1_4 <= y_tmp1_out1_8 WHEN BitSlice1_out1_6 = '0' ELSE
      y_tmp1_out1_9;

  
  if_bitget_w_w_WordLength_1_1_out1_5 <= dtc1_out1_5 WHEN alphabitget_w_w_WordLength_1_out1_4 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_4;

  Delay4_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1_2 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay4_out1_2 <= if_bitget_w_w_WordLength_1_1_out1_5;
      END IF;
    END IF;
  END PROCESS Delay4_2_process;


  Constant_out1_7 <= to_unsigned(16#00#, 7);

  Bit_Concat_out1_9 <= unsigned(Delay4_out1_2) & Constant_out1_7;

  dtc1_out1_6 <= signed(Bit_Concat_out1_9);

  bitsrl_y_int32_2_out1_5 <= dtc1_out1_6 srl 7;

  y_tmp1_out1_10 <= dtc1_out1_6 - bitsrl_y_int32_2_out1_5;

  y_tmp1_out1_11 <= dtc1_out1_6 + bitsrl_y_int32_2_out1_5;

  
  if_bitget_w_w_WordLength_0_1_out1_5 <= y_tmp1_out1_10 WHEN BitSlice1_out1_7 = '0' ELSE
      y_tmp1_out1_11;

  
  if_bitget_w_w_WordLength_1_1_out1_6 <= dtc1_out1_6 WHEN alphabitget_w_w_WordLength_1_out1_5 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_5;

  Delay14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay14_out1 <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay14_out1 <= if_bitget_w_w_WordLength_1_1_out1_6;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  Constant_out1_8 <= to_unsigned(16#0#, 3);

  Bit_Concat_out1_10 <= unsigned(Delay14_out1) & Constant_out1_8;

  dtc1_out1_7 <= signed(Bit_Concat_out1_10);

  bitsrl_y_int32_2_out1_6 <= dtc1_out1_7 srl 8;

  y_tmp1_out1_12 <= dtc1_out1_7 - bitsrl_y_int32_2_out1_6;

  y_tmp1_out1_13 <= dtc1_out1_7 + bitsrl_y_int32_2_out1_6;

  
  if_bitget_w_w_WordLength_0_1_out1_6 <= y_tmp1_out1_12 WHEN BitSlice1_out1_8 = '0' ELSE
      y_tmp1_out1_13;

  
  if_bitget_w_w_WordLength_1_1_out1_7 <= dtc1_out1_7 WHEN alphabitget_w_w_WordLength_1_out1_6 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_6;

  Delay6_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_out1_2 <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay6_out1_2 <= if_bitget_w_w_WordLength_1_1_out1_7;
      END IF;
    END IF;
  END PROCESS Delay6_2_process;


  bitsrl_y_int32_2_out1_7 <= Delay6_out1_2 srl 9;

  y_tmp1_out1_14 <= Delay6_out1_2 - bitsrl_y_int32_2_out1_7;

  y_tmp1_out1_15 <= Delay6_out1_2 + bitsrl_y_int32_2_out1_7;

  
  if_bitget_w_w_WordLength_0_1_out1_7 <= y_tmp1_out1_14 WHEN BitSlice1_out1_9 = '0' ELSE
      y_tmp1_out1_15;

  
  if_bitget_w_w_WordLength_1_1_out1_8 <= Delay6_out1_2 WHEN alphabitget_w_w_WordLength_1_out1_7 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_7;

  Delay16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay16_out1 <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay16_out1 <= if_bitget_w_w_WordLength_1_1_out1_8;
      END IF;
    END IF;
  END PROCESS Delay16_process;


  bitsrl_y_int32_2_out1_8 <= Delay16_out1 srl 10;

  y_tmp1_out1_16 <= Delay16_out1 - bitsrl_y_int32_2_out1_8;

  y_tmp1_out1_17 <= Delay16_out1 + bitsrl_y_int32_2_out1_8;

  
  if_bitget_w_w_WordLength_0_1_out1_8 <= y_tmp1_out1_16 WHEN BitSlice1_out1_10 = '0' ELSE
      y_tmp1_out1_17;

  
  if_bitget_w_w_WordLength_1_1_out1_9 <= Delay16_out1 WHEN alphabitget_w_w_WordLength_1_out1_8 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_8;

  Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_out1 <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay8_out1 <= if_bitget_w_w_WordLength_1_1_out1_9;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  bitsrl_y_int32_2_out1_9 <= Delay8_out1 srl 11;

  y_tmp1_out1_18 <= Delay8_out1 - bitsrl_y_int32_2_out1_9;

  y_tmp1_out1_19 <= Delay8_out1 + bitsrl_y_int32_2_out1_9;

  
  if_bitget_w_w_WordLength_0_1_out1_9 <= y_tmp1_out1_18 WHEN BitSlice1_out1_11 = '0' ELSE
      y_tmp1_out1_19;

  
  if_bitget_w_w_WordLength_1_1_out1_10 <= Delay8_out1 WHEN alphabitget_w_w_WordLength_1_out1_9 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_9;

  Delay18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay18_out1 <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay18_out1 <= if_bitget_w_w_WordLength_1_1_out1_10;
      END IF;
    END IF;
  END PROCESS Delay18_process;


  bitsrl_y_int32_2_out1_10 <= Delay18_out1 srl 12;

  y_tmp1_out1_20 <= Delay18_out1 - bitsrl_y_int32_2_out1_10;

  y_tmp1_out1_21 <= Delay18_out1 + bitsrl_y_int32_2_out1_10;

  
  if_bitget_w_w_WordLength_0_1_out1_10 <= y_tmp1_out1_20 WHEN BitSlice1_out1_12 = '0' ELSE
      y_tmp1_out1_21;

  
  if_bitget_w_w_WordLength_1_1_out1_11 <= Delay18_out1 WHEN alphabitget_w_w_WordLength_1_out1_10 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_10;

  Delay1_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg_2(0) <= to_signed(0, 34);
      Delay1_reg_2(1) <= to_signed(0, 34);
      Delay1_reg_2(2) <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay1_reg_2(0) <= Delay1_reg_next_2(0);
        Delay1_reg_2(1) <= Delay1_reg_next_2(1);
        Delay1_reg_2(2) <= Delay1_reg_next_2(2);
      END IF;
    END IF;
  END PROCESS Delay1_6_process;

  Delay1_out1_6 <= Delay1_reg_2(2);
  Delay1_reg_next_2(0) <= if_bitget_w_w_WordLength_1_1_out1_11;
  Delay1_reg_next_2(1) <= Delay1_reg_2(0);
  Delay1_reg_next_2(2) <= Delay1_reg_2(1);

  Bit_Slice2_out1 <= unsigned(Delay1_out1_6(32 DOWNTO 12));

  Data_Type_Conversion1_out1 <= signed(Bit_Slice2_out1);

  Log2Table_int32_11_out1_1 <= signed'("101000111010110111000100111101010");

  Log2MinusTable_int32_11_out1_1 <= signed'("010111000101100000000000010111000");

  
  if_bitget_w_w_WordLength_0_out1_10 <= Log2Table_int32_11_out1_1 WHEN BitSlice_out1_14 = '0' ELSE
      Log2MinusTable_int32_11_out1_1;

  w_Log2MinusTable_int32_2_out1_9 <= bitsll_w_1_out1_10 + if_bitget_w_w_WordLength_0_out1_10;

  
  if_bitget_w_w_WordLength_1_out1_11 <= bitsll_w_1_out1_10 WHEN alphabitget_w_w_WordLength_1_out1_10 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_9;

  Bit_Slice_out1 <= unsigned(if_bitget_w_w_WordLength_1_out1_11(32 DOWNTO 12));

  Data_Type_Conversion_out1_1 <= signed(Bit_Slice_out1);

  Delay22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay22_out1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay22_out1 <= Data_Type_Conversion_out1_1;
      END IF;
    END IF;
  END PROCESS Delay22_process;


  alpha0_69314717873930931_out1 <= to_signed(16#058B90#, 21);

  tmp1_0_69314717873930931_mul_temp <= Delay22_out1 * alpha0_69314717873930931_out1;
  tmp1_0_69314717873930931_out1 <= tmp1_0_69314717873930931_mul_temp(39 DOWNTO 19);

  Delay_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_reg_1(0) <= to_signed(16#000000#, 21);
      Delay_reg_1(1) <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay_reg_1(0) <= Delay_reg_next_1(0);
        Delay_reg_1(1) <= Delay_reg_next_1(1);
      END IF;
    END IF;
  END PROCESS Delay_4_process;

  Delay_out1_4 <= Delay_reg_1(1);
  Delay_reg_next_1(0) <= tmp1_0_69314717873930931_out1;
  Delay_reg_next_1(1) <= Delay_reg_1(0);

  tmp2_y_mul_temp <= Data_Type_Conversion1_out1 * Delay_out1_4;
  tmp2_y_out1 <= tmp2_y_mul_temp(39 DOWNTO 19);

  Delay3_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_reg(0) <= to_signed(16#000000#, 21);
      Delay3_reg(1) <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay3_reg(0) <= Delay3_reg_next(0);
        Delay3_reg(1) <= Delay3_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay3_6_process;

  Delay3_out1_6 <= Delay3_reg(1);
  Delay3_reg_next(0) <= tmp2_y_out1;
  Delay3_reg_next(1) <= Delay3_reg(0);

  Bit_Slice1_out1 <= Delay3_out1_6(20);

  Constant1_out1_1 <= to_signed(16#0000#, 13);

  Constant_out1_9 <= to_signed(-16#0001#, 13);

  
  Switch_out1_1 <= Constant1_out1_1 WHEN Bit_Slice1_out1 = '0' ELSE
      Constant_out1_9;

  Delay2_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_reg(0) <= to_signed(0, 34);
      Delay2_reg(1) <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay2_reg(0) <= Delay2_reg_next(0);
        Delay2_reg(1) <= Delay2_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay2_3_process;

  Delay2_out1_3 <= Delay2_reg(1);
  Delay2_reg_next(0) <= Delay1_out1_6;
  Delay2_reg_next(1) <= Delay2_reg(0);

  Bit_Concat_out1_11 <= unsigned(Switch_out1_1) & unsigned(Delay3_out1_6);

  DTC2_out1_1 <= signed(Bit_Concat_out1_11);

  y_tmp3_out1 <= Delay2_out1_3 + DTC2_out1_1;

  Delay31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay31_out1 <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay31_out1 <= y_tmp3_out1;
      END IF;
    END IF;
  END PROCESS Delay31_process;


  BitSlice_out1_15 <= unsigned(Delay31_out1(30 DOWNTO 7));

  
  if_exp_out_0_1_out1 <= C2_out1_1 WHEN exp_out_0_out1 = '0' ELSE
      BitSlice_out1_15;

  Delay36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay36_out1 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay36_out1 <= if_exp_out_0_1_out1;
      END IF;
    END IF;
  END PROCESS Delay36_process;


  Bit_Concat_out1_12 <= alpha0_out1_2 & Delay36_out1;

  BitSlice1_out1_13 <= Bit_Concat_out1_12(1);

  BitSlice_out1_16 <= Bit_Concat_out1_12(0);

  Delay37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay37_reg(0) <= '0';
      Delay37_reg(1) <= '0';
      Delay37_reg(2) <= '0';
      Delay37_reg(3) <= '0';
      Delay37_reg(4) <= '0';
      Delay37_reg(5) <= '0';
      Delay37_reg(6) <= '0';
      Delay37_reg(7) <= '0';
      Delay37_reg(8) <= '0';
      Delay37_reg(9) <= '0';
      Delay37_reg(10) <= '0';
      Delay37_reg(11) <= '0';
      Delay37_reg(12) <= '0';
      Delay37_reg(13) <= '0';
      Delay37_reg(14) <= '0';
      Delay37_reg(15) <= '0';
      Delay37_reg(16) <= '0';
      Delay37_reg(17) <= '0';
      Delay37_reg(18) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay37_reg(0) <= Delay37_reg_next(0);
        Delay37_reg(1) <= Delay37_reg_next(1);
        Delay37_reg(2) <= Delay37_reg_next(2);
        Delay37_reg(3) <= Delay37_reg_next(3);
        Delay37_reg(4) <= Delay37_reg_next(4);
        Delay37_reg(5) <= Delay37_reg_next(5);
        Delay37_reg(6) <= Delay37_reg_next(6);
        Delay37_reg(7) <= Delay37_reg_next(7);
        Delay37_reg(8) <= Delay37_reg_next(8);
        Delay37_reg(9) <= Delay37_reg_next(9);
        Delay37_reg(10) <= Delay37_reg_next(10);
        Delay37_reg(11) <= Delay37_reg_next(11);
        Delay37_reg(12) <= Delay37_reg_next(12);
        Delay37_reg(13) <= Delay37_reg_next(13);
        Delay37_reg(14) <= Delay37_reg_next(14);
        Delay37_reg(15) <= Delay37_reg_next(15);
        Delay37_reg(16) <= Delay37_reg_next(16);
        Delay37_reg(17) <= Delay37_reg_next(17);
        Delay37_reg(18) <= Delay37_reg_next(18);
      END IF;
    END IF;
  END PROCESS Delay37_process;

  Delay37_out1 <= Delay37_reg(18);
  Delay37_reg_next(0) <= Logical_Operator_out1_1;
  Delay37_reg_next(1) <= Delay37_reg(0);
  Delay37_reg_next(2) <= Delay37_reg(1);
  Delay37_reg_next(3) <= Delay37_reg(2);
  Delay37_reg_next(4) <= Delay37_reg(3);
  Delay37_reg_next(5) <= Delay37_reg(4);
  Delay37_reg_next(6) <= Delay37_reg(5);
  Delay37_reg_next(7) <= Delay37_reg(6);
  Delay37_reg_next(8) <= Delay37_reg(7);
  Delay37_reg_next(9) <= Delay37_reg(8);
  Delay37_reg_next(10) <= Delay37_reg(9);
  Delay37_reg_next(11) <= Delay37_reg(10);
  Delay37_reg_next(12) <= Delay37_reg(11);
  Delay37_reg_next(13) <= Delay37_reg(12);
  Delay37_reg_next(14) <= Delay37_reg(13);
  Delay37_reg_next(15) <= Delay37_reg(14);
  Delay37_reg_next(16) <= Delay37_reg(15);
  Delay37_reg_next(17) <= Delay37_reg(16);
  Delay37_reg_next(18) <= Delay37_reg(17);

  alphabitget_Mant_tmp_2_0_out1 <= BitSlice1_out1_13 OR Delay37_out1;

  alphabitget_Mant_tmp_1_0_out1 <= BitSlice_out1_16 AND alphabitget_Mant_tmp_2_0_out1;

  cast_2_like_Mant_tmp_out1 <= to_unsigned(16#0000002#, 25);

  Mant_tmp_cast_2_like_Man_out1 <= resize(resize(Bit_Concat_out1_12, 32) + resize(cast_2_like_Mant_tmp_out1, 32), 25);

  
  if_bitget_Mant_tmp_1_0_out1 <= Bit_Concat_out1_12 WHEN alphabitget_Mant_tmp_1_0_out1 = '0' ELSE
      Mant_tmp_cast_2_like_Man_out1;

  BitSlice2_out1_2 <= if_bitget_Mant_tmp_1_0_out1(24);

  BitSlice2_out1_3 <= Delay30_out1_1(9);

  Logical_Operator_out1_2 <=  NOT BitSlice2_out1_3;

  BitSlice1_out1_14 <= Delay31_out1(30);

  bitget_y_cfType_Pow2Intermedi_out1 <= Logical_Operator_out1_2 AND BitSlice1_out1_14;

  C1_out1_5 <= to_unsigned(16#00#, 8);

  C_out1_6 <= to_unsigned(16#01#, 8);

  
  if_bitget_y_cfType_Pow2Intermed_out1 <= C1_out1_5 WHEN bitget_y_cfType_Pow2Intermedi_out1 = '0' ELSE
      C_out1_6;

  DTC_out1_1 <= unsigned(Delay30_out1_1(7 DOWNTO 0));

  
  if_exp_out_0_out1 <= if_bitget_y_cfType_Pow2Intermed_out1 WHEN exp_out_0_out1 = '0' ELSE
      DTC_out1_1;

  Delay35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay35_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay35_out1 <= if_exp_out_0_out1;
      END IF;
    END IF;
  END PROCESS Delay35_process;


  cast_1_like_Exp_out1 <= to_unsigned(16#01#, 8);

  Exp_cast_1_like_Exp_out1 <= Delay35_out1 + cast_1_like_Exp_out1;

  
  if_bitget_Mant_tmp_Mant_tmp_Wor_out1 <= Delay35_out1 WHEN BitSlice2_out1_2 = '0' ELSE
      Exp_cast_1_like_Exp_out1;

  
  if_in_range_out1 <= if_aSign_out1_1 WHEN Delay38_out1 = '0' ELSE
      if_bitget_Mant_tmp_Mant_tmp_Wor_out1;

  C_out1_7 <= to_unsigned(16#00#, 8);

  
  if_aMantissa_0_aSign_out1 <= Delay1_out1_1 WHEN alphaaMantissa_0_aSign_out1 = '0' ELSE
      C_out1_7;

  Delay7_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_reg(0) <= to_unsigned(16#00#, 8);
      Delay7_reg(1) <= to_unsigned(16#00#, 8);
      Delay7_reg(2) <= to_unsigned(16#00#, 8);
      Delay7_reg(3) <= to_unsigned(16#00#, 8);
      Delay7_reg(4) <= to_unsigned(16#00#, 8);
      Delay7_reg(5) <= to_unsigned(16#00#, 8);
      Delay7_reg(6) <= to_unsigned(16#00#, 8);
      Delay7_reg(7) <= to_unsigned(16#00#, 8);
      Delay7_reg(8) <= to_unsigned(16#00#, 8);
      Delay7_reg(9) <= to_unsigned(16#00#, 8);
      Delay7_reg(10) <= to_unsigned(16#00#, 8);
      Delay7_reg(11) <= to_unsigned(16#00#, 8);
      Delay7_reg(12) <= to_unsigned(16#00#, 8);
      Delay7_reg(13) <= to_unsigned(16#00#, 8);
      Delay7_reg(14) <= to_unsigned(16#00#, 8);
      Delay7_reg(15) <= to_unsigned(16#00#, 8);
      Delay7_reg(16) <= to_unsigned(16#00#, 8);
      Delay7_reg(17) <= to_unsigned(16#00#, 8);
      Delay7_reg(18) <= to_unsigned(16#00#, 8);
      Delay7_reg(19) <= to_unsigned(16#00#, 8);
      Delay7_reg(20) <= to_unsigned(16#00#, 8);
      Delay7_reg(21) <= to_unsigned(16#00#, 8);
      Delay7_reg(22) <= to_unsigned(16#00#, 8);
      Delay7_reg(23) <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay7_reg(0) <= Delay7_reg_next(0);
        Delay7_reg(1) <= Delay7_reg_next(1);
        Delay7_reg(2) <= Delay7_reg_next(2);
        Delay7_reg(3) <= Delay7_reg_next(3);
        Delay7_reg(4) <= Delay7_reg_next(4);
        Delay7_reg(5) <= Delay7_reg_next(5);
        Delay7_reg(6) <= Delay7_reg_next(6);
        Delay7_reg(7) <= Delay7_reg_next(7);
        Delay7_reg(8) <= Delay7_reg_next(8);
        Delay7_reg(9) <= Delay7_reg_next(9);
        Delay7_reg(10) <= Delay7_reg_next(10);
        Delay7_reg(11) <= Delay7_reg_next(11);
        Delay7_reg(12) <= Delay7_reg_next(12);
        Delay7_reg(13) <= Delay7_reg_next(13);
        Delay7_reg(14) <= Delay7_reg_next(14);
        Delay7_reg(15) <= Delay7_reg_next(15);
        Delay7_reg(16) <= Delay7_reg_next(16);
        Delay7_reg(17) <= Delay7_reg_next(17);
        Delay7_reg(18) <= Delay7_reg_next(18);
        Delay7_reg(19) <= Delay7_reg_next(19);
        Delay7_reg(20) <= Delay7_reg_next(20);
        Delay7_reg(21) <= Delay7_reg_next(21);
        Delay7_reg(22) <= Delay7_reg_next(22);
        Delay7_reg(23) <= Delay7_reg_next(23);
      END IF;
    END IF;
  END PROCESS Delay7_1_process;

  Delay7_out1_1 <= Delay7_reg(23);
  Delay7_reg_next(0) <= if_aMantissa_0_aSign_out1;
  Delay7_reg_next(1) <= Delay7_reg(0);
  Delay7_reg_next(2) <= Delay7_reg(1);
  Delay7_reg_next(3) <= Delay7_reg(2);
  Delay7_reg_next(4) <= Delay7_reg(3);
  Delay7_reg_next(5) <= Delay7_reg(4);
  Delay7_reg_next(6) <= Delay7_reg(5);
  Delay7_reg_next(7) <= Delay7_reg(6);
  Delay7_reg_next(8) <= Delay7_reg(7);
  Delay7_reg_next(9) <= Delay7_reg(8);
  Delay7_reg_next(10) <= Delay7_reg(9);
  Delay7_reg_next(11) <= Delay7_reg(10);
  Delay7_reg_next(12) <= Delay7_reg(11);
  Delay7_reg_next(13) <= Delay7_reg(12);
  Delay7_reg_next(14) <= Delay7_reg(13);
  Delay7_reg_next(15) <= Delay7_reg(14);
  Delay7_reg_next(16) <= Delay7_reg(15);
  Delay7_reg_next(17) <= Delay7_reg(16);
  Delay7_reg_next(18) <= Delay7_reg(17);
  Delay7_reg_next(19) <= Delay7_reg(18);
  Delay7_reg_next(20) <= Delay7_reg(19);
  Delay7_reg_next(21) <= Delay7_reg(20);
  Delay7_reg_next(22) <= Delay7_reg(21);
  Delay7_reg_next(23) <= Delay7_reg(22);

  
  if_aExponent_cfType_Exponent_out1 <= if_in_range_out1 WHEN Delay9_out1 = '0' ELSE
      Delay7_out1_1;

  Constant3_out1 <= to_unsigned(16#00#, 8);

  
  Switch6_out1 <= if_aExponent_cfType_Exponent_out1 WHEN Delay1_out1 = '0' ELSE
      Constant3_out1;

  Delay4_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1_3 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay4_out1_3 <= Switch6_out1;
      END IF;
    END IF;
  END PROCESS Delay4_3_process;


  C2_out1_2 <= to_unsigned(16#000000#, 23);

  
  Compare_To_Zero_out1_1 <= '1' WHEN if_bitget_Mant_tmp_Mant_tmp_Wor_out1 = to_unsigned(16#00#, 8) ELSE
      '0';

  Logical_Operator_out1_3 <= Compare_To_Zero_out1_1 OR BitSlice2_out1_2;

  BitSlice3_out1 <= if_bitget_Mant_tmp_1_0_out1(23 DOWNTO 1);

  C_out1_8 <= to_unsigned(16#000000#, 23);

  
  if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 <= BitSlice3_out1 WHEN Logical_Operator_out1_3 = '0' ELSE
      C_out1_8;

  
  if_in_range_1_out1 <= C2_out1_2 WHEN Delay38_out1 = '0' ELSE
      if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1;

  Delay8_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_reg(0) <= to_unsigned(16#000000#, 23);
      Delay8_reg(1) <= to_unsigned(16#000000#, 23);
      Delay8_reg(2) <= to_unsigned(16#000000#, 23);
      Delay8_reg(3) <= to_unsigned(16#000000#, 23);
      Delay8_reg(4) <= to_unsigned(16#000000#, 23);
      Delay8_reg(5) <= to_unsigned(16#000000#, 23);
      Delay8_reg(6) <= to_unsigned(16#000000#, 23);
      Delay8_reg(7) <= to_unsigned(16#000000#, 23);
      Delay8_reg(8) <= to_unsigned(16#000000#, 23);
      Delay8_reg(9) <= to_unsigned(16#000000#, 23);
      Delay8_reg(10) <= to_unsigned(16#000000#, 23);
      Delay8_reg(11) <= to_unsigned(16#000000#, 23);
      Delay8_reg(12) <= to_unsigned(16#000000#, 23);
      Delay8_reg(13) <= to_unsigned(16#000000#, 23);
      Delay8_reg(14) <= to_unsigned(16#000000#, 23);
      Delay8_reg(15) <= to_unsigned(16#000000#, 23);
      Delay8_reg(16) <= to_unsigned(16#000000#, 23);
      Delay8_reg(17) <= to_unsigned(16#000000#, 23);
      Delay8_reg(18) <= to_unsigned(16#000000#, 23);
      Delay8_reg(19) <= to_unsigned(16#000000#, 23);
      Delay8_reg(20) <= to_unsigned(16#000000#, 23);
      Delay8_reg(21) <= to_unsigned(16#000000#, 23);
      Delay8_reg(22) <= to_unsigned(16#000000#, 23);
      Delay8_reg(23) <= to_unsigned(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay8_reg(0) <= Delay8_reg_next(0);
        Delay8_reg(1) <= Delay8_reg_next(1);
        Delay8_reg(2) <= Delay8_reg_next(2);
        Delay8_reg(3) <= Delay8_reg_next(3);
        Delay8_reg(4) <= Delay8_reg_next(4);
        Delay8_reg(5) <= Delay8_reg_next(5);
        Delay8_reg(6) <= Delay8_reg_next(6);
        Delay8_reg(7) <= Delay8_reg_next(7);
        Delay8_reg(8) <= Delay8_reg_next(8);
        Delay8_reg(9) <= Delay8_reg_next(9);
        Delay8_reg(10) <= Delay8_reg_next(10);
        Delay8_reg(11) <= Delay8_reg_next(11);
        Delay8_reg(12) <= Delay8_reg_next(12);
        Delay8_reg(13) <= Delay8_reg_next(13);
        Delay8_reg(14) <= Delay8_reg_next(14);
        Delay8_reg(15) <= Delay8_reg_next(15);
        Delay8_reg(16) <= Delay8_reg_next(16);
        Delay8_reg(17) <= Delay8_reg_next(17);
        Delay8_reg(18) <= Delay8_reg_next(18);
        Delay8_reg(19) <= Delay8_reg_next(19);
        Delay8_reg(20) <= Delay8_reg_next(20);
        Delay8_reg(21) <= Delay8_reg_next(21);
        Delay8_reg(22) <= Delay8_reg_next(22);
        Delay8_reg(23) <= Delay8_reg_next(23);
      END IF;
    END IF;
  END PROCESS Delay8_1_process;

  Delay8_out1_1 <= Delay8_reg(23);
  Delay8_reg_next(0) <= Switch_out1;
  Delay8_reg_next(1) <= Delay8_reg(0);
  Delay8_reg_next(2) <= Delay8_reg(1);
  Delay8_reg_next(3) <= Delay8_reg(2);
  Delay8_reg_next(4) <= Delay8_reg(3);
  Delay8_reg_next(5) <= Delay8_reg(4);
  Delay8_reg_next(6) <= Delay8_reg(5);
  Delay8_reg_next(7) <= Delay8_reg(6);
  Delay8_reg_next(8) <= Delay8_reg(7);
  Delay8_reg_next(9) <= Delay8_reg(8);
  Delay8_reg_next(10) <= Delay8_reg(9);
  Delay8_reg_next(11) <= Delay8_reg(10);
  Delay8_reg_next(12) <= Delay8_reg(11);
  Delay8_reg_next(13) <= Delay8_reg(12);
  Delay8_reg_next(14) <= Delay8_reg(13);
  Delay8_reg_next(15) <= Delay8_reg(14);
  Delay8_reg_next(16) <= Delay8_reg(15);
  Delay8_reg_next(17) <= Delay8_reg(16);
  Delay8_reg_next(18) <= Delay8_reg(17);
  Delay8_reg_next(19) <= Delay8_reg(18);
  Delay8_reg_next(20) <= Delay8_reg(19);
  Delay8_reg_next(21) <= Delay8_reg(20);
  Delay8_reg_next(22) <= Delay8_reg(21);
  Delay8_reg_next(23) <= Delay8_reg(22);

  
  if_aExponent_cfType_Exponent_1_out1 <= if_in_range_1_out1 WHEN Delay9_out1 = '0' ELSE
      Delay8_out1_1;

  Constant2_out1 <= to_unsigned(16#000000#, 23);

  
  Switch5_out1 <= if_aExponent_cfType_Exponent_1_out1 WHEN Delay1_out1 = '0' ELSE
      Constant2_out1;

  Delay5_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1_2 <= to_unsigned(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay5_out1_2 <= Switch5_out1;
      END IF;
    END IF;
  END PROCESS Delay5_2_process;


  -- Combine FP sign, exponent, mantissa into 32 bit word
  nfp_out_pack <= Delay3_out1_1 & Delay4_out1_3 & Delay5_out1_2;

  nfp_out <= std_logic_vector(nfp_out_pack);

END rtl;

