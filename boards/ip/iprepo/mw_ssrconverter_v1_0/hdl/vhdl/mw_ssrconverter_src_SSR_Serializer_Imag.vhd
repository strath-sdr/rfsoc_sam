-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\mw_ssrconverter\mw_ssrconverter_src_SSR_Serializer_Imag.vhd
-- Created: 2020-12-22 10:57:15
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: mw_ssrconverter_src_SSR_Serializer_Imag
-- Source Path: mw_ssrconverter/SSR Subset Converter/SSR Serializer Imag
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.mw_ssrconverter_src_SSR_Subset_Converter_pkg.ALL;

ENTITY mw_ssrconverter_src_SSR_Serializer_Imag IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        SSR_Control                       :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        Valid_In                          :   IN    std_logic;
        Data_In                           :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        Valid_Out                         :   OUT   std_logic;
        Data_Out                          :   OUT   std_logic_vector(127 DOWNTO 0)  -- ufix128
        );
END mw_ssrconverter_src_SSR_Serializer_Imag;


ARCHITECTURE rtl OF mw_ssrconverter_src_SSR_Serializer_Imag IS

  -- Component Declarations
  COMPONENT mw_ssrconverter_src_SSR_to_Vector_block1
    PORT( SSR                             :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          Vector                          :   OUT   vector_of_std_logic_vector16(0 TO 7)  -- uint16 [8]
          );
  END COMPONENT;

  COMPONENT mw_ssrconverter_src_SSR1_to_SSR8
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Data_In                         :   IN    vector_of_std_logic_vector16(0 TO 7);  -- uint16 [8]
          Index                           :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          Data_Out                        :   OUT   vector_of_std_logic_vector16(0 TO 7);  -- uint16 [8]
          Valid_Out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT mw_ssrconverter_src_SSR2_to_SSR8
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Data_In                         :   IN    vector_of_std_logic_vector16(0 TO 7);  -- uint16 [8]
          Index                           :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          Data_Out                        :   OUT   vector_of_std_logic_vector16(0 TO 7);  -- uint16 [8]
          Valid_Out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT mw_ssrconverter_src_SSR4_to_SSR8
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Data_In                         :   IN    vector_of_std_logic_vector16(0 TO 7);  -- uint16 [8]
          Index                           :   IN    std_logic;  -- ufix1
          Data_Out                        :   OUT   vector_of_std_logic_vector16(0 TO 7);  -- uint16 [8]
          Valid_Out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT mw_ssrconverter_src_Vector_to_SSR
    PORT( Vector                          :   IN    vector_of_std_logic_vector16(0 TO 7);  -- uint16 [8]
          SSR                             :   OUT   std_logic_vector(127 DOWNTO 0)  -- ufix128
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : mw_ssrconverter_src_SSR_to_Vector_block1
    USE ENTITY work.mw_ssrconverter_src_SSR_to_Vector_block1(rtl);

  FOR ALL : mw_ssrconverter_src_SSR1_to_SSR8
    USE ENTITY work.mw_ssrconverter_src_SSR1_to_SSR8(rtl);

  FOR ALL : mw_ssrconverter_src_SSR2_to_SSR8
    USE ENTITY work.mw_ssrconverter_src_SSR2_to_SSR8(rtl);

  FOR ALL : mw_ssrconverter_src_SSR4_to_SSR8
    USE ENTITY work.mw_ssrconverter_src_SSR4_to_SSR8(rtl);

  FOR ALL : mw_ssrconverter_src_Vector_to_SSR
    USE ENTITY work.mw_ssrconverter_src_Vector_to_SSR(rtl);

  -- Signals
  SIGNAL SSR_Control_unsigned             : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL SSR_to_Vector_out1               : vector_of_std_logic_vector16(0 TO 7);  -- ufix16 [8]
  SIGNAL HDL_Counter_out1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL SSR1_to_SSR8_out1                : vector_of_std_logic_vector16(0 TO 7);  -- ufix16 [8]
  SIGNAL SSR1_to_SSR8_out2                : std_logic;
  SIGNAL Bit_Slice1_out1                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SSR2_to_SSR8_out1                : vector_of_std_logic_vector16(0 TO 7);  -- ufix16 [8]
  SIGNAL SSR2_to_SSR8_out2                : std_logic;
  SIGNAL Bit_Slice_out1                   : std_logic;  -- ufix1
  SIGNAL SSR4_to_SSR8_out1                : vector_of_std_logic_vector16(0 TO 7);  -- ufix16 [8]
  SIGNAL SSR4_to_SSR8_out2                : std_logic;
  SIGNAL Multiport_Switch1_out1           : std_logic;
  SIGNAL AND_out1                         : std_logic;
  SIGNAL Unit_Delay_out1                  : std_logic;
  SIGNAL SSR1_to_SSR8_out1_unsigned       : vector_of_unsigned16(0 TO 7);  -- uint16 [8]
  SIGNAL SSR2_to_SSR8_out1_unsigned       : vector_of_unsigned16(0 TO 7);  -- uint16 [8]
  SIGNAL SSR4_to_SSR8_out1_unsigned       : vector_of_unsigned16(0 TO 7);  -- uint16 [8]
  SIGNAL SSR_to_Vector_out1_unsigned      : vector_of_unsigned16(0 TO 7);  -- uint16 [8]
  SIGNAL Multiport_Switch_out1            : vector_of_unsigned16(0 TO 7);  -- uint16 [8]
  SIGNAL Unit_Delay_Enabled_Synchronous_out1 : vector_of_unsigned16(0 TO 7);  -- uint16 [8]
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_1 : vector_of_std_logic_vector16(0 TO 7);  -- ufix16 [8]
  SIGNAL y                                : std_logic_vector(127 DOWNTO 0);  -- ufix128

BEGIN
  u_SSR_to_Vector : mw_ssrconverter_src_SSR_to_Vector_block1
    PORT MAP( SSR => Data_In,  -- ufix128
              Vector => SSR_to_Vector_out1  -- uint16 [8]
              );

  u_SSR1_to_SSR8 : mw_ssrconverter_src_SSR1_to_SSR8
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Data_In => SSR_to_Vector_out1,  -- uint16 [8]
              Index => std_logic_vector(HDL_Counter_out1),  -- ufix3
              Data_Out => SSR1_to_SSR8_out1,  -- uint16 [8]
              Valid_Out => SSR1_to_SSR8_out2
              );

  u_SSR2_to_SSR8 : mw_ssrconverter_src_SSR2_to_SSR8
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Data_In => SSR_to_Vector_out1,  -- uint16 [8]
              Index => std_logic_vector(Bit_Slice1_out1),  -- ufix2
              Data_Out => SSR2_to_SSR8_out1,  -- uint16 [8]
              Valid_Out => SSR2_to_SSR8_out2
              );

  u_SSR4_to_SSR8 : mw_ssrconverter_src_SSR4_to_SSR8
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Data_In => SSR_to_Vector_out1,  -- uint16 [8]
              Index => Bit_Slice_out1,  -- ufix1
              Data_Out => SSR4_to_SSR8_out1,  -- uint16 [8]
              Valid_Out => SSR4_to_SSR8_out2
              );

  u_Vector_to_SSR : mw_ssrconverter_src_Vector_to_SSR
    PORT MAP( Vector => Unit_Delay_Enabled_Synchronous_out1_1,  -- uint16 [8]
              SSR => y  -- ufix128
              );

  SSR_Control_unsigned <= unsigned(SSR_Control);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 7
  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= to_unsigned(16#0#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND Valid_In = '1' THEN
        HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(16#1#, 3);
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  Bit_Slice1_out1 <= HDL_Counter_out1(1 DOWNTO 0);

  Bit_Slice_out1 <= HDL_Counter_out1(0);

  
  Multiport_Switch1_out1 <= SSR1_to_SSR8_out2 WHEN SSR_Control_unsigned = to_unsigned(16#0#, 4) ELSE
      SSR2_to_SSR8_out2 WHEN SSR_Control_unsigned = to_unsigned(16#1#, 4) ELSE
      SSR4_to_SSR8_out2 WHEN SSR_Control_unsigned = to_unsigned(16#2#, 4) ELSE
      Valid_In;

  AND_out1 <= Multiport_Switch1_out1 AND Valid_In;

  Unit_Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay_out1 <= AND_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  outputgen4: FOR k IN 0 TO 7 GENERATE
    SSR1_to_SSR8_out1_unsigned(k) <= unsigned(SSR1_to_SSR8_out1(k));
  END GENERATE;

  outputgen3: FOR k IN 0 TO 7 GENERATE
    SSR2_to_SSR8_out1_unsigned(k) <= unsigned(SSR2_to_SSR8_out1(k));
  END GENERATE;

  outputgen2: FOR k IN 0 TO 7 GENERATE
    SSR4_to_SSR8_out1_unsigned(k) <= unsigned(SSR4_to_SSR8_out1(k));
  END GENERATE;

  outputgen1: FOR k IN 0 TO 7 GENERATE
    SSR_to_Vector_out1_unsigned(k) <= unsigned(SSR_to_Vector_out1(k));
  END GENERATE;

  Multiport_Switch_output : PROCESS (SSR1_to_SSR8_out1_unsigned, SSR2_to_SSR8_out1_unsigned,
       SSR4_to_SSR8_out1_unsigned, SSR_Control_unsigned,
       SSR_to_Vector_out1_unsigned)
  BEGIN
    IF SSR_Control_unsigned = to_unsigned(16#0#, 4) THEN 
      Multiport_Switch_out1 <= SSR1_to_SSR8_out1_unsigned;
    ELSIF SSR_Control_unsigned = to_unsigned(16#1#, 4) THEN 
      Multiport_Switch_out1 <= SSR2_to_SSR8_out1_unsigned;
    ELSIF SSR_Control_unsigned = to_unsigned(16#2#, 4) THEN 
      Multiport_Switch_out1 <= SSR4_to_SSR8_out1_unsigned;
    ELSE 
      Multiport_Switch_out1 <= SSR_to_Vector_out1_unsigned;
    END IF;
  END PROCESS Multiport_Switch_output;


  Unit_Delay_Enabled_Synchronous_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Synchronous_out1 <= (OTHERS => to_unsigned(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND AND_out1 = '1' THEN
        Unit_Delay_Enabled_Synchronous_out1 <= Multiport_Switch_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous_process;


  outputgen: FOR k IN 0 TO 7 GENERATE
    Unit_Delay_Enabled_Synchronous_out1_1(k) <= std_logic_vector(Unit_Delay_Enabled_Synchronous_out1(k));
  END GENERATE;

  Valid_Out <= Unit_Delay_out1;

  Data_Out <= y;

END rtl;

