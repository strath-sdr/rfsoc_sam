-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\mw_ssrconverter\mw_ssrconverter.vhd
-- Created: 2020-12-22 10:57:23
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: mw_ssrconverter
-- Source Path: mw_ssrconverter
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY mw_ssrconverter IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        AXI4_Stream_Real_Master_TREADY    :   IN    std_logic;  -- ufix1
        AXI4_Stream_Real_Slave_TDATA      :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        AXI4_Stream_Real_Slave_TVALID     :   IN    std_logic;  -- ufix1
        AXI4_Stream_Imag_Master_TREADY    :   IN    std_logic;  -- ufix1
        AXI4_Stream_Imag_Slave_TDATA      :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
        AXI4_Stream_Imag_Slave_TVALID     :   IN    std_logic;  -- ufix1
        AXI4_Lite_ACLK                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARESETN                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_AWVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_WDATA                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_WSTRB                   :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Lite_WVALID                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_BREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_ARVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_RREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Stream_Real_Master_TDATA     :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Stream_Real_Master_TVALID    :   OUT   std_logic;  -- ufix1
        AXI4_Stream_Real_Master_TLAST     :   OUT   std_logic;  -- ufix1
        AXI4_Stream_Real_Master_TUSER     :   OUT   std_logic;  -- ufix1
        AXI4_Stream_Real_Slave_TREADY     :   OUT   std_logic;  -- ufix1
        AXI4_Stream_Imag_Master_TDATA     :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Stream_Imag_Master_TVALID    :   OUT   std_logic;  -- ufix1
        AXI4_Stream_Imag_Master_TLAST     :   OUT   std_logic;  -- ufix1
        AXI4_Stream_Imag_Master_TUSER     :   OUT   std_logic;  -- ufix1
        AXI4_Stream_Imag_Slave_TREADY     :   OUT   std_logic;  -- ufix1
        AXI4_Lite_AWREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_WREADY                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_BRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_BVALID                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_ARREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_RDATA                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_RRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_RVALID                  :   OUT   std_logic  -- ufix1
        );
END mw_ssrconverter;


ARCHITECTURE rtl OF mw_ssrconverter IS

  -- Component Declarations
  COMPONENT mw_ssrconverter_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT mw_ssrconverter_axi_lite
    PORT( reset                           :   IN    std_logic;
          AXI4_Lite_ACLK                  :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARESETN               :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_WDATA                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_WSTRB                 :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_Lite_WVALID                :   IN    std_logic;  -- ufix1
          AXI4_Lite_BREADY                :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_ARVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_RREADY                :   IN    std_logic;  -- ufix1
          read_ip_timestamp               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_AWREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_WREADY                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_BRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_BVALID                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_ARREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_RDATA                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_RRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_RVALID                :   OUT   std_logic;  -- ufix1
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          write_Packet_Size               :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_SSR_Mode                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT mw_ssrconverter_axi4_stream_real_slave
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          AXI4_Stream_Real_Slave_TDATA    :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          AXI4_Stream_Real_Slave_TVALID   :   IN    std_logic;  -- ufix1
          AXI4_Stream_Real_Slave_TREADY   :   OUT   std_logic;  -- ufix1
          user_data                       :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
          user_valid                      :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT mw_ssrconverter_axi4_stream_imag_slave
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          AXI4_Stream_Imag_Slave_TDATA    :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          AXI4_Stream_Imag_Slave_TVALID   :   IN    std_logic;  -- ufix1
          AXI4_Stream_Imag_Slave_TREADY   :   OUT   std_logic;  -- ufix1
          user_data                       :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
          user_valid                      :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT mw_ssrconverter_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          Packet_Size                     :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          SSR_Mode                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          Valid_Real_In                   :   IN    std_logic;  -- ufix1
          Data_Real_In                    :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          Valid_Imag_In                   :   IN    std_logic;  -- ufix1
          Data_Imag_In                    :   IN    std_logic_vector(127 DOWNTO 0);  -- ufix128
          ce_out                          :   OUT   std_logic;  -- ufix1
          Valid_Real_Out                  :   OUT   std_logic;  -- ufix1
          Data_Real_Out                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          User_Real_Out                   :   OUT   std_logic;  -- ufix1
          Last_Real_Out                   :   OUT   std_logic;  -- ufix1
          Valid_Imag_Out                  :   OUT   std_logic;  -- ufix1
          Data_Imag_Out                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          User_Imag_Out                   :   OUT   std_logic;  -- ufix1
          Last_Imag_Out                   :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT mw_ssrconverter_axi4_stream_real_master
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          AXI4_Stream_Real_Master_TREADY  :   IN    std_logic;  -- ufix1
          user_data                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          user_valid                      :   IN    std_logic;  -- ufix1
          user_TLAST                      :   IN    std_logic;  -- ufix1
          user_TUSER                      :   IN    std_logic;  -- ufix1
          AXI4_Stream_Real_Master_TDATA   :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Stream_Real_Master_TVALID  :   OUT   std_logic;  -- ufix1
          AXI4_Stream_Real_Master_TLAST   :   OUT   std_logic;  -- ufix1
          AXI4_Stream_Real_Master_TUSER   :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT mw_ssrconverter_axi4_stream_imag_master
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          AXI4_Stream_Imag_Master_TREADY  :   IN    std_logic;  -- ufix1
          user_data                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          user_valid                      :   IN    std_logic;  -- ufix1
          user_TLAST                      :   IN    std_logic;  -- ufix1
          user_TUSER                      :   IN    std_logic;  -- ufix1
          AXI4_Stream_Imag_Master_TDATA   :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Stream_Imag_Master_TVALID  :   OUT   std_logic;  -- ufix1
          AXI4_Stream_Imag_Master_TLAST   :   OUT   std_logic;  -- ufix1
          AXI4_Stream_Imag_Master_TUSER   :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : mw_ssrconverter_reset_sync
    USE ENTITY work.mw_ssrconverter_reset_sync(rtl);

  FOR ALL : mw_ssrconverter_axi_lite
    USE ENTITY work.mw_ssrconverter_axi_lite(rtl);

  FOR ALL : mw_ssrconverter_axi4_stream_real_slave
    USE ENTITY work.mw_ssrconverter_axi4_stream_real_slave(rtl);

  FOR ALL : mw_ssrconverter_axi4_stream_imag_slave
    USE ENTITY work.mw_ssrconverter_axi4_stream_imag_slave(rtl);

  FOR ALL : mw_ssrconverter_dut
    USE ENTITY work.mw_ssrconverter_dut(rtl);

  FOR ALL : mw_ssrconverter_axi4_stream_real_master
    USE ENTITY work.mw_ssrconverter_axi4_stream_real_master(rtl);

  FOR ALL : mw_ssrconverter_axi4_stream_imag_master
    USE ENTITY work.mw_ssrconverter_axi4_stream_imag_master(rtl);

  -- Signals
  SIGNAL reset                            : std_logic;
  SIGNAL ip_timestamp                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL reset_before_sync                : std_logic;  -- ufix1
  SIGNAL AXI4_Lite_BRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_RDATA_tmp              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_RRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_axi_enable                 : std_logic;  -- ufix1
  SIGNAL write_Packet_Size                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_SSR_Mode                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL top_user_data                    : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL top_user_valid                   : std_logic;  -- ufix1
  SIGNAL top_user_data_1                  : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL top_user_valid_1                 : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL Valid_Real_Out_sig               : std_logic;  -- ufix1
  SIGNAL Data_Real_Out_sig                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL User_Real_Out_sig                : std_logic;  -- ufix1
  SIGNAL Last_Real_Out_sig                : std_logic;  -- ufix1
  SIGNAL Valid_Imag_Out_sig               : std_logic;  -- ufix1
  SIGNAL Data_Imag_Out_sig                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL User_Imag_Out_sig                : std_logic;  -- ufix1
  SIGNAL Last_Imag_Out_sig                : std_logic;  -- ufix1
  SIGNAL AXI4_Stream_Real_Master_TDATA_tmp : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL AXI4_Stream_Imag_Master_TDATA_tmp : std_logic_vector(15 DOWNTO 0);  -- ufix16

BEGIN
  u_mw_ssrconverter_reset_sync_inst : mw_ssrconverter_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_before_sync,  -- ufix1
              reset_out => reset
              );

  u_mw_ssrconverter_axi_lite_inst : mw_ssrconverter_axi_lite
    PORT MAP( reset => reset,
              AXI4_Lite_ACLK => AXI4_Lite_ACLK,  -- ufix1
              AXI4_Lite_ARESETN => AXI4_Lite_ARESETN,  -- ufix1
              AXI4_Lite_AWADDR => AXI4_Lite_AWADDR,  -- ufix16
              AXI4_Lite_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI4_Lite_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI4_Lite_WSTRB => AXI4_Lite_WSTRB,  -- ufix4
              AXI4_Lite_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI4_Lite_BREADY => AXI4_Lite_BREADY,  -- ufix1
              AXI4_Lite_ARADDR => AXI4_Lite_ARADDR,  -- ufix16
              AXI4_Lite_ARVALID => AXI4_Lite_ARVALID,  -- ufix1
              AXI4_Lite_RREADY => AXI4_Lite_RREADY,  -- ufix1
              read_ip_timestamp => std_logic_vector(ip_timestamp),  -- ufix32
              AXI4_Lite_AWREADY => AXI4_Lite_AWREADY,  -- ufix1
              AXI4_Lite_WREADY => AXI4_Lite_WREADY,  -- ufix1
              AXI4_Lite_BRESP => AXI4_Lite_BRESP_tmp,  -- ufix2
              AXI4_Lite_BVALID => AXI4_Lite_BVALID,  -- ufix1
              AXI4_Lite_ARREADY => AXI4_Lite_ARREADY,  -- ufix1
              AXI4_Lite_RDATA => AXI4_Lite_RDATA_tmp,  -- ufix32
              AXI4_Lite_RRESP => AXI4_Lite_RRESP_tmp,  -- ufix2
              AXI4_Lite_RVALID => AXI4_Lite_RVALID,  -- ufix1
              write_axi_enable => write_axi_enable,  -- ufix1
              write_Packet_Size => write_Packet_Size,  -- ufix32
              write_SSR_Mode => write_SSR_Mode,  -- ufix32
              reset_internal => reset_internal  -- ufix1
              );

  u_mw_ssrconverter_axi4_stream_real_slave_inst : mw_ssrconverter_axi4_stream_real_slave
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              enb => const_1_1,
              AXI4_Stream_Real_Slave_TDATA => AXI4_Stream_Real_Slave_TDATA,  -- ufix128
              AXI4_Stream_Real_Slave_TVALID => AXI4_Stream_Real_Slave_TVALID,  -- ufix1
              AXI4_Stream_Real_Slave_TREADY => AXI4_Stream_Real_Slave_TREADY,  -- ufix1
              user_data => top_user_data,  -- ufix128
              user_valid => top_user_valid  -- ufix1
              );

  u_mw_ssrconverter_axi4_stream_imag_slave_inst : mw_ssrconverter_axi4_stream_imag_slave
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              enb => const_1_1,
              AXI4_Stream_Imag_Slave_TDATA => AXI4_Stream_Imag_Slave_TDATA,  -- ufix128
              AXI4_Stream_Imag_Slave_TVALID => AXI4_Stream_Imag_Slave_TVALID,  -- ufix1
              AXI4_Stream_Imag_Slave_TREADY => AXI4_Stream_Imag_Slave_TREADY,  -- ufix1
              user_data => top_user_data_1,  -- ufix128
              user_valid => top_user_valid_1  -- ufix1
              );

  u_mw_ssrconverter_dut_inst : mw_ssrconverter_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              dut_enable => write_axi_enable,  -- ufix1
              Packet_Size => write_Packet_Size,  -- ufix32
              SSR_Mode => write_SSR_Mode,  -- ufix32
              Valid_Real_In => top_user_valid,  -- ufix1
              Data_Real_In => top_user_data,  -- ufix128
              Valid_Imag_In => top_user_valid_1,  -- ufix1
              Data_Imag_In => top_user_data_1,  -- ufix128
              ce_out => ce_out_sig,  -- ufix1
              Valid_Real_Out => Valid_Real_Out_sig,  -- ufix1
              Data_Real_Out => Data_Real_Out_sig,  -- ufix16
              User_Real_Out => User_Real_Out_sig,  -- ufix1
              Last_Real_Out => Last_Real_Out_sig,  -- ufix1
              Valid_Imag_Out => Valid_Imag_Out_sig,  -- ufix1
              Data_Imag_Out => Data_Imag_Out_sig,  -- ufix16
              User_Imag_Out => User_Imag_Out_sig,  -- ufix1
              Last_Imag_Out => Last_Imag_Out_sig  -- ufix1
              );

  u_mw_ssrconverter_axi4_stream_real_master_inst : mw_ssrconverter_axi4_stream_real_master
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              enb => const_1_1,
              AXI4_Stream_Real_Master_TREADY => AXI4_Stream_Real_Master_TREADY,  -- ufix1
              user_data => Data_Real_Out_sig,  -- ufix16
              user_valid => Valid_Real_Out_sig,  -- ufix1
              user_TLAST => Last_Real_Out_sig,  -- ufix1
              user_TUSER => User_Real_Out_sig,  -- ufix1
              AXI4_Stream_Real_Master_TDATA => AXI4_Stream_Real_Master_TDATA_tmp,  -- ufix16
              AXI4_Stream_Real_Master_TVALID => AXI4_Stream_Real_Master_TVALID,  -- ufix1
              AXI4_Stream_Real_Master_TLAST => AXI4_Stream_Real_Master_TLAST,  -- ufix1
              AXI4_Stream_Real_Master_TUSER => AXI4_Stream_Real_Master_TUSER  -- ufix1
              );

  u_mw_ssrconverter_axi4_stream_imag_master_inst : mw_ssrconverter_axi4_stream_imag_master
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              enb => const_1_1,
              AXI4_Stream_Imag_Master_TREADY => AXI4_Stream_Imag_Master_TREADY,  -- ufix1
              user_data => Data_Imag_Out_sig,  -- ufix16
              user_valid => Valid_Imag_Out_sig,  -- ufix1
              user_TLAST => Last_Imag_Out_sig,  -- ufix1
              user_TUSER => User_Imag_Out_sig,  -- ufix1
              AXI4_Stream_Imag_Master_TDATA => AXI4_Stream_Imag_Master_TDATA_tmp,  -- ufix16
              AXI4_Stream_Imag_Master_TVALID => AXI4_Stream_Imag_Master_TVALID,  -- ufix1
              AXI4_Stream_Imag_Master_TLAST => AXI4_Stream_Imag_Master_TLAST,  -- ufix1
              AXI4_Stream_Imag_Master_TUSER => AXI4_Stream_Imag_Master_TUSER  -- ufix1
              );

  ip_timestamp <= to_unsigned(2012221057, 32);

  reset_cm <=  NOT IPCORE_RESETN;

  reset_before_sync <= reset_cm OR reset_internal;

  const_1_1 <= '1';

  AXI4_Stream_Real_Master_TDATA <= AXI4_Stream_Real_Master_TDATA_tmp;

  AXI4_Stream_Imag_Master_TDATA <= AXI4_Stream_Imag_Master_TDATA_tmp;

  AXI4_Lite_BRESP <= AXI4_Lite_BRESP_tmp;

  AXI4_Lite_RDATA <= AXI4_Lite_RDATA_tmp;

  AXI4_Lite_RRESP <= AXI4_Lite_RRESP_tmp;

END rtl;

